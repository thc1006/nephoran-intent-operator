# Critical Workflow Security Fixes

## 1. Fix branch-protection-setup.yml - Remove admin permissions

```yaml
# Current (INSECURE):
permissions:
  contents: read
  security-events: write
  actions: read
  administration: write  # REMOVE THIS
  metadata: read

# Fixed (SECURE):
permissions:
  contents: read
  security-events: write
  actions: read
  metadata: read
```

## 2. Add permissions to ci-production.yml

```yaml
# Add after 'name:' and before 'on:':
permissions:
  contents: read
  actions: read
  security-events: write
  checks: write
  packages: write  # Only if building containers
```

## 3. Add permissions to go-module-cache.yml

```yaml
# Add after 'name:' and before 'on:':
permissions:
  contents: read
  actions: read
  cache: write  # If managing caches
```

## 4. Add permissions to race-detection.yml

```yaml  
# Add after 'name:' and before 'on:':
permissions:
  contents: read
  checks: write  # For test results
```

## 5. Add permissions to security-scan-config.yml

```yaml
# Add after 'name:' and before 'on:':
permissions:
  contents: read
  security-events: write  # For scan results
  actions: read
```

## 6. Fix emergency-disable.yml - Reduce permissions

```yaml
# Current (EXCESSIVE):
permissions:
  contents: write
  actions: write
  pull-requests: write
  issues: write

# Fixed (MINIMAL):
permissions:
  contents: read
  issues: write  # To create disable notification
  # Consider using repository_dispatch event instead of modifying workflows
```

## 7. Add permissions to e2e-lightweight.yml

```yaml
# Add after 'name:' and before 'on:':
permissions:
  contents: read
  checks: write  # For test status
```

## 8. Add permissions to dev-fast.yml and dev-fast-fixed.yml

```yaml
# Add after 'name:' and before 'on:':
permissions:
  contents: read
  actions: read
```

## 9. Example for all test/CI workflows without permissions

```yaml
name: [Workflow Name]

# Add this block:
permissions:
  contents: read  # Always needed to checkout code
  actions: read   # Needed if checking other workflow statuses
  checks: write   # Only if updating check statuses

on:
  [existing triggers...]
```

## 10. Container/Package Publishing Workflows

For workflows like k8s-operator-ci-2025.yml that build containers:

```yaml
permissions:
  contents: read
  packages: write     # To push to GHCR
  id-token: write    # For OIDC authentication
  attestations: write # For supply chain security
```

## Application Script

To apply these fixes in bulk, use this PowerShell script:

```powershell
# add_minimal_permissions.ps1
$workflows = @(
    "cache-recovery-system.yml",
    "ci-optimized.yml",
    "ci-production.yml",
    "ci-reliability-optimized.yml",
    "ci-timeout-fix.yml",
    "dev-fast-fixed.yml",
    "dev-fast.yml",
    "e2e-lightweight.yml",
    "emergency-merge.yml",
    "go-module-cache.yml",
    "k8s-operator-ci-2025.yml",
    "nephoran-ci-consolidated-2025.yml",
    "optimized-test-execution.yml",
    "race-detection.yml",
    "security-scan-config.yml",
    "timeout-management.yml"
)

foreach ($workflow in $workflows) {
    $path = ".github/workflows/$workflow"
    if (Test-Path $path) {
        $content = Get-Content $path -Raw
        
        # Check if permissions already exist
        if ($content -notmatch "permissions:") {
            # Find the 'on:' line and insert permissions before it
            $lines = Get-Content $path
            $newLines = @()
            $inserted = $false
            
            foreach ($line in $lines) {
                if ($line -match "^on:" -and -not $inserted) {
                    $newLines += ""
                    $newLines += "# Security: Minimal required permissions"
                    $newLines += "permissions:"
                    $newLines += "  contents: read"
                    $newLines += ""
                    $inserted = $true
                }
                $newLines += $line
            }
            
            Set-Content $path -Value $newLines
            Write-Host "Added permissions to $workflow"
        } else {
            Write-Host "$workflow already has permissions"
        }
    }
}
```

## Verification Commands

After applying fixes, verify with:

```bash
# Check all workflows have permissions
for f in .github/workflows/*.yml; do
  echo "Checking $(basename $f)..."
  grep -q "permissions:" "$f" || echo "  WARNING: No permissions!"
done

# Check for dangerous permissions
grep -r "administration: write" .github/workflows/
grep -r "actions: write" .github/workflows/
grep -r "contents: write" .github/workflows/

# Validate YAML syntax
for f in .github/workflows/*.yml; do
  python -m yaml.safe_load < "$f" > /dev/null || echo "Invalid YAML: $f"
done
```