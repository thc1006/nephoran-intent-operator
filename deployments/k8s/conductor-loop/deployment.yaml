apiVersion: apps/v1
kind: Deployment
metadata:
  name: conductor-loop
  namespace: conductor-loop
  labels:
    app.kubernetes.io/name: conductor-loop
    app.kubernetes.io/instance: conductor-loop
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: orchestration
    app.kubernetes.io/part-of: nephoran-intent-operator
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "Conductor Loop deployment for Nephoran Intent Operator"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: conductor-loop
      app.kubernetes.io/instance: conductor-loop
  template:
    metadata:
      labels:
        app.kubernetes.io/name: conductor-loop
        app.kubernetes.io/instance: conductor-loop
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: orchestration
        app.kubernetes.io/part-of: nephoran-intent-operator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        checksum/config: "" # Will be populated by CI
    spec:
      serviceAccountName: conductor-loop
      automountServiceAccountToken: true
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
      
      # Pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values: ["conductor-loop"]
                topologyKey: kubernetes.io/hostname
      
      # Tolerations for node scheduling
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      
      # Init containers for setup
      initContainers:
        - name: setup-directories
          image: busybox:1.36
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
          command:
            - sh
            - -c
            - |
              echo "Setting up directories..."
              mkdir -p /data/handoff/in /data/handoff/out /logs
              chmod 755 /data/handoff/in /data/handoff/out /logs
              echo "Directory setup complete"
          volumeMounts:
            - name: data-volume
              mountPath: /data
            - name: logs-volume
              mountPath: /logs
      
      containers:
        - name: conductor-loop
          image: ghcr.io/thc1006/conductor-loop:latest
          imagePullPolicy: IfNotPresent
          
          # Security context
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
              add: ["NET_BIND_SERVICE"]
          
          # Command and args
          args:
            - "--config=/config/config.json"
            - "--log-level=info"
          
          # Environment variables
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CONDUCTOR_LOG_LEVEL
              value: "info"
            - name: CONDUCTOR_LOG_FORMAT
              value: "json"
            - name: CONDUCTOR_METRICS_ENABLED
              value: "true"
            - name: CONDUCTOR_HEALTH_PORT
              value: "8080"
            - name: CONDUCTOR_METRICS_PORT
              value: "9090"
            - name: CONDUCTOR_DATA_PATH
              value: "/data"
            - name: CONDUCTOR_CONFIG_PATH
              value: "/config/config.json"
          
          # Ports
          ports:
            - name: http-health
              containerPort: 8080
              protocol: TCP
            - name: http-metrics
              containerPort: 9090
              protocol: TCP
          
          # Volume mounts
          volumeMounts:
            - name: config-volume
              mountPath: /config
              readOnly: true
            - name: data-volume
              mountPath: /data
            - name: logs-volume
              mountPath: /logs
            - name: tmp
              mountPath: /tmp
          
          # Resource limits and requests
          resources:
            limits:
              cpu: "1000m"
              memory: "512Mi"
              ephemeral-storage: "1Gi"
            requests:
              cpu: "100m"
              memory: "128Mi"
              ephemeral-storage: "512Mi"
          
          # Liveness probe
          livenessProbe:
            httpGet:
              path: /livez
              port: http-health
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          
          # Readiness probe
          readinessProbe:
            httpGet:
              path: /readyz
              port: http-health
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          
          # Startup probe
          startupProbe:
            httpGet:
              path: /healthz
              port: http-health
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 12
            successThreshold: 1
          
          # Lifecycle hooks
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - "sleep 10"
      
      # Volumes
      volumes:
        - name: config-volume
          configMap:
            name: conductor-loop-config
            defaultMode: 0644
        - name: data-volume
          persistentVolumeClaim:
            claimName: conductor-loop-data
        - name: logs-volume
          persistentVolumeClaim:
            claimName: conductor-loop-logs
        - name: tmp
          emptyDir:
            sizeLimit: "100Mi"
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "2"
          - name: edns0
      
      # Restart policy
      restartPolicy: Always
      
      # Termination grace period
      terminationGracePeriodSeconds: 30
      
      # Enable service links
      enableServiceLinks: true
      
      # Scheduler name
      schedulerName: default-scheduler