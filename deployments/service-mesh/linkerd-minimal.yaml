# Linkerd Control Plane - Lightweight Service Mesh Alternative
apiVersion: v1
kind: Namespace
metadata:
  name: linkerd
  labels:
    name: linkerd
    linkerd.io/control-plane-ns: linkerd
    config.linkerd.io/admission-webhooks: disabled
  annotations:
    linkerd.io/created-by: linkerd/cli v2.14.0
---
# Service Mesh Proxy Injector
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    app.kubernetes.io/name: linkerd-proxy-injector
    app.kubernetes.io/part-of: linkerd-control-plane
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: linkerd-proxy-injector
  template:
    metadata:
      labels:
        app.kubernetes.io/name: linkerd-proxy-injector
        app.kubernetes.io/part-of: linkerd-control-plane
    spec:
      serviceAccountName: linkerd-proxy-injector
      securityContext:
        runAsNonRoot: true
        runAsUser: 2103
      containers:
      - name: proxy-injector
        image: cr.l5d.io/linkerd/proxy-injector:stable-2.14.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            cpu: 10m
            memory: 10Mi
          limits:
            cpu: 100m
            memory: 50Mi
        ports:
        - containerPort: 8443
          name: proxy-injector
          protocol: TCP
        - containerPort: 9995
          name: admin-http
          protocol: TCP
        env:
        - name: LINKERD_DISABLED
          value: "false"
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
      volumes:
      - name: tls
        secret:
          secretName: linkerd-proxy-injector-k8s-tls
---
# Simple Traffic Management for Zero-Downtime
apiVersion: v1
kind: ConfigMap
metadata:
  name: nephoran-traffic-config
  namespace: nephoran-system
  labels:
    app.kubernetes.io/name: nephoran-traffic-manager
    app.kubernetes.io/component: traffic-management
data:
  traffic-splitting.yaml: |
    # Traffic splitting configuration
    weight:
      stable: 90
      canary: 10
    healthCheck:
      path: /health
      interval: 10s
      timeout: 5s
      successThreshold: 2
      failureThreshold: 3
  
  circuit-breaker.yaml: |
    # Circuit breaker configuration
    failureThreshold: 5
    recoveryTimeout: 30s
    halfOpenMaxRequests: 3
    timeout: 10s
    
  retry-policy.yaml: |
    # Retry policy configuration  
    maxRetries: 3
    retryTimeout: 2s
    backoffMultiplier: 2
    conditions:
      - 5xx
      - connection-failure
      - timeout
---
# Traffic Manager Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nephoran-traffic-manager
  namespace: nephoran-system
  labels:
    app.kubernetes.io/name: nephoran-traffic-manager
    app.kubernetes.io/component: traffic-management
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: nephoran-traffic-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nephoran-traffic-manager
        app.kubernetes.io/component: traffic-management
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: nephoran-traffic-manager
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: traffic-manager
        image: nginx:1.25-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        volumeMounts:
        - name: config
          mountPath: /etc/nginx
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /var/cache/nginx
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: nephoran-traffic-config
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
---
# Service Account for Traffic Manager
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nephoran-traffic-manager
  namespace: nephoran-system
  labels:
    app.kubernetes.io/name: nephoran-traffic-manager
automountServiceAccountToken: false
---
# RBAC for Traffic Manager
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nephoran-traffic-manager
  namespace: nephoran-system
rules:
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nephoran-traffic-manager
  namespace: nephoran-system
subjects:
- kind: ServiceAccount
  name: nephoran-traffic-manager
  namespace: nephoran-system
roleRef:
  kind: Role
  name: nephoran-traffic-manager
  apiGroup: rbac.authorization.k8s.io