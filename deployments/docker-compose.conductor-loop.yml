# Docker Compose for Conductor Loop Development
# Includes all necessary dependencies and services for local development

version: '3.8'

services:
  # ---------------------------------------------------------------------------
  # Conductor Loop Service
  # ---------------------------------------------------------------------------
  conductor-loop:
    build:
      context: ../
      dockerfile: cmd/conductor-loop/Dockerfile
      target: dev
      args:
        VERSION: ${VERSION:-dev}
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-dev}
    image: conductor-loop:${VERSION:-dev}
    container_name: conductor-loop
    hostname: conductor-loop
    restart: unless-stopped
    
    # Environment variables
    environment:
      # Core configuration
      - CONDUCTOR_LOG_LEVEL=${LOG_LEVEL:-debug}
      - CONDUCTOR_LOG_FORMAT=json
      - CONDUCTOR_DEV_MODE=true
      
      # Storage paths
      - CONDUCTOR_CONFIG_PATH=/config/config.json
      - CONDUCTOR_DATA_PATH=/data
      - CONDUCTOR_LOG_PATH=/logs
      - CONDUCTOR_HANDOFF_IN_PATH=/data/handoff/in
      - CONDUCTOR_HANDOFF_OUT_PATH=/data/handoff/out
      
      # Service discovery
      - CONDUCTOR_REDIS_URL=redis://redis:6379
      - CONDUCTOR_PORCH_ENDPOINT=http://porch-server:7007
      
      # Monitoring
      - CONDUCTOR_METRICS_ENABLED=true
      - CONDUCTOR_METRICS_PORT=9090
      - CONDUCTOR_HEALTH_PORT=8080
      
      # Kubernetes connection (when running with host network)
      - KUBECONFIG=/root/.kube/config
    
    # Port mappings
    ports:
      - "8080:8080"   # Health check
      - "9090:9090"   # Metrics
      - "6060:6060"   # pprof (dev only)
    
    # Volume mounts
    volumes:
      # Configuration
      - ./conductor-loop/config:/config:ro
      - ./conductor-loop/logs:/logs
      
      # Persistent data and handoff directories
      - conductor-loop-data:/data
      - ./handoff/in:/data/handoff/in
      - ./handoff/out:/data/handoff/out
      
      # Kubernetes config (for local development)
      - ${HOME}/.kube:/root/.kube:ro
      
      # Development source code (for hot reload if needed)
      - ../cmd/conductor-loop:/app/src:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
      porch-server:
        condition: service_started
    
    # Security settings
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
    read_only: false  # Needs write access to /data and /logs
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ---------------------------------------------------------------------------
  # Redis Cache
  # ---------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: conductor-loop-redis
    hostname: redis
    restart: unless-stopped
    
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    
    volumes:
      - conductor-loop-redis:/data
    
    ports:
      - "6379:6379"
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # ---------------------------------------------------------------------------
  # Porch Server (Mock for development)
  # ---------------------------------------------------------------------------
  porch-server:
    image: nginx:alpine
    container_name: conductor-loop-porch-mock
    hostname: porch-server
    restart: unless-stopped
    
    volumes:
      - ./conductor-loop/porch-mock:/usr/share/nginx/html:ro
      - ./conductor-loop/porch-mock/nginx.conf:/etc/nginx/nginx.conf:ro
    
    ports:
      - "7007:80"
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid,size=50m
      - /var/run:noexec,nosuid,size=50m

  # ---------------------------------------------------------------------------
  # File Watcher (for handoff directory monitoring)
  # ---------------------------------------------------------------------------
  file-watcher:
    image: alpine:latest
    container_name: conductor-loop-watcher
    restart: unless-stopped
    
    command: >
      sh -c "
      apk add --no-cache inotify-tools curl &&
      while true; do
        inotifywait -r -e create,modify,delete /watch &&
        echo 'File change detected at $(date)' &&
        curl -f http://conductor-loop:8080/api/v1/trigger || true
      done
      "
    
    volumes:
      - ./handoff/in:/watch/in:ro
      - ./handoff/out:/watch/out:ro
    
    depends_on:
      conductor-loop:
        condition: service_healthy
    
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=10m

  # ---------------------------------------------------------------------------
  # Monitoring Stack (Optional - can be disabled)
  # ---------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: conductor-loop-prometheus
    hostname: prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    volumes:
      - ./conductor-loop/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - conductor-loop-prometheus:/prometheus
    
    ports:
      - "9091:9090"
    
    depends_on:
      - conductor-loop
    
    profiles:
      - monitoring
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: conductor-loop-grafana
    hostname: grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
    
    volumes:
      - ./conductor-loop/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./conductor-loop/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - conductor-loop-grafana:/var/lib/grafana
    
    ports:
      - "3000:3000"
    
    depends_on:
      - prometheus
    
    profiles:
      - monitoring
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

# ---------------------------------------------------------------------------
# Networks
# ---------------------------------------------------------------------------
networks:
  default:
    name: conductor-loop-network
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: conductor-loop0
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# ---------------------------------------------------------------------------
# Volumes
# ---------------------------------------------------------------------------
volumes:
  conductor-loop-data:
    name: conductor-loop-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/conductor-loop
  
  conductor-loop-redis:
    name: conductor-loop-redis
    driver: local
  
  conductor-loop-prometheus:
    name: conductor-loop-prometheus
    driver: local
  
  conductor-loop-grafana:
    name: conductor-loop-grafana
    driver: local

# ---------------------------------------------------------------------------
# Configuration Templates and Overrides
# ---------------------------------------------------------------------------
# Usage:
#   Development: docker-compose -f docker-compose.conductor-loop.yml up
#   With monitoring: docker-compose -f docker-compose.conductor-loop.yml --profile monitoring up
#   Production-like: CONDUCTOR_LOG_LEVEL=info docker-compose -f docker-compose.conductor-loop.yml up