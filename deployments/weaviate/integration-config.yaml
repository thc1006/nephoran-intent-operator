apiVersion: v1
kind: ConfigMap
metadata:
  name: nephoran-integration-config
  namespace: nephoran-system
  labels:
    app: nephoran
    component: integration
  annotations:
    kubernetes.io/description: "Integration configuration for Nephoran components with Weaviate"
data:
  # Weaviate connection configuration
  weaviate.yaml: |
    weaviate:
      url: "http://weaviate.nephoran-system.svc.cluster.local:8080"
      api_key_secret: "weaviate-api-key"
      timeout: 30s
      retry_attempts: 3
      connection_pool_size: 10
      
      # Health check configuration
      health_check:
        enabled: true
        interval: 30s
        timeout: 5s
        failure_threshold: 3
      
      # Schema validation
      schema_validation:
        enabled: true
        required_classes:
          - TelecomKnowledge
          - IntentPatterns
          - NetworkFunctions
        
      # Query configuration
      query:
        default_limit: 25
        max_limit: 1000
        default_certainty: 0.7
        hybrid_search_alpha: 0.75
  
  # RAG pipeline configuration
  rag-pipeline.yaml: |
    rag:
      # Model configuration
      llm:
        provider: "openai"
        model: "gpt-4o-mini"
        temperature: 0.1
        max_tokens: 2048
        timeout: 30s
        
      embedding:
        provider: "openai"
        model: "text-embedding-3-large"
        dimensions: 3072
        batch_size: 100
        
      # Processing configuration
      processing:
        chunk_size: 1000
        chunk_overlap: 200
        max_chunks_processed: 10
        confidence_threshold: 0.7
        
      # Cache configuration
      cache:
        enabled: true
        ttl: 3600s
        max_size: 1000
        
      # Metrics configuration
      metrics:
        enabled: true
        export_interval: 30s
        detailed_metrics: true
  
  # Controller integration settings
  controller.yaml: |
    controller:
      # Weaviate integration
      weaviate_integration:
        enabled: true
        service_name: "weaviate"
        namespace: "nephoran-system"
        port: 8080
        
      # RAG processor configuration
      rag_processor:
        enabled: true
        workers: 3
        queue_size: 100
        timeout: 60s
        retry_attempts: 3
        
      # LLM processor integration
      llm_processor:
        service_name: "llm-processor"
        namespace: "nephoran-system"
        port: 8080
        grpc_enabled: false
        
      # Intent processing
      intent_processing:
        max_concurrent_requests: 10
        processing_timeout: 30s
        validation_enabled: true
        audit_logging: true
  
  # Service mesh configuration
  service-mesh.yaml: |
    service_mesh:
      # Traffic routing
      routing:
        weaviate:
          load_balancing: "round_robin"
          circuit_breaker:
            enabled: true
            failure_threshold: 5
            recovery_timeout: 30s
          retry_policy:
            max_attempts: 3
            backoff: "exponential"
        
        rag_api:
          timeout: 60s
          keepalive: 30s
          
      # Security policies
      security:
        mtls_enabled: true
        authentication_required: true
        authorization_policy: "strict"
        
      # Observability
      observability:
        tracing_enabled: true
        metrics_enabled: true
        access_logging: true
  
  # Environment-specific overrides
  environments.yaml: |
    environments:
      development:
        weaviate:
          replicas: 1
          resources:
            limits:
              memory: "4Gi"
              cpu: "1000m"
        rag:
          cache:
            ttl: 300s
        controller:
          rag_processor:
            workers: 1
            
      staging:
        weaviate:
          replicas: 2
          resources:
            limits:
              memory: "8Gi"
              cpu: "2000m"
        rag:
          processing:
            max_chunks_processed: 8
            
      production:
        weaviate:
          replicas: 3
          resources:
            limits:
              memory: "16Gi"
              cpu: "4000m"
        controller:
          intent_processing:
            max_concurrent_requests: 20
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nephoran-compatibility-fixes
  namespace: nephoran-system
  labels:
    app: nephoran
    component: compatibility
  annotations:
    kubernetes.io/description: "Compatibility fixes for controller-runtime integration"
data:
  # Go module compatibility
  go-compatibility.env: |
    # Controller runtime version compatibility
    CONTROLLER_RUNTIME_VERSION=v0.21.0
    KUBERNETES_VERSION=v0.33.3
    
    # Weaviate client compatibility
    WEAVIATE_CLIENT_VERSION=v4.15.0
    
    # Network settings
    GOMAXPROCS=4
    GOGC=100
    
    # Timeout settings
    KUBERNETES_CLIENT_TIMEOUT=30s
    HTTP_CLIENT_TIMEOUT=30s
    GRPC_CLIENT_TIMEOUT=30s
  
  # Networking fixes
  network-fixes.yaml: |
    network:
      # DNS configuration
      dns:
        ndots: 2
        searches:
          - nephoran-system.svc.cluster.local
          - svc.cluster.local
          - cluster.local
        options:
          - name: timeout
            value: "2"
          - name: attempts
            value: "3"
      
      # Service discovery
      service_discovery:
        refresh_interval: 30s
        failure_detection_interval: 5s
        
      # Load balancing
      load_balancing:
        algorithm: "least_conn"
        health_check_interval: 10s
  
  # Resource management
  resource-management.yaml: |
    resources:
      # Memory management
      memory:
        gc_target_percentage: 75
        max_heap_size: "2Gi"
        
      # CPU management  
      cpu:
        max_procs: 4
        scheduler_latency_ns: 1000000
        
      # Connection pooling
      connection_pools:
        weaviate:
          max_idle_conns: 10
          max_conns_per_host: 20
          idle_conn_timeout: 90s
        
        kubernetes_api:
          qps: 50
          burst: 100
---
apiVersion: batch/v1
kind: Job
metadata:
  name: nephoran-integration-validator
  namespace: nephoran-system
  labels:
    app: nephoran
    component: integration-validator
  annotations:
    kubernetes.io/description: "Validates integration between Nephoran components and Weaviate"
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 1800
  template:
    metadata:
      labels:
        app: nephoran-integration-validator
    spec:
      serviceAccountName: weaviate
      restartPolicy: Never
      containers:
      - name: validator
        image: curlimages/curl:8.5.0
        env:
        - name: WEAVIATE_URL
          value: "http://weaviate:8080"
        - name: WEAVIATE_API_KEY
          valueFrom:
            secretKeyRef:
              name: weaviate-api-key
              key: api-key
        command: ["/bin/sh"]
        args:
        - -c
        - |
          set -e
          echo "Starting Nephoran-Weaviate integration validation..."
          
          # Test 1: Basic connectivity
          echo "Test 1: Testing basic connectivity..."
          if curl -f -H "Authorization: Bearer $WEAVIATE_API_KEY" \
             "$WEAVIATE_URL/v1/.well-known/ready"; then
            echo "✓ Basic connectivity test passed"
          else
            echo "✗ Basic connectivity test failed"
            exit 1
          fi
          
          # Test 2: Schema validation
          echo "Test 2: Validating schemas..."
          SCHEMA_RESPONSE=$(curl -s -H "Authorization: Bearer $WEAVIATE_API_KEY" \
                           "$WEAVIATE_URL/v1/schema")
          
          if echo "$SCHEMA_RESPONSE" | grep -q "TelecomKnowledge"; then
            echo "✓ TelecomKnowledge schema found"
          else
            echo "✗ TelecomKnowledge schema missing"
            exit 1
          fi
          
          if echo "$SCHEMA_RESPONSE" | grep -q "IntentPatterns"; then
            echo "✓ IntentPatterns schema found"
          else
            echo "✗ IntentPatterns schema missing"
            exit 1
          fi
          
          if echo "$SCHEMA_RESPONSE" | grep -q "NetworkFunctions"; then
            echo "✓ NetworkFunctions schema found"
          else
            echo "✗ NetworkFunctions schema missing"
            exit 1
          fi
          
          # Test 3: Query capability
          echo "Test 3: Testing query capability..."
          QUERY_RESPONSE=$(curl -s -H "Authorization: Bearer $WEAVIATE_API_KEY" \
                          -H "Content-Type: application/json" \
                          -d '{"query":"{ Get { TelecomKnowledge(limit: 1) { content } } }"}' \
                          "$WEAVIATE_URL/v1/graphql")
          
          if echo "$QUERY_RESPONSE" | grep -q "content"; then
            echo "✓ Query capability test passed"
          else
            echo "✗ Query capability test failed"
            echo "Response: $QUERY_RESPONSE"
            exit 1
          fi
          
          # Test 4: Hybrid search capability
          echo "Test 4: Testing hybrid search..."
          HYBRID_RESPONSE=$(curl -s -H "Authorization: Bearer $WEAVIATE_API_KEY" \
                           -H "Content-Type: application/json" \
                           -d '{
                             "query": "{ Get { TelecomKnowledge(hybrid: {query: \"AMF\"}, limit: 1) { content } } }"
                           }' \
                           "$WEAVIATE_URL/v1/graphql")
          
          if echo "$HYBRID_RESPONSE" | grep -q "content"; then
            echo "✓ Hybrid search test passed"
          else
            echo "✗ Hybrid search test failed"
            echo "Response: $HYBRID_RESPONSE"
            exit 1
          fi
          
          # Test 5: Metrics endpoint
          echo "Test 5: Testing metrics endpoint..."
          if curl -f "$WEAVIATE_URL/metrics" > /dev/null 2>&1; then
            echo "✓ Metrics endpoint accessible"
          else
            echo "✗ Metrics endpoint not accessible"
            exit 1
          fi
          
          echo "All integration tests passed successfully!"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: nephoran-integration-service
  namespace: nephoran-system
  labels:
    app: nephoran
    component: integration
  annotations:
    kubernetes.io/description: "Service for inter-component communication"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: nephoran-integration