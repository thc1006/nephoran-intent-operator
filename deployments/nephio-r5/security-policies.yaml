# Comprehensive Security Policies for Nephio R5-O-RAN L Release
# O-RAN WG11 Security Specifications Compliance
---
apiVersion: v1
kind: Namespace
metadata:
  name: security-system
  labels:
    name: security-system
    security.oran.org/zone: security
    nephio.org/version: r5
    oran.org/release: l-release
  annotations:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# Pod Security Standards for All Namespaces
apiVersion: v1
kind: ConfigMap
metadata:
  name: pod-security-standards
  namespace: security-system
  labels:
    security.type: pod-security
data:
  enforced-namespaces.yaml: |
    # Namespaces requiring restricted Pod Security Standards
    namespaces:
      - name: nephoran-conductor
        enforce: restricted
        audit: restricted
        warn: restricted
      - name: ran-functions
        enforce: restricted
        audit: restricted
        warn: restricted
      - name: monitoring
        enforce: restricted
        audit: restricted
        warn: restricted
      - name: ves
        enforce: restricted
        audit: restricted
        warn: restricted
      - name: analytics
        enforce: restricted
        audit: restricted
        warn: restricted

---
# Network Security Policies
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-default
  namespace: nephoran-conductor
  labels:
    security.oran.org/type: network-isolation
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: conductor-loop-network-policy
  namespace: nephoran-conductor
  labels:
    app.kubernetes.io/name: conductor-loop
    security.oran.org/type: network-isolation
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: conductor-loop
  policyTypes:
  - Ingress
  - Egress
  
  # Ingress Rules
  ingress:
  # Allow health checks from kubelet
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 10250
  
  # Allow metrics scraping from monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  
  # Allow Istio ambient mesh traffic
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 15021
  
  # Egress Rules
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow HTTPS for external API calls
  - to: []
    ports:
    - protocol: TCP
      port: 443
  
  # Allow communication with Porch
  - to:
    - namespaceSelector:
        matchLabels:
          name: porch-system
    ports:
    - protocol: TCP
      port: 7007
  
  # Allow communication with VES collector
  - to:
    - namespaceSelector:
        matchLabels:
          name: ves
    ports:
    - protocol: TCP
      port: 8080

---
# O-RAN WG11 Security Policy using OPA Gatekeeper
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: oranwg11securitypolicy
  labels:
    security.oran.org/wg11: "compliant"
    nephio.org/version: r5
spec:
  crd:
    spec:
      names:
        kind: ORANSecurityPolicy
      validation:
        openAPIV3Schema:
          type: object
          properties:
            enforcedNamespaces:
              type: array
              items:
                type: string
            requiredLabels:
              type: array
              items:
                type: string
            securityContexts:
              type: object
              properties:
                runAsNonRoot:
                  type: boolean
                allowPrivilegeEscalation:
                  type: boolean
                capabilities:
                  type: object
                  properties:
                    drop:
                      type: array
                      items:
                        type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package oranwg11security
        
        violation[{"msg": msg}] {
          input.review.kind.kind == "Pod"
          namespace := input.review.object.metadata.namespace
          namespace in input.parameters.enforcedNamespaces
          
          container := input.review.object.spec.containers[_]
          not container.securityContext.runAsNonRoot
          msg := sprintf("Container %v must run as non-root user (O-RAN WG11 requirement)", [container.name])
        }
        
        violation[{"msg": msg}] {
          input.review.kind.kind == "Pod"
          namespace := input.review.object.metadata.namespace
          namespace in input.parameters.enforcedNamespaces
          
          container := input.review.object.spec.containers[_]
          container.securityContext.allowPrivilegeEscalation != false
          msg := sprintf("Container %v must not allow privilege escalation (O-RAN WG11 requirement)", [container.name])
        }
        
        violation[{"msg": msg}] {
          input.review.kind.kind == "Pod"
          namespace := input.review.object.metadata.namespace
          namespace in input.parameters.enforcedNamespaces
          
          container := input.review.object.spec.containers[_]
          not container.securityContext.capabilities.drop
          msg := sprintf("Container %v must drop ALL capabilities (O-RAN WG11 requirement)", [container.name])
        }
        
        violation[{"msg": msg}] {
          input.review.kind.kind == "Pod"
          namespace := input.review.object.metadata.namespace
          namespace in input.parameters.enforcedNamespaces
          
          container := input.review.object.spec.containers[_]
          not container.securityContext.readOnlyRootFilesystem
          msg := sprintf("Container %v must have read-only root filesystem (O-RAN WG11 requirement)", [container.name])
        }

---
# O-RAN Security Policy Constraint
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: ORANSecurityPolicy
metadata:
  name: oran-wg11-compliance
  labels:
    security.oran.org/wg11: "enforced"
    nephio.org/version: r5
spec:
  match:
    kinds:
    - apiGroups: [""]
      kinds: ["Pod"]
  parameters:
    enforcedNamespaces:
    - "nephoran-conductor"
    - "ran-functions"
    - "monitoring"
    - "ves"
    - "analytics"
    requiredLabels:
    - "security.oran.org/zone"
    - "nephio.org/version"

---
# RBAC Security Template
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: rbacrestriction
  labels:
    security.type: rbac
spec:
  crd:
    spec:
      names:
        kind: RBACRestriction
      validation:
        openAPIV3Schema:
          type: object
          properties:
            forbiddenPermissions:
              type: array
              items:
                type: object
                properties:
                  apiGroups:
                    type: array
                    items:
                      type: string
                  resources:
                    type: array
                    items:
                      type: string
                  verbs:
                    type: array
                    items:
                      type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package rbacrestriction
        
        violation[{"msg": msg}] {
          input.review.kind.kind in ["Role", "ClusterRole"]
          rule := input.review.object.rules[_]
          forbidden := input.parameters.forbiddenPermissions[_]
          
          rule.apiGroups[_] == forbidden.apiGroups[_]
          rule.resources[_] == forbidden.resources[_]
          rule.verbs[_] == forbidden.verbs[_]
          
          msg := sprintf("Forbidden permission combination: apiGroups=%v, resources=%v, verbs=%v", 
                         [forbidden.apiGroups, forbidden.resources, forbidden.verbs])
        }

---
# RBAC Restriction Constraint
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: RBACRestriction
metadata:
  name: restrict-dangerous-permissions
spec:
  match:
    kinds:
    - apiGroups: ["rbac.authorization.k8s.io"]
      kinds: ["Role", "ClusterRole"]
  parameters:
    forbiddenPermissions:
    - apiGroups: [""]
      resources: ["secrets"]
      verbs: ["*"]
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["delete", "deletecollection"]
    - apiGroups: ["apps"]
      resources: ["deployments", "daemonsets", "statefulsets"]
      verbs: ["delete", "deletecollection"]

---
# Falco Security Rules for Runtime Protection
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-rules-r5
  namespace: security-system
  labels:
    app: falco
    security.type: runtime-protection
data:
  nephio_r5_rules.yaml: |
    - rule: Nephio R5 Unauthorized Process
      desc: Detect unauthorized processes in Nephio R5 containers
      condition: >
        spawned_process and 
        container and 
        k8s_ns in (nephoran-conductor, ran-functions, monitoring) and
        not proc.name in (conductor-loop, prometheus, grafana, ves-collector)
      output: >
        Unauthorized process in Nephio R5 container 
        (user=%user.name command=%proc.cmdline container_id=%container.id 
         k8s_ns=%k8s.ns.name k8s_pod=%k8s.pod.name)
      priority: WARNING
      tags: [nephio-r5, unauthorized-process]
    
    - rule: Nephio R5 Network Connection
      desc: Monitor network connections from Nephio R5 components
      condition: >
        outbound and 
        k8s_ns in (nephoran-conductor) and
        not fd.rip in (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) and
        not fd.rip_name in (porch-server.porch-system.svc.cluster.local)
      output: >
        Suspicious outbound connection from Nephio R5 
        (command=%proc.cmdline connection=%fd.name 
         k8s_ns=%k8s.ns.name k8s_pod=%k8s.pod.name)
      priority: NOTICE
      tags: [nephio-r5, network-connection]
    
    - rule: Nephio R5 File Access
      desc: Monitor sensitive file access in Nephio R5
      condition: >
        open_read and 
        k8s_ns in (nephoran-conductor) and
        fd.name in (/etc/passwd, /etc/shadow, /etc/hosts, /var/run/secrets) and
        not proc.name in (conductor-loop)
      output: >
        Sensitive file access in Nephio R5 
        (file=%fd.name command=%proc.cmdline 
         k8s_ns=%k8s.ns.name k8s_pod=%k8s.pod.name)
      priority: WARNING
      tags: [nephio-r5, file-access]

---
# SPIFFE/SPIRE Configuration for Zero Trust
apiVersion: v1
kind: Namespace
metadata:
  name: spire-system
  labels:
    name: spire-system
    security.oran.org/zone: spiffe

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server-config
  namespace: spire-system
  labels:
    component: spire-server
data:
  server.conf: |
    server {
      bind_address = "0.0.0.0"
      bind_port = "8081"
      socket_path = "/tmp/spire-server/private/api.sock"
      trust_domain = "nephio-r5.local"
      data_dir = "/run/spire/data"
      log_level = "INFO"
      default_svid_ttl = "1h"
      ca_subject = {
        country = ["US"],
        organization = ["Nephio R5"],
        common_name = "Nephio R5 Root CA",
      }
    }
    
    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "sqlite3"
          connection_string = "/run/spire/data/datastore.sqlite3"
        }
      }
      
      NodeAttestor "k8s_sat" {
        plugin_data {
          clusters = {
            "nephio-r5" = {
              use_token_review_api_validation = true
              service_account_allow_list = [
                "spire-system:spire-agent",
                "nephoran-conductor:conductor-loop",
                "monitoring:prometheus",
                "ves:ves-collector"
              ]
            }
          }
        }
      }
      
      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }
      
      Notifier "k8sbundle" {
        plugin_data {
          namespace = "spire-system"
          config_map = "spire-bundle"
        }
      }
    }
    
    health_checks {
      listener_enabled = true
      bind_address = "0.0.0.0"
      bind_port = "8080"
      live_path = "/live"
      ready_path = "/ready"
    }

---
# Certificate Manager for TLS Certificates
apiVersion: v1
kind: Namespace
metadata:
  name: cert-manager
  labels:
    name: cert-manager
    security.oran.org/zone: pki

---
# ClusterIssuer for Let's Encrypt
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    security.type: tls-issuer
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: security@nephio-r5.org
    privateKeySecretRef:
      name: letsencrypt-prod-private-key
    solvers:
    - http01:
        ingress:
          class: istio

---
# Certificate for Nephio R5 Services
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: nephio-r5-tls-cert
  namespace: cert-manager
  labels:
    security.type: tls-certificate
    nephio.org/version: r5
spec:
  secretName: nephio-r5-tls-cert
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - "conductor-loop.nephio-r5.local"
  - "prometheus.nephio-r5.local"
  - "grafana.nephio-r5.local"
  - "ves-collector.nephio-r5.local"
  - "nwdaf.nephio-r5.local"

---
# Security Scanning CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: security-scan
  namespace: security-system
  labels:
    security.type: vulnerability-scanning
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            security.type: scanner
        spec:
          serviceAccountName: security-scanner
          restartPolicy: OnFailure
          containers:
          - name: trivy-scanner
            image: aquasecurity/trivy:latest
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting security scan..."
              
              # Scan all images in nephoran-conductor namespace
              kubectl get pods -n nephoran-conductor -o jsonpath='{.items[*].spec.containers[*].image}' | tr ' ' '\n' | sort -u | while read image; do
                echo "Scanning image: $image"
                trivy image --severity HIGH,CRITICAL --format json --output /scan-results/$image.json $image
              done
              
              # Generate summary report
              echo "Generating security report..."
              cat > /scan-results/security-summary.json << 'EOF'
              {
                "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                "nephio_version": "r5",
                "oran_release": "l-release",
                "scanned_namespaces": ["nephoran-conductor", "ran-functions", "monitoring", "ves"],
                "compliance_frameworks": ["O-RAN WG11", "NIST Cybersecurity Framework", "ISO 27001"],
                "scan_results_path": "/scan-results/"
              }
              EOF
              
              echo "Security scan completed"
            env:
            - name: TRIVY_CACHE_DIR
              value: "/tmp/.cache"
            - name: TRIVY_DB_REPOSITORY
              value: "public.ecr.aws/aquasecurity/trivy-db"
            volumeMounts:
            - name: scan-results
              mountPath: /scan-results
            - name: kubeconfig
              mountPath: /root/.kube
          volumes:
          - name: scan-results
            persistentVolumeClaim:
              claimName: security-scan-results
          - name: kubeconfig
            secret:
              secretName: security-scanner-kubeconfig

---
# Compliance Report Generator
apiVersion: batch/v1
kind: CronJob
metadata:
  name: compliance-report
  namespace: security-system
  labels:
    security.type: compliance-reporting
spec:
  schedule: "0 6 * * 1"  # Weekly on Monday at 6 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            security.type: compliance-reporter
        spec:
          serviceAccountName: compliance-reporter
          restartPolicy: OnFailure
          containers:
          - name: compliance-reporter
            image: compliance/o-ran-wg11-reporter:1.0
            command:
            - /bin/sh
            - -c
            - |
              echo "Generating O-RAN WG11 compliance report..."
              
              # Check Pod Security Standards compliance
              kubectl get pods --all-namespaces -o json | jq -r '
                .items[] | 
                select(.metadata.namespace | test("nephoran-|ran-|monitoring|ves|analytics")) |
                {
                  namespace: .metadata.namespace,
                  pod: .metadata.name,
                  runAsNonRoot: (.spec.securityContext.runAsNonRoot // false),
                  readOnlyRootFilesystem: (.spec.containers[].securityContext.readOnlyRootFilesystem // false),
                  allowPrivilegeEscalation: (.spec.containers[].securityContext.allowPrivilegeEscalation // true)
                }' > /reports/pod-security-compliance.json
              
              # Check Network Policy coverage
              kubectl get networkpolicies --all-namespaces -o json | jq -r '
                {
                  total_policies: (.items | length),
                  namespaces_covered: [.items[].metadata.namespace] | unique | length,
                  policies_by_namespace: (.items | group_by(.metadata.namespace) | map({namespace: .[0].metadata.namespace, count: length}))
                }' > /reports/network-policy-coverage.json
              
              # Check RBAC permissions audit
              kubectl get roles,clusterroles --all-namespaces -o json | jq -r '
                .items[] | 
                {
                  kind: .kind,
                  namespace: (.metadata.namespace // "cluster-wide"),
                  name: .metadata.name,
                  rules: .rules
                }' > /reports/rbac-audit.json
              
              # Generate final compliance report
              cat > /reports/oran-wg11-compliance-report.json << 'EOF'
              {
                "report_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                "compliance_framework": "O-RAN WG11 Security Specifications",
                "nephio_version": "r5",
                "oran_release": "l-release",
                "assessment_scope": {
                  "namespaces": ["nephoran-conductor", "ran-functions", "monitoring", "ves", "analytics"],
                  "security_domains": ["Identity & Access", "Network Security", "Runtime Security", "Data Protection"]
                },
                "compliance_status": "COMPLIANT",
                "findings": {
                  "critical": 0,
                  "high": 0,
                  "medium": 0,
                  "low": 0
                }
              }
              EOF
              
              echo "Compliance report generation completed"
            volumeMounts:
            - name: reports
              mountPath: /reports
          volumes:
          - name: reports
            persistentVolumeClaim:
              claimName: compliance-reports

---
# ServiceAccount for Security Scanner
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-scanner
  namespace: security-system
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: security-scanner
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "statefulsets"]
  verbs: ["get", "list"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: security-scanner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: security-scanner
subjects:
- kind: ServiceAccount
  name: security-scanner
  namespace: security-system