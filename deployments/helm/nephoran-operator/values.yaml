# Default values for nephoran-operator
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#
# The Nephoran Intent Operator enables natural language driven network orchestration
# for O-RAN and cloud-native network functions. It translates high-level intents
# into concrete network configurations using LLM processing and GitOps workflows.

# ==============================================================================
# Global Configuration
# ==============================================================================
# These settings apply across all components of the Nephoran operator
global:
  # Container image registry override
  # Leave empty to use default registries specified in each component
  # Example: "ghcr.io/nephoran" or "your-registry.io"
  imageRegistry: ""
  
  # List of image pull secrets for private registries
  # Each secret should be created in the deployment namespace
  # Example: [{name: "regcred"}]
  imagePullSecrets: []

# ==============================================================================
# Feature Flags
# ==============================================================================
# Control which optional features are enabled in the deployment

# RAG (Retrieval-Augmented Generation) configuration
# Enables semantic search and context-aware intent processing
rag:
  # Enable RAG functionality for enhanced intent understanding
  # When enabled, deploys RAG API service and configures vector database
  enabled: false
  
  # RAG endpoint compatibility configuration
  compat:
    # API endpoint compatibility mode
    # When true: use legacy /process_intent endpoint (for backward compatibility)
    # When false: use new /process endpoint (recommended for new deployments)
    enableLegacyProcessIntent: true

# Machine Learning features
# Enables advanced ML-based optimization and prediction
ml:
  # Enable ML-powered features like predictive scaling and anomaly detection
  enabled: false

# Git integration settings for GitOps workflows
git:
  # Name of the Kubernetes secret containing the Git token
  # The secret should have a key named 'token' with the Git personal access token
  # Required for pushing generated packages to Git repositories
  tokenSecret: ""
  
  # Maximum number of concurrent Git push operations
  # Prevents overwhelming Git servers and rate limiting
  # Increase for high-throughput environments, decrease for rate-limited repos
  concurrentPushLimit: 4

# ==============================================================================
# Nephoran Operator Controller (Main Controller)
# ==============================================================================
# The core controller that manages NetworkIntent CRDs and orchestrates
# the intent processing pipeline

nephoranOperator:
  # Enable/disable the main operator controller
  # Should always be true unless running components separately
  enabled: true
  
  # Number of controller replicas for high availability
  # Set to 1 for development, 3+ for production
  # Only one replica will be active (leader election enabled)
  replicaCount: 1
  
  image:
    repository: "thc1006/nephoran-operator"
    tag: "latest"
    pullPolicy: IfNotPresent
    
  service:
    type: ClusterIP
    port: 9443
    targetPort: 9443
    
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
      
  podSecurityContext:
    fsGroup: 65534
    
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
      
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Leader election configuration for high availability
  # Ensures only one controller instance is active at a time
  leaderElection:
    # Enable leader election for multi-replica deployments
    # Must be true when replicaCount > 1
    enabled: false
    
    # Duration that non-leader candidates will wait after observing a leadership
    # renewal until attempting to acquire leadership
    leaseDuration: "15s"
    
    # Duration that the acting leader will retry refreshing leadership
    # before giving up leadership
    renewDeadline: "10s"
    
    # Duration the LeaderElector clients should wait between tries of actions
    retryPeriod: "2s"
  
  # TLS checksum (for automatic pod restarts on certificate rotation)
  tlsChecksum: ""
  
  # Health check configuration
  healthCheck:
    enabled: true
    livenessProbe:
      httpGet:
        path: /healthz
        port: 8081
      failureThreshold: 3
      periodSeconds: 10
      initialDelaySeconds: 15
      timeoutSeconds: 5
    readinessProbe:
      httpGet:
        path: /readyz
        port: 8081
      failureThreshold: 3
      periodSeconds: 10
      initialDelaySeconds: 5
      timeoutSeconds: 5
    startupProbe:
      httpGet:
        path: /healthz
        port: 8081
      failureThreshold: 30
      periodSeconds: 10
      initialDelaySeconds: 10
      timeoutSeconds: 3

# ==============================================================================
# RAG API Service
# ==============================================================================
# Provides semantic search and context retrieval for intent processing
# Automatically deployed when rag.enabled is true

ragApi:
  # Deployment is controlled by the rag.enabled feature flag
  # Do not modify this directly
  enabled: false  # Controlled by rag.enabled
  
  # Number of RAG API service replicas
  # Increase for better availability and load distribution
  replicaCount: 1
  
  image:
    repository: python
    tag: "3.11-slim"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 5001
    targetPort: 5001
  
  # Environment variables
  env:
    - name: WEAVIATE_URL
      value: "http://weaviate.weaviate.svc.cluster.local:8080"
    - name: OPENAI_API_KEY
      valueFrom:
        secretKeyRef:
          name: openai-credentials
          key: apiKey
  
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 256Mi
  
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# ==============================================================================
# Service Account Configuration
# ==============================================================================
# Kubernetes service account for RBAC and workload identity

serviceAccount:
  # Create a dedicated service account for the operator
  # Set to false to use an existing service account
  create: true
  
  # Annotations to add to the service account
  # Useful for workload identity binding (GKE, EKS IRSA, etc.)
  # Example: {"iam.gke.io/gcp-service-account": "nephoran@project.iam.gserviceaccount.com"}
  annotations: {}
  
  # Override the service account name
  # Leave empty to use the release name
  name: ""

# ==============================================================================
# RBAC Configuration
# ==============================================================================
# Role-Based Access Control for Kubernetes API permissions

rbac:
  # Create RBAC resources (ClusterRole, ClusterRoleBinding)
  # Required for the operator to manage CRDs and resources
  # Set to false only if manually managing RBAC
  create: true

# Ingress
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: nephoran-operator.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# ==============================================================================
# Monitoring Configuration
# ==============================================================================
# Prometheus monitoring and alerting configuration

monitoring:
  # Enable monitoring features (metrics endpoints)
  enabled: false
  
  # ServiceMonitor for Prometheus Operator
  serviceMonitor:
    # Create ServiceMonitor resource for automatic discovery
    enabled: false
    
    # Scrape interval for metrics collection
    # Lower values provide more granular data but increase load
    interval: 30s
    
    # Timeout for each scrape request
    # Should be less than the interval
    scrapeTimeout: 10s
    
    # Additional labels for ServiceMonitor selection
    # Must match Prometheus serviceMonitorSelector
    labels: {}
  
  # PrometheusRule for alerting
  prometheusRule:
    # Create PrometheusRule resource for alerts
    enabled: false
    
    # Alert rules in Prometheus format
    # Example: [{alert: "HighErrorRate", expr: "rate(errors[5m]) > 0.1"}]
    rules: []

# Service Mesh configuration
serviceMesh:
  enabled: false

# Network Policy configuration
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  denyAll: false
  ingress: []
  egress: []

# ==============================================================================
# Security Configuration
# ==============================================================================
# Comprehensive security settings for hardened deployments

security:
  # mTLS (Mutual TLS) configuration for service-to-service communication
  # Provides encryption and mutual authentication between services
  mtls:
    # Enable mTLS for all internal communications
    # Requires certificate management (cert-manager or similar)
    enabled: false
  
  # Pod Security Standards
  podSecurityStandards:
    enforce: "restricted"
    audit: "restricted"
    warn: "restricted"
  
  # Network Policies
  networkPolicies:
    enabled: true
    allowNamespaces: []
  
  # Security scanning
  scanning:
    enabled: true
    trivy:
      enabled: true
    falco:
      enabled: false

# Secrets Configuration (SOPS-encrypted)
secrets:
  # API Keys secret
  apiKeys:
    name: "nephoran-api-keys"
    namespace: "nephoran-system"
  
  # Database credentials secret
  database:
    name: "nephoran-database-credentials"
    namespace: "nephoran-system"
  
  # Authentication secrets
  auth:
    name: "nephoran-auth-secrets"
    namespace: "nephoran-system"
  
  # TLS certificates secret
  tls:
    name: "nephoran-tls-certificates"
    namespace: "nephoran-system"
  
  # mTLS certificates secret
  mtls:
    name: "nephoran-mtls-certificates"
    namespace: "nephoran-system"
  
  # O-RAN credentials secret
  oran:
    name: "nephoran-oran-credentials"
    namespace: "nephoran-system"
  
  # External secrets operator (if using)
  external:
    enabled: false
    backend: "vault"  # vault, aws-secrets-manager, azure-keyvault, gcp-secret-manager
    refreshInterval: "1h"

# ==============================================================================
# LLM Processor Service
# ==============================================================================
# Handles natural language processing and intent translation
# This is the core AI component that interprets user intents

llmProcessor:
  # Enable the LLM processor service
  # Required for intent processing functionality
  enabled: true
  
  # Number of LLM processor replicas
  # Consider LLM API rate limits when scaling
  replicaCount: 1
  
  # Log level
  logLevel: "info"
  
  # Metrics security configuration
  metrics:
    # When false (default), metrics are only accessible from allowed CIDR blocks
    # When true, metrics are publicly accessible (not recommended for production)
    exposePublicly: false
    # CIDR blocks allowed to access metrics when exposePublicly is false
    # Default includes common private network ranges
    allowedCIDRs:
      - "10.0.0.0/8"        # Private Class A networks
      - "172.16.0.0/12"     # Private Class B networks  
      - "192.168.0.0/16"    # Private Class C networks
      - "127.0.0.0/8"       # Localhost
  
  # LLM provider configuration
  providers:
    openai:
      enabled: true
      model: "gpt-4o-mini"
    anthropic:
      enabled: false
      model: "claude-3-sonnet"
    azure:
      enabled: false
      deployment: "gpt-4"
    google:
      enabled: false
      model: "gemini-pro"
  
  # Database configuration
  database:
    enabled: false
    type: "postgres"
  
  image:
    repository: thc1006/nephoran-llm-processor
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  
  # Health check configuration
  healthCheck:
    enabled: true
    livenessProbe:
      httpGet:
        path: /healthz
        port: 8080
      failureThreshold: 3
      periodSeconds: 10
      initialDelaySeconds: 30
      timeoutSeconds: 5
    readinessProbe:
      httpGet:
        path: /readyz
        port: 8080
      failureThreshold: 3
      periodSeconds: 10
      initialDelaySeconds: 5
      timeoutSeconds: 5
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Node selection
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  
  # Pod security context
  podSecurityContext:
    fsGroup: 65534
  
  # RAG service configuration (conditional)
  ragService:
    # Base URL for RAG API service (endpoint path determined by rag.compat.enableLegacyProcessIntent)
    url: "http://rag-api:5001"
  
  # Pod disruption budget
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
  
  # Horizontal pod autoscaling
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# ==============================================================================
# Nephio Bridge Service
# ==============================================================================
# Integrates with Nephio for package management and workload cluster operations
# Enables multi-cluster orchestration and package lifecycle management

nephioBridge:
  # Enable Nephio integration bridge
  # Required for Nephio-based deployments
  enabled: false
  
  # Number of bridge service replicas
  replicaCount: 1
  
  image:
    repository: "thc1006/nephio-bridge"
    tag: "latest"
    pullPolicy: IfNotPresent
    
  service:
    type: ClusterIP
    port: 8082
    targetPort: 8082
    
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
      
  podSecurityContext:
    fsGroup: 65534
    
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
      
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  podDisruptionBudget:
    enabled: false
    minAvailable: 1

# ==============================================================================
# O-RAN Adaptor Service
# ==============================================================================
# Provides O-RAN specific interfaces (O1, O2, A1, E2) for RAN integration
# Enables communication with O-RAN compliant network functions

oranAdaptor:
  # Enable O-RAN interfaces adaptor
  # Required for O-RAN deployments
  enabled: false
  
  # Number of adaptor service replicas
  replicaCount: 1
  
  image:
    repository: "thc1006/oran-adaptor"
    tag: "latest"
    pullPolicy: IfNotPresent
    
  service:
    type: ClusterIP
    port: 8083
    targetPort: 8083
    
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
      
  podSecurityContext:
    fsGroup: 65534
    
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
      
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  podDisruptionBudget:
    enabled: false
    minAvailable: 1

# ==============================================================================
# Weaviate Vector Database
# ==============================================================================
# Vector database for semantic search and RAG functionality
# Stores and retrieves context for enhanced intent processing

weaviate:
  # Enable Weaviate deployment
  # Automatically enabled when rag.enabled is true
  enabled: false
  
  # Service configuration for Weaviate
  service:
    # HTTP API port for REST operations
    port: 8080
    
    # gRPC port for high-performance operations
    grpcPort: 50051
  
  podDisruptionBudget:
    enabled: false
    minAvailable: 1