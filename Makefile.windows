# Windows-optimized Makefile for Nephoran Intent Operator
# Ensures proper PATH setup and Windows-compatible commands

# Configuration
SHELL := cmd.exe
.SHELLFLAGS := /c

# Go configuration for Windows
GO_VERSION := 1.24.6
GOOS := linux
GOARCH := amd64
CGO_ENABLED := 0

# Windows-specific paths (use forward slashes for compatibility)
GOPATH := $(shell go env GOPATH)
GOBIN := $(GOPATH)/bin
BUILD_DIR := bin
DIST_DIR := dist

# Version information
VERSION ?= $(shell git describe --tags --always --dirty 2>nul || echo "dev")
COMMIT := $(shell git rev-parse HEAD 2>nul || echo "unknown")
BUILD_DATE := $(shell powershell -Command "Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ'")

# Build flags
LDFLAGS := -s -w -X main.version=$(VERSION) -X main.commit=$(COMMIT) -X main.buildDate=$(BUILD_DATE)
BUILD_FLAGS := -ldflags="$(LDFLAGS)" -tags="netgo,osusergo"

# Tool versions (from tools.go)
CONTROLLER_GEN_VERSION := v0.19.0
MOCKGEN_VERSION := v1.6.0

.PHONY: help
help: ## Display this help
	@echo Available targets:
	@echo   deps          - Download and verify dependencies
	@echo   tools         - Install build tools
	@echo   generate      - Generate code using tools
	@echo   test          - Run tests
	@echo   build         - Build binaries
	@echo   clean         - Clean build artifacts
	@echo   docker        - Build Docker image
	@echo   all           - Run full build pipeline
	@echo   verify-tools  - Verify all tools are installed

.PHONY: verify-go
verify-go: ## Verify Go installation
	@echo Checking Go installation...
	@go version || (echo Go is not installed & exit 1)
	@echo Go version check passed

.PHONY: setup-path
setup-path: ## Setup Windows PATH for Go tools
	@echo Setting up PATH for Go tools...
	@if not exist "$(GOBIN)" mkdir "$(GOBIN)" 2>nul || echo Go bin directory exists
	@set "PATH=$(GOBIN);%PATH%"
	@echo PATH setup complete

.PHONY: verify-tools
verify-tools: setup-path ## Verify all required tools are available
	@echo Verifying build tools...
	@where controller-gen >nul 2>nul || (echo controller-gen not found in PATH & exit 1)
	@where mockgen >nul 2>nul || (echo mockgen not found in PATH & exit 1)
	@echo All tools verified successfully

.PHONY: install-controller-gen
install-controller-gen: ## Install controller-gen tool
	@echo Installing controller-gen $(CONTROLLER_GEN_VERSION)...
	@go install sigs.k8s.io/controller-tools/cmd/controller-gen@$(CONTROLLER_GEN_VERSION)
	@echo controller-gen installed

.PHONY: install-mockgen
install-mockgen: ## Install mockgen tool
	@echo Installing mockgen $(MOCKGEN_VERSION)...
	@go install github.com/golang/mock/mockgen@$(MOCKGEN_VERSION)
	@echo mockgen installed

.PHONY: tools
tools: install-controller-gen install-mockgen ## Install all build tools
	@echo All build tools installed successfully

.PHONY: deps
deps: verify-go ## Download and verify dependencies
	@echo Downloading Go dependencies...
	@go mod download
	@go mod verify
	@echo Dependencies verified

.PHONY: generate
generate: verify-tools ## Generate code using installed tools
	@echo Generating CRDs and RBAC...
	@controller-gen crd paths="./api/..." output:crd:dir=config/crd/bases
	@controller-gen rbac:roleName=manager-role webhook paths="./..." output:rbac:dir=config/rbac
	@echo Code generation completed

.PHONY: test
test: deps ## Run tests
	@echo Running tests...
	@set CGO_ENABLED=0 && go test -v ./...
	@echo Tests completed

.PHONY: test-short
test-short: deps ## Run short tests only
	@echo Running short tests...
	@set CGO_ENABLED=0 && go test -short ./...

.PHONY: build-dir
build-dir: ## Create build directory
	@if not exist "$(BUILD_DIR)" mkdir "$(BUILD_DIR)"

.PHONY: build
build: deps build-dir ## Build the manager binary
	@echo Building manager binary...
	@set GOOS=$(GOOS) && set GOARCH=$(GOARCH) && set CGO_ENABLED=$(CGO_ENABLED) && ^
		go build $(BUILD_FLAGS) -o $(BUILD_DIR)/manager.exe cmd/manager/main.go
	@echo Binary built: $(BUILD_DIR)/manager.exe

.PHONY: build-debug
build-debug: deps build-dir ## Build debug binary with race detection
	@echo Building debug binary...
	@set CGO_ENABLED=1 && ^
		go build -race -gcflags="-N -l" -o $(BUILD_DIR)/manager-debug.exe cmd/manager/main.go
	@echo Debug binary built: $(BUILD_DIR)/manager-debug.exe

.PHONY: clean
clean: ## Clean build artifacts
	@echo Cleaning build artifacts...
	@if exist "$(BUILD_DIR)" rmdir /s /q "$(BUILD_DIR)"
	@if exist "$(DIST_DIR)" rmdir /s /q "$(DIST_DIR)"
	@echo Clean completed

.PHONY: docker
docker: ## Build Docker image
	@echo Building Docker image...
	@docker build -t nephoran-intent-operator:latest .
	@echo Docker image built

.PHONY: powershell-build
powershell-build: ## Use PowerShell build script
	@powershell -ExecutionPolicy Bypass -File "build.ps1" -Target build

.PHONY: all
all: clean tools deps generate test build ## Run full build pipeline
	@echo Full build pipeline completed successfully!