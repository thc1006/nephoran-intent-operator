name: Conductor Loop CI

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
      - integrate/mvp
      - 'feat/**'
      - 'fix/**'
      - 'chore/**'
      - 'refactor/**'
    paths:
      - 'cmd/conductor-loop/**'
      - 'internal/loop/**'
      - '.github/workflows/conductor-loop.yml'
      - 'Dockerfile.conductor-loop'
      - 'deployments/conductor-loop/**'
      - 'go.mod'
      - 'go.sum'
  pull_request:
    branches: [ main, integrate/mvp ]
    paths:
      - 'cmd/conductor-loop/**'
      - 'internal/loop/**'
      - '.github/workflows/conductor-loop.yml'
      - 'Dockerfile.conductor-loop'
      - 'deployments/conductor-loop/**'
      - 'go.mod'
      - 'go.sum'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.24.6'  # pin exact version

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Make results dir (*nix)
        if: runner.os != 'Windows'
        run: mkdir -p test-results

      - name: Make results dir (Windows via bash)
        if: runner.os == 'Windows'
        shell: bash
        run: mkdir -p test-results

      - name: Run unit tests (*nix)
        if: runner.os != 'Windows'
        run: |
          go test -v -race -timeout=5m -covermode=atomic -coverprofile="test-results/coverage.out" \
            ./cmd/conductor-loop ./internal/loop
          go tool cover -html="test-results/coverage.out" -o "test-results/coverage.html"

      - name: Run unit tests (Windows via bash)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          go test -v -race -timeout=5m -covermode=atomic -coverprofile="test-results/coverage.out" \
            ./cmd/conductor-loop ./internal/loop
          go tool cover -html="test-results/coverage.out" -o "test-results/coverage.html"

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: |
            test-results/coverage.out
            test-results/coverage.html

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Build binary
        run: |
          mkdir -p bin
          go build -v -o bin/conductor-loop ./cmd/conductor-loop
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: conductor-loop-bin
          path: bin/conductor-loop

  security:
    name: Security (non-blocking)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: go vet
        run: go vet ./...
      - name: govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          $(go env GOPATH)/bin/govulncheck ./... || true

  docker:
    name: Docker build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build image (no push)
        run: docker build -f Dockerfile.conductor-loop -t conductor-loop-ci:${{ github.sha }} .

  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [test, build, security, docker]
    if: ${{ always() }}
    steps:
      - name: Summarize results & gate
        shell: bash
        run: |
          printf "## Conductor Loop CI Results\n\n" >> "$GITHUB_STEP_SUMMARY"
          printf "| Job | Result |\n|---|---|\n" >> "$GITHUB_STEP_SUMMARY"
          printf "| Test | %s |\n"    "${{ needs.test.result }}"    >> "$GITHUB_STEP_SUMMARY"
          printf "| Build | %s |\n"   "${{ needs.build.result }}"   >> "$GITHUB_STEP_SUMMARY"
          printf "| Security | %s |\n" "${{ needs.security.result }}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Docker | %s |\n"  "${{ needs.docker.result }}"  >> "$GITHUB_STEP_SUMMARY"

          FAIL=0
          [[ "${{ needs.test.result }}"   == "success" ]] || FAIL=1
          [[ "${{ needs.build.result }}"  == "success" ]] || FAIL=1
          [[ "${{ needs.docker.result }}" == "success" ]] || FAIL=1

          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "⚠️ Security is non-blocking; please review logs." >> "$GITHUB_STEP_SUMMARY"
          fi

          exit $FAIL