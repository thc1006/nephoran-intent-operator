name: Conductor Loop CI

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
      - integrate/mvp
      - 'feat/**'
      - 'fix/**'
      - 'chore/**'
      - 'refactor/**'
    paths:
      - 'cmd/conductor-loop/**'
      - 'internal/loop/**'
      - '.github/workflows/conductor-loop.yml'
      - 'deployments/conductor-loop/**'
      - 'go.mod'
      - 'go.sum'
  pull_request:
    branches: [ main, integrate/mvp ]
    paths:
      - 'cmd/conductor-loop/**'
      - 'internal/loop/**'
      - '.github/workflows/conductor-loop.yml'
      - 'deployments/conductor-loop/**'
      - 'go.mod'
      - 'go.sum'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.24.6'  # pin exact version

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Make results dir (*nix)
        if: runner.os != 'Windows'
        run: mkdir -p test-results

      - name: Make results dir (Windows via bash)
        if: runner.os == 'Windows'
        shell: bash
        run: mkdir -p test-results

      - name: Run unit tests (*nix)
        if: runner.os != 'Windows'
        run: |
          go test -v -race -count=1 -timeout=8m -covermode=atomic -coverprofile="test-results/coverage.out" \
            ./cmd/conductor-loop ./internal/loop 2>&1 | tee test-results/test.log || true
          go tool cover -html="test-results/coverage.out" -o "test-results/coverage.html" || true
          # Capture exit code
          go test -v -race -count=1 -timeout=8m -covermode=atomic -coverprofile="test-results/coverage.out" \
            ./cmd/conductor-loop ./internal/loop

      - name: Run unit tests (Windows via bash)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          go test -v -race -count=1 -timeout=8m -covermode=atomic -coverprofile="test-results/coverage.out" \
            ./cmd/conductor-loop ./internal/loop 2>&1 | tee test-results/test.log || true
          go tool cover -html="test-results/coverage.out" -o "test-results/coverage.html" || true
          # Capture exit code
          go test -v -race -count=1 -timeout=8m -covermode=atomic -coverprofile="test-results/coverage.out" \
            ./cmd/conductor-loop ./internal/loop

      - name: Failing tests summary
        if: always()
        shell: bash
        run: |
          echo "## Test Results - ${{ matrix.os }}" >> "$GITHUB_STEP_SUMMARY"
          if [ -f test-results/test.log ]; then
            grep -E "--- FAIL:|race detected|panic|timeout" test-results/test.log >> "$GITHUB_STEP_SUMMARY" 2>/dev/null || echo "✅ No test failures detected" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "⚠️ No test log found" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: |
            test-results/coverage.out
            test-results/coverage.html
            test-results/test.log

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Build binary
        run: |
          mkdir -p bin
          go build -v -o bin/conductor-loop ./cmd/conductor-loop
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: conductor-loop-bin
          path: bin/conductor-loop

  security:
    name: Security (non-blocking)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: go vet (scoped)
        continue-on-error: true
        run: go vet ./cmd/conductor-loop ./internal/loop
      
      - name: Install security tools
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest
      
      - name: Run Gosec Security Scanner
        continue-on-error: true
        run: |
          $(go env GOPATH)/bin/gosec -fmt sarif -out gosec-results.sarif \
            ./cmd/conductor-loop ./internal/loop || true
          # Also generate text output for review
          $(go env GOPATH)/bin/gosec -fmt text \
            ./cmd/conductor-loop ./internal/loop 2>&1 | tee gosec-results.txt || true
      
      - name: Upload Gosec SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
        continue-on-error: true
      
      - name: Run Govulncheck
        continue-on-error: true
        run: |
          $(go env GOPATH)/bin/govulncheck \
            ./cmd/conductor-loop ./internal/loop 2>&1 | tee govulncheck-results.txt || true
      
      - name: Security Scan Summary
        if: always()
        run: |
          echo "## Security Scan Results - Conductor Loop" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          # Count Gosec findings
          if [ -f gosec-results.txt ]; then
            GOSEC_COUNT=$(grep -c "\[CWE-\|\[G[0-9]" gosec-results.txt 2>/dev/null || echo "0")
            echo "### Gosec Findings: $GOSEC_COUNT" >> "$GITHUB_STEP_SUMMARY"
            echo "See gosec-results.sarif for details" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "### Gosec: No results file found" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          # Check for govulncheck findings
          if [ -f govulncheck-results.txt ]; then
            if grep -q "No vulnerabilities found" govulncheck-results.txt 2>/dev/null; then
              echo "### Govulncheck: ✅ No vulnerabilities found" >> "$GITHUB_STEP_SUMMARY"
            else
              VULN_COUNT=$(grep -c "Vulnerability #" govulncheck-results.txt 2>/dev/null || echo "0")
              echo "### Govulncheck: ⚠️ $VULN_COUNT vulnerabilities found" >> "$GITHUB_STEP_SUMMARY"
              echo "See govulncheck-results.txt for details" >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "### Govulncheck: No results file found" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "ℹ️ Security scans are non-blocking and informational only" >> "$GITHUB_STEP_SUMMARY"
      
      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-results
          path: |
            gosec-results.*
            govulncheck-results.txt

  docker:
    name: Docker build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build image (no push)
        run: docker build -f cmd/conductor-loop/Dockerfile -t conductor-loop-ci:${{ github.sha }} .

  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [test, build, security, docker]
    if: ${{ always() }}
    steps:
      - name: Summarize results & gate
        shell: bash
        run: |
          printf "## Conductor Loop CI Results\n\n" >> "$GITHUB_STEP_SUMMARY"
          printf "| Job | Result |\n|---|---|\n" >> "$GITHUB_STEP_SUMMARY"
          printf "| Test | %s |\n"    "${{ needs.test.result }}"    >> "$GITHUB_STEP_SUMMARY"
          printf "| Build | %s |\n"   "${{ needs.build.result }}"   >> "$GITHUB_STEP_SUMMARY"
          printf "| Security | %s |\n" "${{ needs.security.result }}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Docker | %s |\n"  "${{ needs.docker.result }}"  >> "$GITHUB_STEP_SUMMARY"

          FAIL=0
          [[ "${{ needs.test.result }}"   == "success" ]] || FAIL=1
          [[ "${{ needs.build.result }}"  == "success" ]] || FAIL=1
          [[ "${{ needs.docker.result }}" == "success" ]] || FAIL=1

          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "⚠️ Security is non-blocking; please review logs." >> "$GITHUB_STEP_SUMMARY"
          fi

          exit $FAIL