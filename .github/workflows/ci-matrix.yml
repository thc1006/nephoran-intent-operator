name: CI Matrix Build

on:
  push:
    branches: [ main, develop, 'feat/**', 'fix/**', 'integrate/**' ]
  pull_request:
    branches: [ main, develop, 'integrate/**' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REGISTRY_BASE: ghcr.io/${{ github.repository_owner }}
  PLATFORMS: linux/amd64,linux/arm64
  GO_VERSION: "1.24"

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint and Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=10m

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: ./...

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  build-matrix:
    name: Build Service - ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: [lint, test]
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        service:
          - conductor-loop
          - intent-ingest
          - nephio-bridge
          - llm-processor
          - oran-adaptor
        include:
          # High priority services
          - service: conductor-loop
            priority: high
            platforms: linux/amd64,linux/arm64
          - service: nephio-bridge
            priority: high
            platforms: linux/amd64,linux/arm64
          # Medium priority services
          - service: llm-processor
            priority: medium
            platforms: linux/amd64
          - service: intent-ingest
            priority: medium
            platforms: linux/amd64,linux/arm64
          # Low priority services
          - service: oran-adaptor
            priority: low
            platforms: linux/amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platforms }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_BASE }}/nephoran-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ matrix.service }}-latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ matrix.service }}
            type=gha,scope=shared
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.service }}
            type=gha,mode=max,scope=shared
          build-args: |
            SERVICE=${{ matrix.service }}
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
          sbom: true
          provenance: mode=max

      - name: Verify image
        if: github.event_name != 'pull_request'
        run: |
          echo "🎯 Successfully built ${{ matrix.service }} image"
          echo "📦 Image digest: ${{ steps.build.outputs.digest }}"
          echo "🏷️ Image tags: ${{ steps.meta.outputs.tags }}"
          
          # Verify the image exists and can be pulled
          docker pull ${{ env.REGISTRY_BASE }}/nephoran-${{ matrix.service }}:${{ github.sha }}
          
          # Quick smoke test
          docker run --rm ${{ env.REGISTRY_BASE }}/nephoran-${{ matrix.service }}:${{ github.sha }} --version || true

      - name: Generate build summary
        run: |
          echo "## ${{ matrix.service }} Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "**Priority:** ${{ matrix.priority }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** ${{ matrix.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tags" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  build-additional-services:
    name: Build Additional Services
    runs-on: ubuntu-latest
    needs: [lint, test]
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          # Build manager and controller (aliases for conductor-loop)
          - service: manager
            base_service: conductor-loop
          - service: controller
            base_service: conductor-loop

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_BASE }}/nephoran-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.base_service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          build-args: |
            SERVICE=${{ matrix.service }}
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

  all-builds-complete:
    name: All Builds Complete
    runs-on: ubuntu-latest
    needs: [build-matrix, build-additional-services]
    if: always()
    steps:
      - name: Check build status
        run: |
          if [[ "${{ needs.build-matrix.result }}" == "success" ]] && [[ "${{ needs.build-additional-services.result }}" == "success" ]]; then
            echo "✅ All service builds completed successfully!"
            exit 0
          else
            echo "❌ Some builds failed. Check the logs above."
            exit 1
          fi

      - name: Generate final summary
        run: |
          echo "# 🚀 CI Matrix Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- Lint & Security: ${{ needs.lint.result }} ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test.result }} ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Service Builds: ${{ needs.build-matrix.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Additional Services: ${{ needs.build-additional-services.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Services Built" >> $GITHUB_STEP_SUMMARY
          echo "- conductor-loop ✅" >> $GITHUB_STEP_SUMMARY
          echo "- intent-ingest ✅" >> $GITHUB_STEP_SUMMARY
          echo "- nephio-bridge ✅" >> $GITHUB_STEP_SUMMARY
          echo "- llm-processor ✅" >> $GITHUB_STEP_SUMMARY
          echo "- oran-adaptor ✅" >> $GITHUB_STEP_SUMMARY
          echo "- manager (alias) ✅" >> $GITHUB_STEP_SUMMARY
          echo "- controller (alias) ✅" >> $GITHUB_STEP_SUMMARY