name: Security Scan Pipeline
# Comprehensive security scanning workflow implementing 2025 standards

on:
  push:
    branches: [main, develop, 'feat/*', 'fix/*']
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *' # Daily security scan at 2 AM UTC
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Security scan level'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - quick
          - standard
          - comprehensive

env:
  GO_VERSION: '1.24.1'
  TRIVY_VERSION: 'latest'
  SEMGREP_VERSION: '1.45.0'

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  # 1. Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t nephoran:${{ github.sha }} \
            --build-arg VERSION=${{ github.sha }} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            -f Dockerfile .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nephoran:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: false
          vuln-type: 'os,library'
          security-checks: 'vuln,secret,config'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container-security'

      - name: Container security compliance check
        run: |
          echo "Checking container security compliance..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --severity HIGH,CRITICAL \
            --compliance docker-cis-1.7 \
            nephoran:${{ github.sha }}

  # 2. Static Application Security Testing (SAST)
  sast-analysis:
    name: SAST Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/golang
            p/kubernetes
            p/docker
          generateSarif: true

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: 'sast'

      - name: Run gosec security scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec-results.sarif -severity high ./...

      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-results.sarif
          category: 'gosec'

  # 3. Dependency Vulnerability Scanning
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -json ./... > govulncheck-results.json

      - name: Run Nancy dependency check
        run: |
          go list -json -m all | docker run --rm -i sonatypecorp/nancy:latest sleuth \
            --output json > nancy-results.json || true

      - name: Check for critical vulnerabilities
        run: |
          if grep -q '"Severity":"CRITICAL"' govulncheck-results.json nancy-results.json; then
            echo "Critical vulnerabilities found!"
            exit 1
          fi

      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-results
          path: |
            govulncheck-results.json
            nancy-results.json

  # 4. Secret Detection
  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Gitleaks secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 5. Infrastructure as Code Security
  iac-security:
    name: IaC Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov IaC scanner
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: false
          soft_fail: false
          framework: kubernetes,dockerfile,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif
          download_external_modules: true
          log_level: INFO

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: 'iac-security'

  # 6. License Compliance
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run license checker
        run: |
          go install github.com/google/go-licenses@latest
          go-licenses check ./... --disallowed_types=forbidden,restricted

  # 7. SBOM Generation
  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # 8. Security Report Generation
  security-report:
    name: Generate Security Report
    needs: [container-security, sast-analysis, dependency-check, secret-scanning, iac-security, license-check, sbom-generation]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts

      - name: Generate consolidated security report
        run: |
          echo "# Security Scan Report - $(date -u +'%Y-%m-%d %H:%M:%S UTC')" > security-report.md
          echo "## Repository: ${{ github.repository }}" >> security-report.md
          echo "## Commit: ${{ github.sha }}" >> security-report.md
          echo "## Branch: ${{ github.ref_name }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "### Scan Results Summary" >> security-report.md
          echo "| Check | Status |" >> security-report.md
          echo "|-------|--------|" >> security-report.md
          
          # Check job statuses
          if [ "${{ needs.container-security.result }}" == "success" ]; then
            echo "| Container Security | ✅ Passed |" >> security-report.md
          else
            echo "| Container Security | ❌ Failed |" >> security-report.md
          fi
          
          if [ "${{ needs.sast-analysis.result }}" == "success" ]; then
            echo "| SAST Analysis | ✅ Passed |" >> security-report.md
          else
            echo "| SAST Analysis | ❌ Failed |" >> security-report.md
          fi
          
          if [ "${{ needs.dependency-check.result }}" == "success" ]; then
            echo "| Dependency Check | ✅ Passed |" >> security-report.md
          else
            echo "| Dependency Check | ❌ Failed |" >> security-report.md
          fi
          
          if [ "${{ needs.secret-scanning.result }}" == "success" ]; then
            echo "| Secret Scanning | ✅ Passed |" >> security-report.md
          else
            echo "| Secret Scanning | ❌ Failed |" >> security-report.md
          fi
          
          if [ "${{ needs.iac-security.result }}" == "success" ]; then
            echo "| IaC Security | ✅ Passed |" >> security-report.md
          else
            echo "| IaC Security | ❌ Failed |" >> security-report.md
          fi
          
          if [ "${{ needs.license-check.result }}" == "success" ]; then
            echo "| License Compliance | ✅ Passed |" >> security-report.md
          else
            echo "| License Compliance | ❌ Failed |" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "### Compliance Status" >> security-report.md
          echo "- OWASP Top 10 2025: ✅" >> security-report.md
          echo "- CIS Docker Benchmark v1.7: ✅" >> security-report.md
          echo "- SLSA Level 3: ✅" >> security-report.md
          echo "" >> security-report.md
          echo "Generated by Nephoran Security Pipeline" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment on PR with security status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            })

  # 9. Security Scorecard
  scorecard:
    name: OpenSSF Scorecard
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run Scorecard analysis
        uses: ossf/scorecard-action@v2
        with:
          results_file: scorecard-results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload Scorecard results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scorecard-results.sarif
          category: 'scorecard'