# =============================================================================
# Security Scanning Pipeline - 2025 Edition
# =============================================================================
# Comprehensive security analysis for Nephoran Intent Operator
# Implements defense-in-depth with multiple scanning tools
# =============================================================================

name: Security Scan

on:
  push:
    branches: [ main, integrate/mvp ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/security-scan.yml'
  pull_request:
    branches: [ main, integrate/mvp ]
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_depth:
        description: 'Scan depth level'
        type: choice
        options:
          - quick
          - standard
          - comprehensive
        default: 'standard'

concurrency:
  group: security-scan-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GO_VERSION: "1.25.0"
  GOPROXY: "https://proxy.golang.org,direct"
  GOSUMDB: "sum.golang.org"
  CGO_ENABLED: "0"
  SCAN_DEPTH: ${{ github.event.inputs.scan_depth || 'standard' }}

jobs:
  # =============================================================================
  # GOSEC: Go Security Checker - AST and SSA analysis
  # =============================================================================
  gosec-scan:
    name: Gosec Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.1
        with:
          fetch-depth: 0

      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          # Include all Go files, output in SARIF format for GitHub integration
          args: '-fmt sarif -out gosec-results.sarif -severity medium ./...'

      - name: Upload gosec SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
          category: gosec

      - name: Generate gosec text report
        if: always()
        run: |
          # Install gosec locally for additional reporting
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          
          # Generate detailed text report
          gosec -fmt text -severity low ./... > gosec-detailed.txt 2>&1 || true
          
          # Generate JSON report for processing
          gosec -fmt json -out gosec-results.json ./... || true
          
          # Summary for PR comments
          echo "# Gosec Security Scan Results" > gosec-summary.md
          echo "" >> gosec-summary.md
          
          if [ -f gosec-results.json ]; then
            ISSUES=$(jq '.Issues | length' gosec-results.json)
            echo "- Total issues found: $ISSUES" >> gosec-summary.md
            
            # Group by severity
            echo "" >> gosec-summary.md
            echo "## Issues by Severity" >> gosec-summary.md
            jq -r '.Issues | group_by(.severity) | .[] | "- \(.[0].severity): \(length)"' gosec-results.json >> gosec-summary.md || true
            
            # Group by CWE
            echo "" >> gosec-summary.md
            echo "## Issues by CWE" >> gosec-summary.md
            jq -r '.Issues | group_by(.cwe.id) | .[] | "- CWE-\(.[0].cwe.id): \(length) issues"' gosec-results.json >> gosec-summary.md || true
          fi

      - name: Upload gosec artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gosec-reports
          path: |
            gosec-results.sarif
            gosec-results.json
            gosec-detailed.txt
            gosec-summary.md
          retention-days: 30

  # =============================================================================
  # VULNERABILITY SCAN: Check for known vulnerabilities
  # =============================================================================
  vulnerability-scan:
    name: Vulnerability Assessment
    runs-on: ubuntu-latest
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
        scan-type: [critical, standard, comprehensive]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.1

      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Cache govulncheck database
        uses: actions/cache@v4
        with:
          path: ~/.cache/govulncheck
          key: govulncheck-db-${{ runner.os }}-${{ hashFiles('go.sum') }}
          restore-keys: |
            govulncheck-db-${{ runner.os }}-

      - name: Install govulncheck with timeout handling
        run: |
          echo "Installing govulncheck with timeout handling..."
          timeout 300s go install golang.org/x/vuln/cmd/govulncheck@latest || {
            echo "⚠️ Installation timeout - using cached version if available"
            if ! command -v govulncheck &> /dev/null; then
              echo "❌ govulncheck not available, skipping scan"
              exit 0
            fi
          }

      - name: Run govulncheck with optimized scanning strategy
        timeout-minutes: 40
        run: |
          set -euo pipefail
          
          echo "🔍 Running vulnerability scan (scan-type: ${{ matrix.scan-type }})"
          
          # Create output directory
          mkdir -p scan-results
          
          # Define scan targets based on scan type
          case "${{ matrix.scan-type }}" in
            critical)
              SCAN_TARGETS="./cmd/... ./api/... ./controllers/..."
              SCAN_MODE="source"
              TIMEOUT_DURATION="10m"
              ;;
            standard)
              SCAN_TARGETS="./pkg/... ./internal/..."
              SCAN_MODE="source"
              TIMEOUT_DURATION="15m"
              ;;
            comprehensive)
              SCAN_TARGETS="./..."
              SCAN_MODE="source"
              TIMEOUT_DURATION="35m"
              ;;
          esac
          
          echo "📋 Scan targets: $SCAN_TARGETS"
          echo "⏱️ Timeout: $TIMEOUT_DURATION"
          
          # Run govulncheck with timeout and proper error handling
          run_scan() {
            local target="$1"
            local output_file="$2"
            local format="$3"
            
            echo "🔍 Scanning $target (format: $format)..."
            
            timeout "$TIMEOUT_DURATION" govulncheck \
              -$format \
              -C "$(pwd)" \
              "$target" > "$output_file" 2>&1 || {
              local exit_code=$?
              echo "⚠️ Scan completed with exit code: $exit_code"
              
              case $exit_code in
                124) # timeout
                  echo "❌ Scan timed out for $target" >> "$output_file"
                  echo "scan_timeout" > "scan-results/status-$(basename "$output_file" .txt)"
                  ;;
                1) # vulnerabilities found
                  echo "⚠️ Vulnerabilities detected in $target" >> "$output_file"
                  echo "vulnerabilities_found" > "scan-results/status-$(basename "$output_file" .txt)"
                  ;;
                *) # other errors
                  echo "❌ Scan failed with error code $exit_code" >> "$output_file"
                  echo "scan_error" > "scan-results/status-$(basename "$output_file" .txt)"
                  ;;
              esac
              
              # Don't fail the job for scan issues
              return 0
            }
            
            echo "✅ Scan completed successfully for $target"
            echo "success" > "scan-results/status-$(basename "$output_file" .txt)"
          }
          
          # Run JSON scan for machine parsing
          run_scan "$SCAN_TARGETS" "scan-results/vulncheck-${{ matrix.scan-type }}.json" "json"
          
          # Run text scan for human readability (only for critical and standard)
          if [[ "${{ matrix.scan-type }}" != "comprehensive" ]]; then
            run_scan "$SCAN_TARGETS" "scan-results/vulncheck-${{ matrix.scan-type }}.txt" "text"
          fi

      - name: Generate scan summary
        if: always()
        run: |
          echo "# Vulnerability Scan Results (${{ matrix.scan-type }})" > vulncheck-summary-${{ matrix.scan-type }}.md
          echo "" >> vulncheck-summary-${{ matrix.scan-type }}.md
          echo "**Scan Type:** ${{ matrix.scan-type }}" >> vulncheck-summary-${{ matrix.scan-type }}.md
          echo "**Date:** $(date -u +"%Y-%m-%d %H:%M UTC")" >> vulncheck-summary-${{ matrix.scan-type }}.md
          echo "" >> vulncheck-summary-${{ matrix.scan-type }}.md
          
          # Check scan status
          for status_file in scan-results/status-*; do
            if [[ -f "$status_file" ]]; then
              scan_name=$(basename "$status_file" | sed 's/status-//')
              status=$(cat "$status_file")
              
              case "$status" in
                success)
                  echo "✅ $scan_name: Scan completed successfully" >> vulncheck-summary-${{ matrix.scan-type }}.md
                  ;;
                vulnerabilities_found)
                  echo "⚠️ $scan_name: Vulnerabilities detected" >> vulncheck-summary-${{ matrix.scan-type }}.md
                  ;;
                scan_timeout)
                  echo "⏱️ $scan_name: Scan timed out (large codebase)" >> vulncheck-summary-${{ matrix.scan-type }}.md
                  ;;
                scan_error)
                  echo "❌ $scan_name: Scan encountered errors" >> vulncheck-summary-${{ matrix.scan-type }}.md
                  ;;
              esac
            fi
          done
          
          echo "" >> vulncheck-summary-${{ matrix.scan-type }}.md
          
          # Parse JSON results if available
          json_file="scan-results/vulncheck-${{ matrix.scan-type }}.json"
          if [[ -f "$json_file" && -s "$json_file" ]]; then
            echo "## Detailed Results" >> vulncheck-summary-${{ matrix.scan-type }}.md
            
            # Count vulnerabilities (basic JSON parsing)
            if command -v jq &> /dev/null; then
              vuln_count=$(jq -r '.Vulns // [] | length' "$json_file" 2>/dev/null || echo "0")
              echo "- Vulnerabilities found: $vuln_count" >> vulncheck-summary-${{ matrix.scan-type }}.md
              
              if [[ "$vuln_count" -gt 0 ]]; then
                echo "- See detailed JSON report in artifacts" >> vulncheck-summary-${{ matrix.scan-type }}.md
              fi
            else
              echo "- Detailed analysis available in JSON artifacts" >> vulncheck-summary-${{ matrix.scan-type }}.md
            fi
          else
            echo "## Status" >> vulncheck-summary-${{ matrix.scan-type }}.md
            echo "Scan results not available or empty. Check scan logs above." >> vulncheck-summary-${{ matrix.scan-type }}.md
          fi
          
          echo "" >> vulncheck-summary-${{ matrix.scan-type }}.md
          echo "## Next Steps" >> vulncheck-summary-${{ matrix.scan-type }}.md
          echo "1. Review detailed results in workflow artifacts" >> vulncheck-summary-${{ matrix.scan-type }}.md
          echo "2. Update vulnerable dependencies using \`go get -u\`" >> vulncheck-summary-${{ matrix.scan-type }}.md
          echo "3. Check for alternative packages if updates aren't available" >> vulncheck-summary-${{ matrix.scan-type }}.md
          
          # Add to GitHub step summary
          echo "## Vulnerability Scan (${{ matrix.scan-type }})" >> $GITHUB_STEP_SUMMARY
          cat vulncheck-summary-${{ matrix.scan-type }}.md >> $GITHUB_STEP_SUMMARY

      - name: Nancy dependency scan (optimized)
        timeout-minutes: 8
        continue-on-error: true
        run: |
          echo "Installing nancy with timeout..."
          timeout 180s go install github.com/sonatype-nexus-community/nancy@latest || {
            echo "⚠️ Nancy installation timeout - skipping dependency scan"
            echo "nancy_install_timeout" > scan-results/nancy-status.txt
            exit 0
          }
          
          echo "Running optimized dependency vulnerability scan..."
          
          # Use go.mod directly instead of full dependency tree for faster scanning
          if timeout 300s go list -json -m all | nancy sleuth > nancy-results-${{ matrix.scan-type }}.txt 2>&1; then
            echo "nancy_success" > scan-results/nancy-status.txt
            echo "✅ Nancy dependency scan completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "nancy_timeout_or_error" > scan-results/nancy-status.txt
            echo "⚠️ Nancy scan encountered issues (timeout or vulnerabilities)" >> nancy-results-${{ matrix.scan-type }}.txt
          fi
          
          # Check for vulnerabilities without failing the job
          if [[ -f nancy-results-${{ matrix.scan-type }}.txt ]] && grep -q "Vulnerable Packages Found" nancy-results-${{ matrix.scan-type }}.txt; then
            echo "⚠️ Vulnerable dependencies detected in ${{ matrix.scan-type }} scan!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details><summary>Click to view vulnerable packages</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            grep -A 50 "Vulnerable Packages Found" nancy-results-${{ matrix.scan-type }}.txt | head -n 100 >> $GITHUB_STEP_SUMMARY || true
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No vulnerable dependencies found in ${{ matrix.scan-type }} scan" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload vulnerability reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports-${{ matrix.scan-type }}
          path: |
            scan-results/
            vulncheck-summary-${{ matrix.scan-type }}.md
            nancy-results-${{ matrix.scan-type }}.txt
          retention-days: 30
          compression-level: 6

  # =============================================================================
  # LICENSE COMPLIANCE: Ensure license compatibility
  # =============================================================================
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 8
    if: github.event.inputs.scan_depth == 'comprehensive' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.1

      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Check licenses
        run: |
          echo "Installing go-licenses..."
          go install github.com/google/go-licenses@latest
          
          echo "Checking license compliance..."
          go-licenses report ./... > license-report.csv 2>&1 || true
          
          # Check for problematic licenses
          go-licenses check ./... > license-check.txt 2>&1 || {
            echo "⚠️ License compliance issues detected"
            cat license-check.txt
          }
          
          echo "# License Compliance Report" > license-summary.md
          echo "" >> license-summary.md
          echo "License report generated. Check artifacts for details." >> license-summary.md

      - name: Upload license reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            license-report.csv
            license-check.txt
            license-summary.md
          retention-days: 30

  # =============================================================================
  # OWASP CHECKS: Additional OWASP-specific security checks
  # =============================================================================
  owasp-checks:
    name: OWASP Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 12
    if: github.event.inputs.scan_depth != 'quick'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.1

      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: OWASP dependency check
        run: |
          echo "# OWASP Security Check Results" > owasp-summary.md
          echo "" >> owasp-summary.md
          
          # Check for common OWASP Top 10 patterns in Go code
          echo "## Checking for OWASP Top 10 patterns..." >> owasp-summary.md
          
          # A1: Injection checks
          echo "### A1 - Injection Vulnerabilities" >> owasp-summary.md
          if grep -r "fmt.Sprintf.*SELECT\|UPDATE\|DELETE\|INSERT" --include="*.go" .; then
            echo "⚠️ Potential SQL injection patterns found" >> owasp-summary.md
          else
            echo "✅ No obvious SQL injection patterns" >> owasp-summary.md
          fi
          
          # A2: Broken Authentication
          echo "### A2 - Authentication Issues" >> owasp-summary.md
          if grep -r "password.*=.*\"" --include="*.go" .; then
            echo "⚠️ Hardcoded passwords detected" >> owasp-summary.md
          else
            echo "✅ No hardcoded passwords found" >> owasp-summary.md
          fi
          
          # A3: Sensitive Data Exposure
          echo "### A3 - Sensitive Data Exposure" >> owasp-summary.md
          if grep -r "http://" --include="*.go" . | grep -v "http://localhost" | grep -v "test"; then
            echo "⚠️ Unencrypted HTTP connections found" >> owasp-summary.md
          else
            echo "✅ No unencrypted external connections" >> owasp-summary.md
          fi
          
          # A5: Security Misconfiguration
          echo "### A5 - Security Misconfiguration" >> owasp-summary.md
          if grep -r "InsecureSkipVerify.*true" --include="*.go" .; then
            echo "⚠️ TLS verification disabled" >> owasp-summary.md
          else
            echo "✅ TLS verification properly configured" >> owasp-summary.md
          fi

      - name: Upload OWASP reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-reports
          path: |
            owasp-summary.md
          retention-days: 30

  # =============================================================================
  # SECURITY SUMMARY: Aggregate results and create report
  # =============================================================================
  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [gosec-scan, vulnerability-scan, license-compliance, owasp-checks]
    if: always()
    timeout-minutes: 8

    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts

      - name: Generate comprehensive security report
        run: |
          echo "# 🔒 Nephoran Security Scan - Comprehensive Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u +"%Y-%m-%d %H:%M UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Depth:** ${{ env.SCAN_DEPTH }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 Scan Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Scanner | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Gosec | ${{ needs.gosec-scan.result }} | AST/SSA security analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Vulnerability Scan (Matrix) | ${{ needs.vulnerability-scan.result }} | Multi-tier CVE detection |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-compliance.result }} | License compatibility check |" >> $GITHUB_STEP_SUMMARY
          echo "| OWASP Checks | ${{ needs.owasp-checks.result }} | OWASP Top 10 patterns |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔍 Vulnerability Scan Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The vulnerability scan now runs in three tiers:" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical**: Core components (cmd, api, controllers) - 10min timeout" >> $GITHUB_STEP_SUMMARY
          echo "- **Standard**: Internal packages (pkg, internal) - 15min timeout" >> $GITHUB_STEP_SUMMARY  
          echo "- **Comprehensive**: Full codebase scan - 35min timeout" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add key findings if available
          if [ -d "security-artifacts" ]; then
            echo "## 🔍 Key Findings" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Check for gosec summary
            if [ -f "security-artifacts/gosec-reports/gosec-summary.md" ]; then
              echo "### Gosec Analysis" >> $GITHUB_STEP_SUMMARY
              tail -n 20 "security-artifacts/gosec-reports/gosec-summary.md" >> $GITHUB_STEP_SUMMARY || true
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Check for vulnerability summaries from matrix jobs
            echo "### Vulnerability Assessment Results" >> $GITHUB_STEP_SUMMARY
            for scan_type in critical standard comprehensive; do
              summary_file="security-artifacts/vulnerability-reports-${scan_type}/vulncheck-summary-${scan_type}.md"
              if [ -f "$summary_file" ]; then
                echo "#### ${scan_type^} Scan Results" >> $GITHUB_STEP_SUMMARY
                cat "$summary_file" >> $GITHUB_STEP_SUMMARY || true
                echo "" >> $GITHUB_STEP_SUMMARY
              else
                echo "#### ${scan_type^} Scan" >> $GITHUB_STEP_SUMMARY
                echo "Results not available (may have timed out or failed)" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            # Aggregate scan status summary
            echo "### Scan Status Summary" >> $GITHUB_STEP_SUMMARY
            echo "| Scan Type | Status | Notes |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
            
            for scan_type in critical standard comprehensive; do
              status_dir="security-artifacts/vulnerability-reports-${scan_type}/scan-results"
              if [ -d "$status_dir" ]; then
                # Check for status files
                success_count=0
                timeout_count=0
                error_count=0
                vuln_count=0
                
                for status_file in "$status_dir"/status-*; do
                  if [ -f "$status_file" ]; then
                    status=$(cat "$status_file")
                    case "$status" in
                      success) ((success_count++)) ;;
                      scan_timeout) ((timeout_count++)) ;;
                      scan_error) ((error_count++)) ;;
                      vulnerabilities_found) ((vuln_count++)) ;;
                    esac
                  fi
                done
                
                status_summary=""
                [ $success_count -gt 0 ] && status_summary="${status_summary}✅${success_count} "
                [ $vuln_count -gt 0 ] && status_summary="${status_summary}⚠️${vuln_count} "
                [ $timeout_count -gt 0 ] && status_summary="${status_summary}⏱️${timeout_count} "
                [ $error_count -gt 0 ] && status_summary="${status_summary}❌${error_count} "
                
                [ -z "$status_summary" ] && status_summary="No data"
                
                echo "| ${scan_type^} | $status_summary | Scanned core components |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| ${scan_type^} | ❌ Failed | Job may have failed to start |" >> $GITHUB_STEP_SUMMARY
              fi
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "## 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Review detailed reports in the workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Address any critical or high severity findings" >> $GITHUB_STEP_SUMMARY
          echo "3. Update dependencies with known vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "4. Implement recommended security headers and configurations" >> $GITHUB_STEP_SUMMARY

      - name: Create consolidated security report
        if: always()
        run: |
          # Create a consolidated report file
          echo "# Nephoran Security Scan Report" > consolidated-security-report.md
          echo "Generated: $(date -u +"%Y-%m-%d %H:%M UTC")" >> consolidated-security-report.md
          echo "Branch: ${{ github.ref_name }}" >> consolidated-security-report.md
          echo "Commit: ${{ github.sha }}" >> consolidated-security-report.md
          echo "" >> consolidated-security-report.md
          
          # Add scan configuration
          echo "## Scan Configuration" >> consolidated-security-report.md
          echo "- **Timeout per scan type**: 45 minutes maximum" >> consolidated-security-report.md
          echo "- **Matrix strategy**: critical, standard, comprehensive" >> consolidated-security-report.md
          echo "- **Fail-safe enabled**: Jobs continue on timeout/error" >> consolidated-security-report.md
          echo "" >> consolidated-security-report.md
          
          # Add all summaries with better organization
          echo "## Reports by Scanner Type" >> consolidated-security-report.md
          echo "" >> consolidated-security-report.md
          
          # Gosec reports
          if [ -d "security-artifacts/gosec-reports" ]; then
            echo "### Gosec Static Analysis" >> consolidated-security-report.md
            for summary in security-artifacts/gosec-reports/*.md; do
              if [ -f "$summary" ]; then
                echo "---" >> consolidated-security-report.md
                cat "$summary" >> consolidated-security-report.md
                echo "" >> consolidated-security-report.md
              fi
            done
          fi
          
          # Vulnerability scan reports
          echo "### Vulnerability Assessment" >> consolidated-security-report.md
          for scan_type in critical standard comprehensive; do
            vuln_dir="security-artifacts/vulnerability-reports-${scan_type}"
            if [ -d "$vuln_dir" ]; then
              echo "#### ${scan_type^} Vulnerability Scan" >> consolidated-security-report.md
              for summary in "$vuln_dir"/*.md; do
                if [ -f "$summary" ]; then
                  echo "---" >> consolidated-security-report.md
                  cat "$summary" >> consolidated-security-report.md
                  echo "" >> consolidated-security-report.md
                fi
              done
            fi
          done
          
          # License and OWASP reports
          for report_type in license owasp; do
            if [ -d "security-artifacts/${report_type}-reports" ]; then
              echo "### ${report_type^} Reports" >> consolidated-security-report.md
              for summary in security-artifacts/${report_type}-reports/*.md; do
                if [ -f "$summary" ]; then
                  echo "---" >> consolidated-security-report.md
                  cat "$summary" >> consolidated-security-report.md
                  echo "" >> consolidated-security-report.md
                fi
              done
            fi
          done
          
          # Add metadata
          echo "---" >> consolidated-security-report.md
          echo "## Scan Metadata" >> consolidated-security-report.md
          echo "- Report generated at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> consolidated-security-report.md
          echo "- GitHub Actions Run: ${{ github.run_id }}" >> consolidated-security-report.md
          echo "- Workflow: ${{ github.workflow }}" >> consolidated-security-report.md

      - name: Upload consolidated report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report-consolidated
          path: consolidated-security-report.md
          retention-days: 30