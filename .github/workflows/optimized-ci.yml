name: Optimized CI Pipeline

# Performance-optimized CI pipeline with:
# - Intelligent job orchestration and parallelization
# - Unified caching strategy across all jobs
# - Smart conditional execution based on changes
# - Consolidated dependency management
# - Optimized artifact sharing

on:
  workflow_dispatch: {}
  push:
    branches: [ main, integrate/mvp, "feat/**", "chore/**" ]
  pull_request:
    branches: [ main, integrate/mvp ]

# Global concurrency with branch-level isolation
concurrency:
  group: optimized-ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  packages: write

env:
  GO_VERSION: '1.24.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: nephoran-intent-operator
  # Unified cache keys for better cache utilization
  GO_CACHE_KEY_PREFIX: go-${{ vars.GO_VERSION || '1.24.1' }}-${{ hashFiles('**/go.sum') }}
  NODE_CACHE_KEY_PREFIX: node-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
  DOCKER_CACHE_KEY_PREFIX: docker-${{ github.ref_name }}

jobs:
  # =============================================================================
  # Smart Change Detection & Setup (Foundation Job)
  # =============================================================================
  setup:
    name: Setup & Change Detection
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      # Change detection outputs
      go-code-changed: ${{ steps.changes.outputs.go-code }}
      containers-changed: ${{ steps.changes.outputs.containers }}
      security-changed: ${{ steps.changes.outputs.security }}
      docs-changed: ${{ steps.changes.outputs.docs }}
      ci-changed: ${{ steps.changes.outputs.ci }}
      # Cache keys for downstream jobs
      go-cache-key: ${{ steps.cache-keys.outputs.go-cache-key }}
      docker-cache-key: ${{ steps.cache-keys.outputs.docker-cache-key }}
      # Matrix configurations
      test-matrix: ${{ steps.test-matrix.outputs.matrix }}
      security-matrix: ${{ steps.security-matrix.outputs.matrix }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Only need last 2 commits for change detection
      
      - name: Smart Change Detection
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            go-code:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - 'cmd/**'
              - 'controllers/**'
              - 'pkg/**'
              - 'api/**'
              - 'internal/**'
            containers:
              - 'Dockerfile*'
              - 'deployments/**'
              - 'manifests/**'
            security:
              - 'security/**'
              - '.github/workflows/*security*'
              - 'go.mod'  # Security scans on dependency changes
            docs:
              - '**/*.md'
              - 'docs/**'
            ci:
              - '.github/workflows/**'
              - 'Makefile'
      
      - name: Generate Optimized Cache Keys
        id: cache-keys
        run: |
          echo "go-cache-key=${{ env.GO_CACHE_KEY_PREFIX }}-${{ runner.os }}" >> $GITHUB_OUTPUT
          echo "docker-cache-key=${{ env.DOCKER_CACHE_KEY_PREFIX }}-${{ github.sha }}" >> $GITHUB_OUTPUT
      
      - name: Generate Dynamic Test Matrix
        id: test-matrix
        run: |
          # Generate matrix based on changes and performance requirements
          if [[ "${{ steps.changes.outputs.go-code }}" == "true" ]]; then
            # Full matrix for Go changes
            matrix='{"os":["ubuntu-latest"],"go-version":["1.24.1"],"include":[{"os":"windows-latest","go-version":"1.24.1","experimental":true}]}'
          else
            # Minimal matrix for non-code changes
            matrix='{"os":["ubuntu-latest"],"go-version":["1.24.1"]}'
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
      
      - name: Generate Security Scan Matrix
        id: security-matrix
        run: |
          if [[ "${{ steps.changes.outputs.security }}" == "true" || "${{ github.event_name }}" == "schedule" ]]; then
            matrix='{"scan":["gosec","govulncheck","trivy","semgrep"]}'
          elif [[ "${{ steps.changes.outputs.go-code }}" == "true" ]]; then
            matrix='{"scan":["gosec","govulncheck"]}'
          else
            matrix='{"scan":["gosec"]}'
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  # =============================================================================
  # Parallel Dependency & Build Phase
  # =============================================================================
  dependencies:
    name: Download & Cache Dependencies
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.go-code-changed == 'true'
    timeout-minutes: 8
    outputs:
      go-mod-cache-hit: ${{ steps.go-cache.outputs.cache-hit }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Go with Optimized Settings
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false  # We handle caching manually for better control
          check-latest: false  # Skip version check for speed
      
      - name: Restore Go Module Cache
        id: go-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.go-cache-key }}
          restore-keys: |
            go-${{ env.GO_VERSION }}-
            go-
          enableCrossOsArchive: false  # Disable for performance
      
      - name: Download Dependencies (if cache miss)
        if: steps.go-cache.outputs.cache-hit != 'true'
        run: |
          go mod download -x
          go mod verify
        env:
          GOPROXY: https://proxy.golang.org,direct
          GOSUMDB: sum.golang.org
      
      - name: Warm Build Cache
        if: steps.go-cache.outputs.cache-hit != 'true'
        run: |
          # Pre-compile common packages to warm the build cache
          go build -a -installsuffix cgo std

  # =============================================================================
  # Parallel Build Matrix (High Performance)
  # =============================================================================
  build:
    name: Build (${{ matrix.target }})
    runs-on: ubuntu-latest
    needs: [setup, dependencies]
    if: needs.setup.outputs.go-code-changed == 'true'
    timeout-minutes: 10
    
    strategy:
      fail-fast: false
      matrix:
        target:
          - intent-ingest
          - porch-publisher
          - conductor-watch
          - planner
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      
      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.go-cache-key }}
          fail-on-cache-miss: true  # Fail fast if dependencies job failed
      
      - name: Build Binary
        env:
          CGO_ENABLED: 0
          GOOS: linux
          GOARCH: amd64
        run: |
          mkdir -p bin
          
          # Find the correct path for the target
          if [[ -f "cmd/${{ matrix.target }}/main.go" ]]; then
            BUILD_PATH="./cmd/${{ matrix.target }}"
          elif [[ -f "planner/cmd/${{ matrix.target }}/main.go" ]]; then
            BUILD_PATH="./planner/cmd/${{ matrix.target }}"
          else
            echo "Could not find main.go for ${{ matrix.target }}"
            exit 1
          fi
          
          # Build with optimized flags
          go build -ldflags="-s -w -X main.version=${{ github.sha }}" \
            -trimpath \
            -o bin/${{ matrix.target }} \
            $BUILD_PATH
          
          # Generate checksum
          cd bin && sha256sum ${{ matrix.target }} > ${{ matrix.target }}.sha256
      
      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: bin/
          retention-days: 1

  # =============================================================================
  # Optimized Test Suite with Intelligent Parallelization
  # =============================================================================
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [setup, dependencies]
    if: needs.setup.outputs.go-code-changed == 'true'
    timeout-minutes: ${{ matrix.os == 'windows-latest' && 20 || 15 }}
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version || env.GO_VERSION }}
          cache: false
      
      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.go-cache-key }}
          fail-on-cache-miss: ${{ matrix.experimental != true }}
      
      - name: Setup Test Environment
        run: |
          # Install test dependencies
          go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest
          setup-envtest use 1.29.0 --bin-dir ~/.local/bin
          echo "KUBEBUILDER_ASSETS=$(setup-envtest use 1.29.0 --bin-dir ~/.local/bin -p path)" >> $GITHUB_ENV
      
      - name: Run Tests with Optimizations
        env:
          GOMAXPROCS: ${{ runner.os == 'Windows' && '4' || '2' }}
          CGO_ENABLED: 0
          GOTRACEBACK: all
        run: |
          mkdir -p coverage
          
          # Run tests with parallel execution and optimized settings
          go test -v -race -count=1 -timeout=12m \
            -coverprofile=coverage/coverage.out \
            -covermode=atomic \
            -parallel 4 \
            ./...
          
          # Generate coverage report
          go tool cover -html=coverage/coverage.out -o coverage/coverage.html
      
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ github.run_id }}
          path: coverage/
          retention-days: 3

  # =============================================================================
  # Fast Security Scanning (Parallelized)
  # =============================================================================
  security-scan:
    name: Security (${{ matrix.scan }})
    runs-on: ubuntu-latest
    needs: [setup, dependencies]
    if: needs.setup.outputs.go-code-changed == 'true' || needs.setup.outputs.security-changed == 'true'
    timeout-minutes: 10
    continue-on-error: ${{ matrix.scan == 'semgrep' }}  # Allow semgrep to fail
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.security-matrix) }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Go
        if: matrix.scan != 'trivy'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      
      - name: Restore Dependencies
        if: matrix.scan != 'trivy'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.go-cache-key }}
      
      - name: Run GoSec
        if: matrix.scan == 'gosec'
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          mkdir -p security-reports
          mkdir -p security-reports/gosec
          gosec -fmt sarif -out security-reports/gosec/gosec.sarif ./... || true
          # Ensure SARIF file exists even if no issues found
          if [ ! -f "security-reports/gosec/gosec.sarif" ]; then
            echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"gosec","version":"2.18.2"}},"results":[]}]}' > security-reports/gosec/gosec.sarif
          fi
          gosec -fmt json -out security-reports/gosec/gosec.json ./... || true
      
      - name: Run Govulncheck
        if: matrix.scan == 'govulncheck'
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -json ./... > govulncheck.json
      
      - name: Run Trivy
        if: matrix.scan == 'trivy'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy.sarif'
      
      - name: Run Semgrep
        if: matrix.scan == 'semgrep'
        uses: returntocorp/semgrep-action@v1
        with:
          generateSarif: "1"
      
      - name: Upload SARIF
        if: always() && hashFiles('security-reports/**/*.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security-reports/
          category: ${{ matrix.scan }}
      
      - name: Upload Security Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-${{ matrix.scan }}-${{ github.run_id }}
          path: |
            security-reports/*.sarif
            security-reports/*.json
          if-no-files-found: ignore
          retention-days: 7

  # =============================================================================
  # Optimized Code Quality (Conditional)
  # =============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [setup, dependencies]
    if: needs.setup.outputs.go-code-changed == 'true'
    timeout-minutes: 12
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      
      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.go-cache-key }}
          fail-on-cache-miss: true
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v2.0.0
          args: --timeout=8m --issues-exit-code=0
          skip-cache: false
          skip-pkg-cache: false
          skip-build-cache: false

  # =============================================================================
  # Smart Container Build (Only when needed)
  # =============================================================================
  container:
    name: Container Build
    runs-on: ubuntu-latest
    needs: [setup, build, test]
    if: |
      needs.setup.outputs.containers-changed == 'true' || 
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    timeout-minutes: 15
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binary-*
          path: bin/
          merge-multiple: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ env.DOCKER_CACHE_KEY_PREFIX }}
          cache-to: type=gha,scope=${{ env.DOCKER_CACHE_KEY_PREFIX }},mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.run_timestamp }}

  # =============================================================================
  # Final Status Gate (Optimized)
  # =============================================================================
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [setup, build, test, security-scan, quality]
    if: always()
    timeout-minutes: 2
    
    steps:
      - name: Evaluate Results
        run: |
          echo "=== CI Pipeline Results ==="
          echo "Setup: ${{ needs.setup.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          echo "Quality: ${{ needs.quality.result }}"
          
          # Check for critical failures
          failed=false
          
          if [[ "${{ needs.setup.result }}" != "success" ]]; then
            echo "❌ Setup failed"
            failed=true
          fi
          
          if [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Build failed"
            failed=true
          fi
          
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "❌ Tests failed"
            failed=true
          fi
          
          # Security and quality are warnings, not failures
          if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "⚠️ Security scan had issues"
          fi
          
          if [[ "${{ needs.quality.result }}" == "failure" ]]; then
            echo "⚠️ Quality checks had issues"
          fi
          
          if [[ "$failed" == "true" ]]; then
            echo "💥 CI Pipeline Failed"
            exit 1
          else
            echo "✅ CI Pipeline Succeeded"
          fi
      
      - name: Performance Summary
        if: always()
        run: |
          echo "## ⚡ Optimized CI Performance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Key Optimizations Applied" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Smart change detection with conditional job execution" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unified dependency caching strategy" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Parallel build matrix for multiple targets" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Parallelized security scanning" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Optimized test execution with strategic timeouts" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Container builds only when necessary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Optimization |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|--------------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Setup & Detection | ${{ needs.setup.result }} | Smart filtering |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔨 Build Matrix | ${{ needs.build.result }} | Parallel execution |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Test Suite | ${{ needs.test.result }} | Optimized parallelization |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security Scans | ${{ needs.security-scan.result }} | Multi-tool parallel |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 Quality Checks | ${{ needs.quality.result }} | Conditional execution |" >> $GITHUB_STEP_SUMMARY