# =============================================================================
# Nephoran Main CI Pipeline 2025 - With Integrated Security
# =============================================================================
# Main CI/CD pipeline with integrated security scanning and extended timeouts
# Optimized for Kubernetes operators running on Ubuntu Linux
# =============================================================================

name: Main CI Pipeline 2025

on:
  push:
    branches: [ main, integrate/mvp ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, integrate/mvp ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      skip_security:
        description: 'Skip security scanning'
        type: boolean
        default: false

# Single concurrency group for main CI
concurrency:
  group: main-ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read
  packages: read
  checks: write
  pull-requests: write

env:
  GO_VERSION: "1.24.0"
  TRIVY_VERSION: "0.58.1"
  GOVULNCHECK_VERSION: "v1.1.3"
  CGO_ENABLED: "0"
  GOOS: "linux"
  GOARCH: "amd64"

jobs:
  # =============================================================================
  # Build and Test
  # =============================================================================
  build-test:
    name: ?�� Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.mod
          
      - name: Download dependencies
        run: |
          echo "?�� Downloading Go dependencies..."
          go mod download
          go mod verify
          echo "??Dependencies downloaded"
          
      - name: Generate code
        run: |
          echo "?�� Generating code..."
          make generate || echo "?��? No generate target"
          echo "??Code generation complete"
          
      - name: Build project
        run: |
          echo "?�� Building project..."
          make build
          echo "??Build successful"
          
      - name: Run tests
        run: |
          echo "?�� Running tests..."
          make test
          echo "??Tests passed"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            bin/
            *.out
          retention-days: 7
          if-no-files-found: warn
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 7
          if-no-files-found: warn
          
  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan:
    name: ?? Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.skip_security != 'true'
    needs: build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.mod
          
      - name: Install security tools
        run: |
          echo "?�� Installing security tools..."
          
          # Install Trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | \
            sh -s -- -b /usr/local/bin v${{ env.TRIVY_VERSION }}
          
          # Install govulncheck
          go install golang.org/x/vuln/cmd/govulncheck@${{ env.GOVULNCHECK_VERSION }}
          
          echo "??Security tools installed"
          
      - name: Update vulnerability databases
        run: |
          echo "?? Updating vulnerability databases..."
          trivy image --download-db-only || true
          echo "??Databases updated"
          
      - name: Run govulncheck
        id: govulncheck
        run: |
          echo "?? Checking for Go vulnerabilities..."
          set +e
          
          # Run govulncheck and capture output
          govulncheck -format json ./... > govulncheck-output.json 2>&1
          GOVULN_EXIT=$?
          
          # Create SARIF from output
          cat > govulncheck.sarif << 'SARIF'
{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [{
    "tool": {
      "driver": {
        "name": "govulncheck",
        "version": "${{ env.GOVULNCHECK_VERSION }}",
        "informationUri": "https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck"
      }
    },
    "results": []
  }]
}
SARIF
          
          if [[ $GOVULN_EXIT -eq 0 ]]; then
            echo "??No Go vulnerabilities found"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "?��? Go vulnerabilities detected"
            echo "status=warning" >> $GITHUB_OUTPUT
          fi
          
      - name: Run Trivy filesystem scan
        id: trivy-scan
        run: |
          echo "?? Scanning filesystem for vulnerabilities..."
          set +e
          
          trivy fs \
            --format sarif \
            --output trivy-fs.sarif \
            --severity CRITICAL,HIGH \
            --ignore-unfixed \
            --timeout 20m \
            .
          
          TRIVY_EXIT=$?
          
          # Validate SARIF
          if [[ -f trivy-fs.sarif ]] && jq empty trivy-fs.sarif 2>/dev/null; then
            echo "??Trivy scan complete"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "?��? Trivy scan had issues"
            echo "status=warning" >> $GITHUB_OUTPUT
            
            # Create valid empty SARIF
            cat > trivy-fs.sarif << 'SARIF'
{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [{
    "tool": {
      "driver": {
        "name": "trivy",
        "informationUri": "https://github.com/aquasecurity/trivy"
      }
    },
    "results": []
  }]
}
SARIF
          fi
          
      - name: Upload govulncheck results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('govulncheck.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: govulncheck.sarif
          category: ci-govulncheck
          
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-fs.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: trivy-fs.sarif
          category: ci-trivy-fs
          
      - name: Security scan summary
        if: always()
        run: |
          echo "## ?? Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| govulncheck | ${{ steps.govulncheck.outputs.status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Trivy | ${{ steps.trivy-scan.outputs.status }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed results in the Security tab" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # CI Status and Integration
  # =============================================================================
  ci-status:
    name: ✅ CI Status
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Determine CI Status
        run: |
          echo "# 🏁 CI Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [[ "${{ needs.build-test.result }}" == "success" ]]; then
            echo "✅ **CI Pipeline: PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "All critical jobs completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **CI Pipeline: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Critical build/test failures detected" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
  integration-status:
    name: 🔄 Integration Status  
    runs-on: ubuntu-latest
    needs: [build-test, security-scan, ci-status]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Integration Status Report
        run: |
          echo "# 🔄 Integration Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pipeline Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- Build & Test: ${{ needs.build-test.result }}" >> $GITHUB_STEP_SUMMARY  
          echo "- Security Scan: ${{ needs.security-scan.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- CI Status: ${{ needs.ci-status.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.ci-status.result }}" == "success" || "${{ needs.ci-status.result }}" == "skipped" ]]; then
            echo "✅ **Integration: READY**" >> $GITHUB_STEP_SUMMARY
            echo "Pipeline ready for integration" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Integration: NOT READY**" >> $GITHUB_STEP_SUMMARY
            echo "Fix CI issues before integration" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # =============================================================================
  # Container Build and Scan
  # =============================================================================
  container:
    name: ?�� Container Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
          
      - name: Build container image
        run: |
          echo "?�� Building container image..."
          
          # Try using Makefile first
          if make docker-build IMG=nephoran:ci 2>/dev/null; then
            echo "??Container built with Makefile"
          else
            echo "Building with docker directly..."
            docker build -t nephoran:ci .
            echo "??Container built"
          fi
          
      - name: Scan container with Trivy
        run: |
          echo "?? Scanning container for vulnerabilities..."
          
          # Install Trivy if not available
          if ! command -v trivy &> /dev/null; then
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | \
              sh -s -- -b /usr/local/bin v${{ env.TRIVY_VERSION }}
          fi
          
          set +e
          trivy image \
            --format sarif \
            --output trivy-container.sarif \
            --severity CRITICAL,HIGH \
            --ignore-unfixed \
            --timeout 15m \
            nephoran:ci
          
          # Ensure valid SARIF
          if [[ ! -f trivy-container.sarif ]] || ! jq empty trivy-container.sarif 2>/dev/null; then
            cat > trivy-container.sarif << 'SARIF'
{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [{
    "tool": {
      "driver": {
        "name": "trivy-container",
        "informationUri": "https://github.com/aquasecurity/trivy"
      }
    },
    "results": []
  }]
}
SARIF
          fi
          
          echo "??Container scan complete"
          
      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: hashFiles('trivy-container.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: trivy-container.sarif
          category: ci-container-scan
          
      - name: Container summary
        run: |
          echo "## ?�� Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** nephoran:ci" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ??Built and scanned" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Security scan results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # CodeQL Analysis
  # =============================================================================
  codeql:
    name: ?�� CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          queries: security-extended
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: ci-codeql
          upload: true

  # =============================================================================
  # Final Status Check
  # =============================================================================
  final-ci-status:
    name: ??Final CI Status
    needs: [build-test, security-scan, container, codeql]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Check job statuses
        id: status
        run: |
          echo "?? Checking CI job statuses..."
          
          # Determine overall status
          if [[ "${{ needs.build-test.result }}" == "failure" ]]; then
            echo "??Build/Test failed"
            echo "overall=failure" >> $GITHUB_OUTPUT
            exit 1
          elif [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "??Security scan failed"
            echo "overall=failure" >> $GITHUB_OUTPUT
            exit 1
          elif [[ "${{ needs.container.result }}" == "failure" ]]; then
            echo "??Container build failed"
            echo "overall=failure" >> $GITHUB_OUTPUT
            exit 1
          elif [[ "${{ needs.codeql.result }}" == "failure" ]]; then
            echo "??CodeQL analysis failed"
            echo "overall=failure" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "??All CI checks passed"
            echo "overall=success" >> $GITHUB_OUTPUT
          fi
          
      - name: CI Summary Report
        if: always()
        run: |
          echo "# ?�� CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## ?? Job Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
          
          # Build/Test status
          if [[ "${{ needs.build-test.result }}" == "success" ]]; then
            echo "| Build & Test | ??Success | - |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.build-test.result }}" == "failure" ]]; then
            echo "| Build & Test | ??Failed | - |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.build-test.result }}" == "skipped" ]]; then
            echo "| Build & Test | ?��? Skipped | - |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Build & Test | ?��? Warning | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security scan status
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "| Security Scan | ??Success | - |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "| Security Scan | ??Failed | - |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.security-scan.result }}" == "skipped" ]]; then
            echo "| Security Scan | ?��? Skipped | - |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Security Scan | ?��? Warning | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Container status
          if [[ "${{ needs.container.result }}" == "success" ]]; then
            echo "| Container | ??Success | - |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.container.result }}" == "failure" ]]; then
            echo "| Container | ??Failed | - |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.container.result }}" == "skipped" ]]; then
            echo "| Container | ?��? Skipped | - |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Container | ?��? Warning | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # CodeQL status
          if [[ "${{ needs.codeql.result }}" == "success" ]]; then
            echo "| CodeQL | ??Success | - |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.codeql.result }}" == "failure" ]]; then
            echo "| CodeQL | ??Failed | - |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.codeql.result }}" == "skipped" ]]; then
            echo "| CodeQL | ?��? Skipped | - |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| CodeQL | ?��? Warning | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ steps.status.outputs.overall }}" == "success" ]]; then
            echo "## ??Overall Status: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ??Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_CI completed at $(date -u +%Y-%m-%dT%H:%M:%SZ)_" >> $GITHUB_STEP_SUMMARY