name: Security Tools Installation Test 2025

on:
  workflow_dispatch:
  push:
    branches: [main, integrate/mvp, "feat/**"]
    paths:
    - '.github/workflows/security-*.yml'
  pull_request:
    branches: [main, integrate/mvp]
    paths:
    - '.github/workflows/security-*.yml'

concurrency:
  group: security-tools-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # =============================================================================
  # Test security tools installation compatibility
  # =============================================================================
  test-security-tools:
    name: Test Security Tools Installation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        check-latest: true
    
    - name: Install Trivy (Enhanced Method)
      run: |
        echo "Installing Trivy with multiple fallback methods..."
        
        # Method 1: APT repository (most reliable)
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release curl
        
        # Add Trivy repository
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
        echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        
        sudo apt-get update
        sudo apt-get install -y trivy || {
          echo "APT installation failed, trying binary download..."
          
          # Method 2: Direct binary download
          TRIVY_VERSION="0.57.1"
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v${TRIVY_VERSION} || {
            echo "Install script failed, trying manual download..."
            
            # Method 3: Manual download
            wget https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
            tar zxvf trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
            sudo mv trivy /usr/local/bin/
          }
        }
        
        trivy --version
    
    - name: Install Grype (Anchore)
      run: |
        echo "Installing Grype..."
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin || {
          echo "Grype installation failed, trying alternative..."
          GRYPE_VERSION="0.83.0"
          wget https://github.com/anchore/grype/releases/download/v${GRYPE_VERSION}/grype_${GRYPE_VERSION}_linux_amd64.tar.gz
          tar -xzf grype_${GRYPE_VERSION}_linux_amd64.tar.gz
          sudo mv grype /usr/local/bin/
        }
        grype version
    
    - name: Install Syft (SBOM Generation)
      run: |
        echo "Installing Syft..."
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin || {
          echo "Syft installation failed, trying alternative..."
          SYFT_VERSION="1.17.0"
          wget https://github.com/anchore/syft/releases/download/v${SYFT_VERSION}/syft_${SYFT_VERSION}_linux_amd64.tar.gz
          tar -xzf syft_${SYFT_VERSION}_linux_amd64.tar.gz
          sudo mv syft /usr/local/bin/
        }
        syft version
    
    - name: Install Cosign (Container Signing)
      run: |
        echo "Installing Cosign..."
        COSIGN_VERSION="2.4.1"
        curl -O -L "https://github.com/sigstore/cosign/releases/download/v${COSIGN_VERSION}/cosign-linux-amd64"
        sudo mv cosign-linux-amd64 /usr/local/bin/cosign
        sudo chmod +x /usr/local/bin/cosign
        cosign version
    
    - name: Install Additional Security Tools
      run: |
        echo "Installing additional security tools..."
        
        # GoSec for Go security analysis
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec --version
        
        # Nancy for dependency vulnerability scanning
        go install github.com/sonatype-nexus-community/nancy@latest
        nancy --version
        
        # OSV-Scanner for vulnerability detection
        go install github.com/google/osv-scanner/cmd/osv-scanner@latest
        osv-scanner --version
        
        # TruffleHog for secrets detection
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
        trufflehog --version
        
        # Gitleaks for secrets detection
        GITLEAKS_VERSION="8.21.2"
        curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz | tar -xz
        sudo mv gitleaks /usr/local/bin/
        gitleaks version
        
        # Hadolint for Dockerfile linting
        HADOLINT_VERSION="2.12.0"
        wget https://github.com/hadolint/hadolint/releases/download/v${HADOLINT_VERSION}/hadolint-Linux-x86_64
        chmod +x hadolint-Linux-x86_64
        sudo mv hadolint-Linux-x86_64 /usr/local/bin/hadolint
        hadolint --version
    
    - name: Test Docker Build (Security Scan Ready)
      run: |
        echo "Testing Docker build with security scanning integration..."
        
        # Create a simple Dockerfile for testing
        cat > Dockerfile.test << 'EOF'
        FROM alpine:3.21
        RUN apk add --no-cache ca-certificates
        USER nobody
        WORKDIR /app
        COPY . .
        CMD ["echo", "Security test complete"]
        EOF
        
        # Build test image
        docker build -f Dockerfile.test -t security-test:latest .
        
        # Test Trivy scanning
        echo "Running Trivy container scan..."
        trivy image --format json --output trivy-results.json security-test:latest || {
          echo "Trivy scan failed, but this is expected for testing"
          echo "Exit code: $?"
        }
        
        # Test Grype scanning
        echo "Running Grype container scan..."
        grype security-test:latest -o json > grype-results.json || {
          echo "Grype scan failed, but this is expected for testing"
          echo "Exit code: $?"
        }
        
        # Test Syft SBOM generation
        echo "Generating SBOM with Syft..."
        syft security-test:latest -o spdx-json > sbom.spdx.json || {
          echo "Syft SBOM generation failed, but this is expected for testing"
          echo "Exit code: $?"
        }
        
        # Cleanup
        docker rmi security-test:latest || true
        rm -f Dockerfile.test
    
    - name: Test Go Module Scanning
      run: |
        echo "Testing Go module vulnerability scanning..."
        
        if [[ -f "go.mod" ]]; then
          echo "Running Nancy Go dependency scan..."
          go list -json -deps ./... | nancy sleuth || {
            echo "Nancy scan completed with findings (expected)"
          }
          
          echo "Running OSV-Scanner..."
          osv-scanner scan --recursive . --format json --output osv-results.json || {
            echo "OSV-Scanner completed with findings (expected)"
          }
          
          echo "Running GoSec security analysis..."
          mkdir -p security-reports/gosec
          gosec -fmt sarif -out security-reports/gosec/gosec.sarif ./... || {
            echo "GoSec analysis completed with findings (expected)"
          }
        else
          echo "No go.mod found, skipping Go-specific scans"
        fi
    
    - name: Test Secret Detection
      run: |
        echo "Testing secret detection tools..."
        
        # Test TruffleHog
        echo "Running TruffleHog..."
        trufflehog filesystem . --json --no-update --exclude-paths=.trufflehog-ignore || {
          echo "TruffleHog scan completed (findings expected in test environment)"
        }
        
        # Test Gitleaks
        echo "Running Gitleaks..."
        gitleaks detect --no-git --verbose || {
          echo "Gitleaks scan completed (findings expected in test environment)"
        }
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-tools-test-results
        path: |
          *.json
          security-reports/
        retention-days: 7
    
    - name: Summary
      if: always()
      run: |
        echo "## Security Tools Installation Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Check installed tools
        trivy --version >/dev/null 2>&1 && echo "| Trivy | ✅ Installed |" >> $GITHUB_STEP_SUMMARY || echo "| Trivy | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        grype version >/dev/null 2>&1 && echo "| Grype | ✅ Installed |" >> $GITHUB_STEP_SUMMARY || echo "| Grype | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        syft version >/dev/null 2>&1 && echo "| Syft | ✅ Installed |" >> $GITHUB_STEP_SUMMARY || echo "| Syft | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        cosign version >/dev/null 2>&1 && echo "| Cosign | ✅ Installed |" >> $GITHUB_STEP_SUMMARY || echo "| Cosign | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        gosec --version >/dev/null 2>&1 && echo "| GoSec | ✅ Installed |" >> $GITHUB_STEP_SUMMARY || echo "| GoSec | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        nancy --version >/dev/null 2>&1 && echo "| Nancy | ✅ Installed |" >> $GITHUB_STEP_SUMMARY || echo "| Nancy | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        osv-scanner --version >/dev/null 2>&1 && echo "| OSV-Scanner | ✅ Installed |" >> $GITHUB_STEP_SUMMARY || echo "| OSV-Scanner | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        trufflehog --version >/dev/null 2>&1 && echo "| TruffleHog | ✅ Installed |" >> $GITHUB_STEP_SUMMARY || echo "| TruffleHog | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        gitleaks version >/dev/null 2>&1 && echo "| Gitleaks | ✅ Installed |" >> $GITHUB_STEP_SUMMARY || echo "| Gitleaks | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        hadolint --version >/dev/null 2>&1 && echo "| Hadolint | ✅ Installed |" >> $GITHUB_STEP_SUMMARY || echo "| Hadolint | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Test Environment:** Ubuntu Latest" >> $GITHUB_STEP_SUMMARY
        echo "**Go Version:** $(go version)" >> $GITHUB_STEP_SUMMARY
        echo "**Docker Version:** $(docker --version)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All security tools have been tested for compatibility with GitHub Actions runners as of August 2025." >> $GITHUB_STEP_SUMMARY