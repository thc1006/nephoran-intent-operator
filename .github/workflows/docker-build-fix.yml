name: Docker Build Fix - 2025 Optimized

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build (leave empty for all)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - intent-ingest
          - conductor-loop
          - llm-processor
          - nephio-bridge
          - oran-adaptor
          - porch-publisher
          - planner
  push:
    branches: [main, integrate/mvp, "feat/**"]
    paths:
      - 'Dockerfile*'
      - 'cmd/**'
      - 'pkg/**'
      - 'api/**'
      - 'controllers/**'
      - 'go.mod'
      - 'go.sum'
  pull_request:
    branches: [main, integrate/mvp]
    paths:
      - 'Dockerfile*'
      - 'cmd/**'
      - 'pkg/**'

concurrency:
  group: docker-build-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/integrate/mvp' }}

env:
  # Registry configuration (CRITICAL FIX)
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: thc1006  # Fixed: Use correct namespace
  
  # Docker BuildKit configuration (2025 optimized)
  DOCKER_BUILDKIT: 1
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1
  BUILDX_ATTESTATION_MODE: min
  DOCKER_CLI_EXPERIMENTAL: enabled
  
  # Build optimization
  BUILDKIT_PROGRESS: plain
  DOCKER_SCAN_SUGGEST: false
  
  # Go optimization
  CGO_ENABLED: 0
  GOOS: linux
  GOARCH: amd64
  GO_VERSION: 1.24.6
  ALPINE_VERSION: 3.21

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

jobs:
  setup:
    name: Setup Build Matrix
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.matrix.outputs.services }}
      single_service: ${{ steps.matrix.outputs.single_service }}
    steps:
      - name: Setup service matrix
        id: matrix
        run: |
          if [[ "${{ github.event.inputs.service }}" != "" ]]; then
            echo "Single service build: ${{ github.event.inputs.service }}"
            echo "services=[\"${{ github.event.inputs.service }}\"]" >> $GITHUB_OUTPUT
            echo "single_service=true" >> $GITHUB_OUTPUT
          else
            echo "All services build"
            echo 'services=["intent-ingest","conductor-loop","llm-processor","nephio-bridge","oran-adaptor","porch-publisher","planner"]' >> $GITHUB_OUTPUT
            echo "single_service=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for accurate VCS info

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:v0.16.0
            network=host
          buildkitd-flags: |
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host
          config-inline: |
            [worker.oci]
              max-parallelism = 8
              gc-keep-storage = "4GB"
            [worker.containerd]
              max-parallelism = 8
            [registry."ghcr.io"]
              insecure = false
              ca-file = []
          install: true

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=sha,format=short,prefix=${{ github.ref_name }}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.service=${{ matrix.service }}
            org.opencontainers.image.component=${{ matrix.service }}
            service.name=${{ matrix.service }}
          annotations: |
            org.opencontainers.image.service=${{ matrix.service }}

      - name: Verify service directory
        run: |
          set -euo pipefail
          SERVICE="${{ matrix.service }}"
          
          echo "=== Verifying service: $SERVICE ==="
          
          if [[ "$SERVICE" == "planner" ]]; then
            if [[ -d "planner/cmd/planner" ]]; then
              echo "✅ Planner service directory found: planner/cmd/planner"
            else
              echo "❌ Planner service directory not found"
              ls -la planner/ 2>/dev/null || echo "No planner directory"
              exit 1
            fi
          elif [[ -d "cmd/$SERVICE" ]]; then
            echo "✅ Service directory found: cmd/$SERVICE"
            ls -la "cmd/$SERVICE/"
          else
            echo "❌ Service directory not found: cmd/$SERVICE"
            echo "Available services:"
            find cmd/ -type d -name "*" -maxdepth 1 | sort
            exit 1
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.optimized-2025
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: |
            SERVICE=${{ matrix.service }}
            BUILD_VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp || github.run_id }}
            VCS_REF=${{ github.sha }}
            GO_VERSION=${{ env.GO_VERSION }}
            ALPINE_VERSION=${{ env.ALPINE_VERSION }}
            CGO_ENABLED=${{ env.CGO_ENABLED }}
            BUILDPLATFORM=linux/amd64
            TARGETPLATFORM=linux/amd64
            TARGETOS=${{ env.GOOS }}
            TARGETARCH=${{ env.GOARCH }}
          cache-from: |
            type=gha,scope=build-${{ matrix.service }}-${{ github.ref_name }}
            type=gha,scope=build-${{ matrix.service }}-main
            type=gha,scope=build-${{ matrix.service }}
          cache-to: |
            type=gha,mode=max,scope=build-${{ matrix.service }}-${{ github.ref_name }}
          provenance: false
          sbom: false
          outputs: |
            type=image,push=${{ github.event_name != 'pull_request' }}

      - name: Test container
        if: success()
        run: |
          set -euo pipefail
          SERVICE="${{ matrix.service }}"
          
          # Get the first tag for testing
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          
          echo "=== Testing container: $IMAGE_TAG ==="
          
          # Basic image inspection
          echo "--- Image Details ---"
          docker image inspect "$IMAGE_TAG" --format='{{json .Config.Labels}}' | jq '.' || echo "Labels inspection failed"
          docker image inspect "$IMAGE_TAG" --format='Size: {{.Size}} bytes' || echo "Size inspection failed"
          
          # Test basic container functionality
          echo "--- Container Test ---"
          timeout 30s docker run --rm "$IMAGE_TAG" --help 2>&1 | head -10 || {
            echo "⚠️  Container help test failed or timed out"
            echo "This might be expected for some services"
          }
          
          echo "✅ Container test completed for $SERVICE"

      - name: Security scan
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "=== Docker Build Summary ==="
          echo "Services built: ${{ needs.setup.outputs.services }}"
          echo "Single service mode: ${{ needs.setup.outputs.single_service }}"
          echo "Build status: ${{ needs.build.result }}"
          
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All Docker builds completed successfully"
            echo "Images pushed to: ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/"
          else
            echo "❌ Some Docker builds failed"
            echo "Check individual job logs for details"
          fi