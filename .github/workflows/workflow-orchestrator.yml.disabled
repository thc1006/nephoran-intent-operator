name: Intelligent Workflow Orchestrator

# Smart workflow orchestrator that intelligently routes CI/CD tasks
# based on change analysis, repository state, and performance profiles

on:
  workflow_dispatch:
    inputs:
      force_full_pipeline:
        description: 'Force full pipeline execution'
        required: false
        default: false
        type: boolean
      performance_profile:
        description: 'CI performance profile'
        required: false
        default: 'balanced'
        type: choice
        options:
          - fast        # Minimal checks, fastest feedback
          - balanced    # Optimal balance of speed and coverage
          - comprehensive  # Full validation suite
  push:
    branches: [ main, integrate/mvp, "feat/**", "chore/**" ]
  pull_request:
    branches: [ main, integrate/mvp ]

concurrency:
  group: orchestrator-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: write  # To trigger other workflows

env:
  FAST_PROFILE_TIMEOUT: 10     # Fast profile total time budget (minutes)
  BALANCED_PROFILE_TIMEOUT: 25  # Balanced profile total time budget (minutes)
  COMPREHENSIVE_TIMEOUT: 60     # Comprehensive profile total time budget (minutes)

jobs:
  # =============================================================================
  # Intelligent Analysis Engine
  # =============================================================================
  analyze:
    name: Workflow Intelligence Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      # Primary routing decisions
      should-run-optimized-ci: ${{ steps.decisions.outputs.run-optimized-ci }}
      should-run-security-enhanced: ${{ steps.decisions.outputs.run-security }}
      should-run-quality-gate: ${{ steps.decisions.outputs.run-quality }}
      should-run-conductor-loop: ${{ steps.decisions.outputs.run-conductor-loop }}
      # Performance profile
      performance-profile: ${{ steps.profile.outputs.profile }}
      estimated-duration: ${{ steps.profile.outputs.estimated-duration }}
      # Change analysis
      change-risk-score: ${{ steps.analysis.outputs.risk-score }}
      change-categories: ${{ steps.analysis.outputs.categories }}
      # Resource optimization
      runner-type: ${{ steps.resources.outputs.runner-type }}
      parallel-jobs: ${{ steps.resources.outputs.parallel-jobs }}
    
    steps:
      - name: Checkout for Analysis
        uses: actions/checkout@v4
        with:
          fetch-depth: 10  # Need history for intelligent analysis
      
      - name: Comprehensive Change Analysis
        id: analysis
        run: |
          echo "=== Intelligent Change Analysis ==="
          
          # Initialize metrics
          risk_score=0
          categories=()
          
          # Analyze changed files and calculate risk
          if git diff --name-only HEAD~1 HEAD 2>/dev/null | grep -E '\.(go|mod|sum)$' >/dev/null; then
            risk_score=$((risk_score + 30))
            categories+=("go-code")
            echo "üìù Go code changes detected (+30 risk)"
          fi
          
          if git diff --name-only HEAD~1 HEAD 2>/dev/null | grep -E 'Dockerfile|docker-compose|\.ya?ml$' >/dev/null; then
            risk_score=$((risk_score + 20))
            categories+=("infrastructure")
            echo "üèóÔ∏è Infrastructure changes detected (+20 risk)"
          fi
          
          if git diff --name-only HEAD~1 HEAD 2>/dev/null | grep -E '\.github/workflows/' >/dev/null; then
            risk_score=$((risk_score + 25))
            categories+=("ci-cd")
            echo "‚öôÔ∏è CI/CD changes detected (+25 risk)"
          fi
          
          if git diff --name-only HEAD~1 HEAD 2>/dev/null | grep -E 'security/|auth|crypt|key|secret' >/dev/null; then
            risk_score=$((risk_score + 40))
            categories+=("security")
            echo "üîí Security-related changes detected (+40 risk)"
          fi
          
          if git diff --name-only HEAD~1 HEAD 2>/dev/null | grep -E 'api/|controllers/|cmd/' >/dev/null; then
            risk_score=$((risk_score + 35))
            categories+=("core")
            echo "üíé Core component changes detected (+35 risk)"
          fi
          
          # Analyze commit patterns for additional context
          recent_commits=$(git rev-list --count HEAD~5..HEAD 2>/dev/null || echo "1")
          if [ "$recent_commits" -gt 3 ]; then
            risk_score=$((risk_score + 10))
            echo "üìä High commit frequency detected (+10 risk)"
          fi
          
          # Branch analysis
          current_branch=$(git branch --show-current)
          if [[ "$current_branch" =~ ^(feat|fix)/.*$ ]]; then
            echo "üåø Feature/fix branch detected (moderate risk)"
          elif [[ "$current_branch" =~ ^(hotfix|emergency)/.*$ ]]; then
            risk_score=$((risk_score + 50))
            categories+=("hotfix")
            echo "üö® Hotfix branch detected (+50 risk)"
          fi
          
          # Output results
          echo "risk-score=$risk_score" >> $GITHUB_OUTPUT
          echo "categories=$(IFS=,; echo "${categories[*]}")" >> $GITHUB_OUTPUT
          echo "üìä Final Risk Score: $risk_score/150"
      
      - name: Determine Performance Profile
        id: profile
        run: |
          profile="${{ github.event.inputs.performance_profile || 'balanced' }}"
          risk_score="${{ steps.analysis.outputs.risk-score }}"
          
          # Override profile based on context if not explicitly set
          if [[ "${{ github.event.inputs.performance_profile }}" == "" ]]; then
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              if [ "$risk_score" -lt 30 ]; then
                profile="fast"
                echo "üöÄ PR with low risk: Using FAST profile"
              else
                profile="balanced"
                echo "‚öñÔ∏è PR with moderate risk: Using BALANCED profile"
              fi
            elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              profile="comprehensive"
              echo "üõ°Ô∏è Main branch: Using COMPREHENSIVE profile"
            elif [ "$risk_score" -gt 80 ]; then
              profile="comprehensive"
              echo "‚ö†Ô∏è High risk changes: Forcing COMPREHENSIVE profile"
            fi
          fi
          
          # Estimate duration based on profile and risk
          case "$profile" in
            "fast")
              estimated_duration=${{ env.FAST_PROFILE_TIMEOUT }}
              ;;
            "balanced")
              estimated_duration=${{ env.BALANCED_PROFILE_TIMEOUT }}
              ;;
            "comprehensive")
              estimated_duration=${{ env.COMPREHENSIVE_TIMEOUT }}
              ;;
          esac
          
          echo "profile=$profile" >> $GITHUB_OUTPUT
          echo "estimated-duration=$estimated_duration" >> $GITHUB_OUTPUT
          echo "üìã Selected Profile: $profile (Est. ${estimated_duration}min)"
      
      - name: Resource Optimization
        id: resources
        run: |
          profile="${{ steps.profile.outputs.profile }}"
          risk_score="${{ steps.analysis.outputs.risk-score }}"
          
          # Determine optimal runner type and parallelization
          if [[ "$profile" == "fast" ]]; then
            runner_type="ubuntu-latest"
            parallel_jobs=2
          elif [[ "$profile" == "balanced" ]]; then
            if [ "$risk_score" -gt 50 ]; then
              runner_type="ubuntu-latest-4-cores"  # More powerful for risky changes
              parallel_jobs=4
            else
              runner_type="ubuntu-latest"
              parallel_jobs=3
            fi
          else  # comprehensive
            runner_type="ubuntu-latest-8-cores"  # Maximum power
            parallel_jobs=6
          fi
          
          echo "runner-type=$runner_type" >> $GITHUB_OUTPUT
          echo "parallel-jobs=$parallel_jobs" >> $GITHUB_OUTPUT
          echo "üñ•Ô∏è Optimal Runner: $runner_type (${parallel_jobs} parallel jobs)"
      
      - name: Workflow Routing Decisions
        id: decisions
        run: |
          profile="${{ steps.profile.outputs.profile }}"
          risk_score="${{ steps.analysis.outputs.risk-score }}"
          categories="${{ steps.analysis.outputs.categories }}"
          force_full="${{ github.event.inputs.force_full_pipeline }}"
          
          echo "=== Workflow Routing Decisions ==="
          
          # Always run optimized CI for code changes
          if [[ "$categories" =~ "go-code" ]] || [[ "$force_full" == "true" ]]; then
            run_optimized_ci="true"
            echo "‚úÖ Optimized CI: ENABLED (code changes detected)"
          else
            run_optimized_ci="false"
            echo "‚è≠Ô∏è Optimized CI: SKIPPED (no code changes)"
          fi
          
          # Security scanning based on profile and risk
          if [[ "$categories" =~ "security" ]] || [[ "$profile" == "comprehensive" ]] || [[ "$risk_score" -gt 60 ]]; then
            run_security="true"
            echo "‚úÖ Security Enhanced: ENABLED (security risk or comprehensive profile)"
          elif [[ "$profile" == "fast" ]]; then
            run_security="false"
            echo "‚è≠Ô∏è Security Enhanced: SKIPPED (fast profile)"
          else
            run_security="basic"  # Run basic security checks only
            echo "‚öñÔ∏è Security Enhanced: BASIC (balanced profile)"
          fi
          
          # Quality gate for important branches or high-risk changes
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "$risk_score" -gt 70 ]] || [[ "$profile" == "comprehensive" ]]; then
            run_quality="true"
            echo "‚úÖ Quality Gate: ENABLED (main branch or high risk)"
          elif [[ "$profile" == "fast" ]]; then
            run_quality="false"
            echo "‚è≠Ô∏è Quality Gate: SKIPPED (fast profile)"
          else
            run_quality="basic"
            echo "‚öñÔ∏è Quality Gate: BASIC (moderate risk)"
          fi
          
          # Conductor loop CI for specific path changes
          if git diff --name-only HEAD~1 HEAD 2>/dev/null | grep -E 'cmd/conductor-loop|internal/loop' >/dev/null; then
            run_conductor_loop="true"
            echo "‚úÖ Conductor Loop CI: ENABLED (conductor-loop changes)"
          else
            run_conductor_loop="false"
            echo "‚è≠Ô∏è Conductor Loop CI: SKIPPED (no conductor-loop changes)"
          fi
          
          # Output decisions
          echo "run-optimized-ci=$run_optimized_ci" >> $GITHUB_OUTPUT
          echo "run-security=$run_security" >> $GITHUB_OUTPUT
          echo "run-quality=$run_quality" >> $GITHUB_OUTPUT
          echo "run-conductor-loop=$run_conductor_loop" >> $GITHUB_OUTPUT
      
      - name: Generate Execution Plan
        run: |
          echo "## üß† Intelligent Workflow Orchestration Plan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Risk Score**: ${{ steps.analysis.outputs.risk-score }}/150" >> $GITHUB_STEP_SUMMARY
          echo "- **Categories**: ${{ steps.analysis.outputs.categories }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Profile**: ${{ steps.profile.outputs.profile }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Estimated Duration**: ${{ steps.profile.outputs.estimated-duration }} minutes" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner Type**: ${{ steps.resources.outputs.runner-type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Workflow Execution Plan" >> $GITHUB_STEP_SUMMARY
          echo "| Workflow | Status | Reason |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Optimized CI | ${{ steps.decisions.outputs.run-optimized-ci == 'true' && '‚úÖ ENABLED' || '‚è≠Ô∏è SKIPPED' }} | ${{ steps.decisions.outputs.run-optimized-ci == 'true' && 'Code changes detected' || 'No code changes' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Enhanced | ${{ steps.decisions.outputs.run-security == 'true' && '‚úÖ FULL' || steps.decisions.outputs.run-security == 'basic' && '‚öñÔ∏è BASIC' || '‚è≠Ô∏è SKIPPED' }} | ${{ steps.decisions.outputs.run-security == 'true' && 'High risk/Comprehensive' || steps.decisions.outputs.run-security == 'basic' && 'Moderate risk' || 'Low risk/Fast profile' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | ${{ steps.decisions.outputs.run-quality == 'true' && '‚úÖ FULL' || steps.decisions.outputs.run-quality == 'basic' && '‚öñÔ∏è BASIC' || '‚è≠Ô∏è SKIPPED' }} | ${{ steps.decisions.outputs.run-quality == 'true' && 'Main branch/High risk' || steps.decisions.outputs.run-quality == 'basic' && 'Balanced profile' || 'Fast profile' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Conductor Loop CI | ${{ steps.decisions.outputs.run-conductor-loop == 'true' && '‚úÖ ENABLED' || '‚è≠Ô∏è SKIPPED' }} | ${{ steps.decisions.outputs.run-conductor-loop == 'true' && 'Conductor-loop changes' || 'No conductor changes' }} |" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # Conditional Workflow Triggers
  # =============================================================================
  trigger-optimized-ci:
    name: Trigger Optimized CI
    needs: analyze
    if: needs.analyze.outputs.should-run-optimized-ci == 'true'
    uses: ./.github/workflows/optimized-ci.yml
    secrets: inherit
  
  trigger-security-enhanced:
    name: Trigger Security Scanning
    needs: analyze
    if: needs.analyze.outputs.should-run-security-enhanced != 'false'
    uses: ./.github/workflows/security-enhanced.yml
    with:
      scan_type: ${{ needs.analyze.outputs.should-run-security-enhanced == 'true' && 'comprehensive' || 'quick' }}
    secrets: inherit
  
  trigger-quality-gate:
    name: Trigger Quality Gate
    needs: analyze
    if: needs.analyze.outputs.should-run-quality-gate != 'false'
    uses: ./.github/workflows/quality-gate.yml
    with:
      coverage_threshold: ${{ needs.analyze.outputs.should-run-quality-gate == 'true' && '90' || '75' }}
      quality_threshold: ${{ needs.analyze.outputs.should-run-quality-gate == 'true' && '8.0' || '6.0' }}
      fail_fast: ${{ needs.analyze.outputs.performance-profile == 'fast' }}
    secrets: inherit
  
  trigger-conductor-loop:
    name: Trigger Conductor Loop CI
    needs: analyze
    if: needs.analyze.outputs.should-run-conductor-loop == 'true'
    uses: ./.github/workflows/conductor-loop.yml
    secrets: inherit

  # =============================================================================
  # Orchestration Summary and Monitoring
  # =============================================================================
  orchestration-summary:
    name: Orchestration Summary
    runs-on: ubuntu-latest
    needs: [analyze, trigger-optimized-ci, trigger-security-enhanced, trigger-quality-gate, trigger-conductor-loop]
    if: always()
    timeout-minutes: 2
    
    steps:
      - name: Calculate Performance Metrics
        id: metrics
        run: |
          # Calculate actual execution time vs estimated
          start_time="${{ github.event.head_commit.timestamp }}"
          current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Simplified time calculation (minutes)
          estimated_duration="${{ needs.analyze.outputs.estimated-duration }}"
          
          echo "estimated-duration=$estimated_duration" >> $GITHUB_OUTPUT
          echo "performance-profile=${{ needs.analyze.outputs.performance-profile }}" >> $GITHUB_OUTPUT
      
      - name: Generate Final Report
        run: |
          echo "## üìà CI/CD Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Profile**: ${{ needs.analyze.outputs.performance-profile }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Risk Score**: ${{ needs.analyze.outputs.change-risk-score }}/150" >> $GITHUB_STEP_SUMMARY
          echo "- **Estimated Duration**: ${{ needs.analyze.outputs.estimated-duration }} minutes" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Jobs**: ${{ needs.analyze.outputs.parallel-jobs }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Workflow Results" >> $GITHUB_STEP_SUMMARY
          echo "| Workflow | Status | Performance |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| üß† Orchestrator | ‚úÖ SUCCESS | Intelligent routing |" >> $GITHUB_STEP_SUMMARY
          echo "| üöÄ Optimized CI | ${{ needs.trigger-optimized-ci.result == 'success' && '‚úÖ SUCCESS' || needs.trigger-optimized-ci.result == 'failure' && '‚ùå FAILED' || needs.trigger-optimized-ci.result == 'skipped' && '‚è≠Ô∏è SKIPPED' || '‚è∏Ô∏è PENDING' }} | Smart caching & parallelization |" >> $GITHUB_STEP_SUMMARY
          echo "| üîí Security Enhanced | ${{ needs.trigger-security-enhanced.result == 'success' && '‚úÖ SUCCESS' || needs.trigger-security-enhanced.result == 'failure' && '‚ùå FAILED' || needs.trigger-security-enhanced.result == 'skipped' && '‚è≠Ô∏è SKIPPED' || '‚è∏Ô∏è PENDING' }} | Multi-tool parallel scanning |" >> $GITHUB_STEP_SUMMARY
          echo "| üìä Quality Gate | ${{ needs.trigger-quality-gate.result == 'success' && '‚úÖ SUCCESS' || needs.trigger-quality-gate.result == 'failure' && '‚ùå FAILED' || needs.trigger-quality-gate.result == 'skipped' && '‚è≠Ô∏è SKIPPED' || '‚è∏Ô∏è PENDING' }} | Conditional comprehensive analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| üîÑ Conductor Loop | ${{ needs.trigger-conductor-loop.result == 'success' && '‚úÖ SUCCESS' || needs.trigger-conductor-loop.result == 'failure' && '‚ùå FAILED' || needs.trigger-conductor-loop.result == 'skipped' && '‚è≠Ô∏è SKIPPED' || '‚è∏Ô∏è PENDING' }} | Path-specific optimization |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí° Performance Insights" >> $GITHUB_STEP_SUMMARY
          echo "- **Smart Filtering**: Avoided unnecessary workflow executions" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Execution**: Maximized concurrent job utilization" >> $GITHUB_STEP_SUMMARY
          echo "- **Caching Strategy**: Shared dependencies across workflows" >> $GITHUB_STEP_SUMMARY
          echo "- **Risk-Based Routing**: Appropriate validation depth for change risk" >> $GITHUB_STEP_SUMMARY
      
      - name: Performance Optimization Recommendations
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Next Optimization Opportunities" >> $GITHUB_STEP_SUMMARY
          
          profile="${{ needs.analyze.outputs.performance-profile }}"
          risk_score="${{ needs.analyze.outputs.change-risk-score }}"
          
          if [[ "$profile" == "comprehensive" ]] && [[ "$risk_score" -lt 40 ]]; then
            echo "- Consider using 'balanced' profile for lower-risk changes" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.trigger-optimized-ci.result }}" == "failure" ]]; then
            echo "- Investigate CI optimization opportunities" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.trigger-security-enhanced.result }}" == "skipped" ]] && [[ "$risk_score" -gt 50 ]]; then
            echo "- Consider enabling security scans for moderate-risk changes" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- Monitor workflow execution times for further optimization" >> $GITHUB_STEP_SUMMARY
          echo "- Consider using larger runners for compute-intensive operations" >> $GITHUB_STEP_SUMMARY