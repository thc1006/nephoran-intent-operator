name: Parallel Test Execution

on:
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Specific test suite to run'
        required: false
        type: choice
        options:
          - all
          - unit-core
          - unit-controllers
          - unit-internal
          - integration
          - security
          - performance
        default: 'all'
  push:
    branches: [ main, integrate/mvp, "feat/**" ]
  pull_request:
    branches: [ main, integrate/mvp ]

concurrency:
  group: parallel-tests-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write

env:
  GO_VERSION: "1.25"  # Updated to latest stable version
  GOPROXY: "https://proxy.golang.org,direct"
  REGISTRY: ghcr.io

jobs:
  configure:
    name: Configure Test Matrix
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      matrix: ${{ steps.setup-matrix.outputs.matrix }}
      should-run: ${{ steps.setup-matrix.outputs.should-run }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Setup Test Matrix
        id: setup-matrix
        run: |
          # Determine which test suites to run based on changes and input
          suites='["unit-core", "unit-controllers", "unit-internal", "integration", "security", "performance"]'
          
          if [ "${{ github.event.inputs.test_suite }}" != "" ] && [ "${{ github.event.inputs.test_suite }}" != "all" ]: then
            suites='["${{ github.event.inputs.test_suite }}"]'
          fi
          
          # Create matrix configuration
          matrix=$(cat <<EOF
          {
            "include": [
              {
                "suite": "unit-core",
                "name": "Unit Tests - Core",
                "pattern": "./pkg/auth/... ./pkg/config/... ./pkg/errors/... ./pkg/generics/... ./pkg/injection/...",
                "timeout": "10m",
                "parallel": 4,
                "coverage": true
              },
              {
                "suite": "unit-controllers", 
                "name": "Unit Tests - Controllers",
                "pattern": "./pkg/controllers/... ./controllers/...",
                "timeout": "15m",
                "parallel": 3,
                "coverage": true
              },
              {
                "suite": "unit-internal",
                "name": "Unit Tests - Internal",
                "pattern": "./internal/loop/... ./internal/porch/... ./internal/intent/...",
                "timeout": "20m",
                "parallel": 2,
                "coverage": true
              },
              {
                "suite": "integration",
                "name": "Integration Tests",
                "pattern": "./cmd/conductor-loop/... ./cmd/llm-processor/...",
                "timeout": "25m",
                "parallel": 1,
                "coverage": false,
                "services": ["redis"]
              },
              {
                "suite": "security",
                "name": "Security Tests",
                "pattern": "./pkg/security/... -tags security",
                "timeout": "15m",
                "parallel": 2,
                "coverage": false
              },
              {
                "suite": "performance",
                "name": "Performance Tests",
                "pattern": "./... -bench=. -run=Benchmark",
                "timeout": "25m",
                "parallel": 1,
                "coverage": false,
                "benchtime": "10s"
              }
            ]
          }
          EOF
          )
          
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "should-run=true" >> $GITHUB_OUTPUT

  parallel-tests:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs: configure
    if: needs.configure.outputs.should-run == 'true'
    timeout-minutes: 35
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.configure.outputs.matrix) }}
      
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # Only start Redis for integration tests
        if: contains(matrix.services, 'redis')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            **/go.sum
          
      - name: Download dependencies
        run: |
          go mod download
          go mod verify
          
      - name: Run Test Suite
        run: |
          # Create a common test options
          test_opts="-v -timeout=${{ matrix.timeout }} -race"
          
          # Add coverage profile for suites that support it
          if [ "${{ matrix.coverage }}" = "true" ]: then
            test_opts+=" -coverprofile=coverage-${{ matrix.suite }}.out"
          fi
          
          # Performance and benchmark tests
          if [ "${{ matrix.suite }}" = "performance" ]: then
            test_opts+=" -bench=. -benchtime=${{ matrix.benchtime }}"
          fi
          
          # Run tests with appropriate options
          go test $test_opts ${{ matrix.pattern }}
          
      - name: Upload Coverage
        if: ${{ matrix.coverage }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.suite }}
          path: coverage-${{ matrix.suite }}.out