name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.24'
  REGISTRY: us-central1-docker.pkg.dev/poised-elf-466913-q2/nephoran

jobs:
  # =============================================================================
  # Validate Release
  # =============================================================================
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate Version Format
        run: |
          VERSION=${{ steps.version.outputs.version }}
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

  # =============================================================================
  # Build Release Assets
  # =============================================================================
  build:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - darwin/amd64
          - darwin/arm64
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Parse Platform
        id: platform
        run: |
          PLATFORM="${{ matrix.platform }}"
          OS=$(echo $PLATFORM | cut -d'/' -f1)
          ARCH=$(echo $PLATFORM | cut -d'/' -f2)
          echo "os=$OS" >> $GITHUB_OUTPUT
          echo "arch=$ARCH" >> $GITHUB_OUTPUT

      - name: Build Binaries
        env:
          GOOS: ${{ steps.platform.outputs.os }}
          GOARCH: ${{ steps.platform.outputs.arch }}
          CGO_ENABLED: 0
          VERSION: ${{ needs.validate.outputs.version }}
        run: |
          mkdir -p dist
          
          # Build all binaries
          BINARIES=("manager" "llm-processor" "nephio-bridge" "oran-adaptor")
          
          for binary in "${BINARIES[@]}"; do
            echo "Building $binary for $GOOS/$GOARCH..."
            
            case $binary in
              "manager")
                go build -ldflags="-s -w -X main.version=$VERSION" -o dist/nephoran-$binary-$GOOS-$GOARCH cmd/manager/main.go
                ;;
              *)
                if [ -d "cmd/$binary" ]; then
                  go build -ldflags="-s -w -X main.version=$VERSION" -o dist/nephoran-$binary-$GOOS-$GOARCH cmd/$binary/main.go
                fi
                ;;
            esac
            
            # Add .exe extension for Windows
            if [ "$GOOS" = "windows" ]; then
              mv dist/nephoran-$binary-$GOOS-$GOARCH dist/nephoran-$binary-$GOOS-$GOARCH.exe
            fi
          done

      - name: Create Archive
        run: |
          cd dist
          if [ "${{ steps.platform.outputs.os }}" = "windows" ]; then
            zip -r nephoran-${{ needs.validate.outputs.version }}-${{ steps.platform.outputs.os }}-${{ steps.platform.outputs.arch }}.zip *
          else
            tar -czf nephoran-${{ needs.validate.outputs.version }}-${{ steps.platform.outputs.os }}-${{ steps.platform.outputs.arch }}.tar.gz *
          fi

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ steps.platform.outputs.os }}-${{ steps.platform.outputs.arch }}
          path: dist/*.{tar.gz,zip}
          retention-days: 7

  # =============================================================================
  # Container Images
  # =============================================================================
  container:
    name: Build & Push Container Images
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Build and Push Images
        env:
          VERSION: ${{ needs.validate.outputs.version }}
        run: |
          SERVICES=("llm-processor" "nephio-bridge" "oran-adaptor" "rag-api")
          
          for service in "${SERVICES[@]}"; do
            echo "Building $service:$VERSION..."
            
            if [ "$service" = "rag-api" ]; then
              docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --push \
                -f rag-python/Dockerfile \
                -t $REGISTRY/$service:$VERSION \
                -t $REGISTRY/$service:latest \
                --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
                --label "org.opencontainers.image.version=$VERSION" \
                --label "org.opencontainers.image.created=$(date -Iseconds)" \
                --label "org.opencontainers.image.revision=${{ github.sha }}" \
                ./rag-python
            else
              docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --push \
                --target $service \
                -t $REGISTRY/$service:$VERSION \
                -t $REGISTRY/$service:latest \
                --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
                --label "org.opencontainers.image.version=$VERSION" \
                --label "org.opencontainers.image.created=$(date -Iseconds)" \
                --label "org.opencontainers.image.revision=${{ github.sha }}" \
                .
            fi
          done

  # =============================================================================
  # Create GitHub Release
  # =============================================================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, container]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Release Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets/

      - name: Generate Release Notes
        id: release-notes
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Create release notes
          cat > RELEASE_NOTES.md << EOF
          # Release $VERSION
          
          ## 🚀 What's New
          EOF
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "" >> RELEASE_NOTES.md
            echo "## 📝 Changes since $PREVIOUS_TAG" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> RELEASE_NOTES.md
          else
            echo "- Initial release of Nephoran Intent Operator" >> RELEASE_NOTES.md
          fi
          
          cat >> RELEASE_NOTES.md << EOF
          
          ## 📦 Container Images
          - \`us-central1-docker.pkg.dev/poised-elf-466913-q2/nephoran/llm-processor:$VERSION\`
          - \`us-central1-docker.pkg.dev/poised-elf-466913-q2/nephoran/nephio-bridge:$VERSION\`
          - \`us-central1-docker.pkg.dev/poised-elf-466913-q2/nephoran/oran-adaptor:$VERSION\`
          - \`us-central1-docker.pkg.dev/poised-elf-466913-q2/nephoran/rag-api:$VERSION\`
          
          ## 🔧 Installation
          
          ### Using pre-built binaries
          Download the appropriate binary for your platform from the release assets below.
          
          ### Using container images
          \`\`\`bash
          docker pull us-central1-docker.pkg.dev/poised-elf-466913-q2/nephoran/llm-processor:$VERSION
          \`\`\`
          
          ### Using Kubernetes manifests
          \`\`\`bash
          kubectl apply -f https://github.com/nephoran/intent-operator/releases/download/$VERSION/manifests.yaml
          \`\`\`
          EOF

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: Nephoran Intent Operator ${{ needs.validate.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}

      - name: Upload Release Assets
        run: |
          # Upload all built artifacts
          find release-assets -name "*.tar.gz" -o -name "*.zip" | while read -r asset; do
            echo "Uploading $(basename "$asset")..."
            gh release upload ${{ needs.validate.outputs.version }} "$asset" --clobber
          done
          
          # Generate and upload Kubernetes manifests
          mkdir -p k8s-manifests
          find deployments -name "*.yaml" | head -10 > k8s-manifests/manifests.yaml
          tar -czf k8s-manifests.tar.gz -C k8s-manifests .
          gh release upload ${{ needs.validate.outputs.version }} k8s-manifests.tar.gz --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =============================================================================
  # Post-Release Tasks
  # =============================================================================
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate, release]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Documentation
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          
          # Update version references in documentation
          find docs -name "*.md" -exec sed -i "s|version: .*|version: $VERSION|g" {} \;
          find deployments -name "*.yaml" -exec sed -i "s|tag: .*|tag: $VERSION|g" {} \;

      - name: Notify Stakeholders
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          PRERELEASE="${{ needs.validate.outputs.is_prerelease }}"
          
          if [ "$PRERELEASE" = "true" ]; then
            STATUS="🚧 Pre-release"
            COLOR="warning"
          else
            STATUS="🎉 Release"
            COLOR="good"
          fi
          
          # Send notification (webhook example)
          if [ -n "${{ secrets.RELEASE_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.RELEASE_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{
                "text": "Nephoran Intent Operator '"$STATUS"': '"$VERSION"'",
                "attachments": [{
                  "color": "'"$COLOR"'",
                  "fields": [{
                    "title": "Version",
                    "value": "'"$VERSION"'",
                    "short": true
                  }, {
                    "title": "Release Page",
                    "value": "https://github.com/${{ github.repository }}/releases/tag/'"$VERSION"'",
                    "short": false
                  }]
                }]
              }' || echo "Webhook notification failed"
          fi

      - name: Release Summary
        run: |
          echo "## 🎉 Release ${{ needs.validate.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: ${{ needs.validate.outputs.is_prerelease == 'true' && 'Pre-release' || 'Stable Release' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Images**: Built and pushed" >> $GITHUB_STEP_SUMMARY
          echo "- **Binaries**: Available for Linux, macOS (amd64, arm64)" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation**: Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }})" >> $GITHUB_STEP_SUMMARY