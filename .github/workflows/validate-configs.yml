name: Validate Configurations

on:
  push:
    branches: [ main, integrate/*, feat/*, fix/* ]
    paths:
      - '.golangci.yml'
      - '.golangci.yaml'
      - '.golangci.toml'
      - '.golangci.json'
      - 'golangci.yml'
      - 'golangci.yaml'
      - 'golangci.toml'
      - 'golangci.json'
      - '*/.golangci.yml'
      - '*/.golangci.yaml'
      - '*/.golangci.toml'
      - '*/.golangci.json'
      - '*/golangci.yml'
      - '*/golangci.yaml'
      - '*/golangci.toml'
      - '*/golangci.json'
      - 'scripts/validate-golangci-config.sh'
      - '.github/workflows/validate-configs.yml'
  pull_request:
    branches: [ main, integrate/*, feat/*, fix/* ]
    paths:
      - '.golangci.yml'
      - '.golangci.yaml'
      - '.golangci.toml'
      - '.golangci.json'
      - 'golangci.yml'
      - 'golangci.yaml'
      - 'golangci.toml'
      - 'golangci.json'
      - '*/.golangci.yml'
      - '*/.golangci.yaml'
      - '*/.golangci.toml'
      - '*/.golangci.json'
      - '*/golangci.yml'
      - '*/golangci.yaml'
      - '*/golangci.toml'
      - '*/golangci.json'
      - 'scripts/validate-golangci-config.sh'
      - '.github/workflows/validate-configs.yml'

# Prevent concurrent runs on the same branch
concurrency:
  group: validate-configs-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read

jobs:
  detect-changes:
    name: Detect Configuration Changes
    runs-on: ubuntu-latest
    outputs:
      config-changed: ${{ steps.changes.outputs.config }}
      validation-changed: ${{ steps.changes.outputs.validation }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            config:
              - '.golangci.yml'
              - '.golangci.yaml'
              - '.golangci.toml'
              - '.golangci.json'
              - 'golangci.yml'
              - 'golangci.yaml'
              - 'golangci.toml'
              - 'golangci.json'
              - '*/.golangci.yml'
              - '*/.golangci.yaml'
              - '*/.golangci.toml'
              - '*/.golangci.json'
              - '*/golangci.yml'
              - '*/golangci.yaml'
              - '*/golangci.toml'
              - '*/golangci.json'
            validation:
              - 'scripts/validate-golangci-config.sh'
              - '.github/workflows/validate-configs.yml'

  validate-golangci-configs:
    name: Validate golangci-lint Configs (v${{ matrix.golangci-version }})
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.config-changed == 'true' || needs.detect-changes.outputs.validation-changed == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        golangci-version:
          - "1.63.4"  # Current version used in main CI
          - "1.62.0"  # Previous stable version
          - "1.61.0"  # Legacy compatibility check
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.6'
          cache-dependency-path: |
            go.sum
            api/go.sum
            controllers/go.sum
            pkg/go.sum

      - name: Install golangci-lint v${{ matrix.golangci-version }}
        uses: golangci/golangci-lint-action@v6
        with:
          version: v${{ matrix.golangci-version }}
          install-mode: "binary"
          args: --version

      - name: Make validation script executable
        run: chmod +x scripts/validate-golangci-config.sh

      - name: Validate golangci-lint configurations
        id: validate
        run: |
          echo "::group::Validating with golangci-lint v${{ matrix.golangci-version }}"
          
          # Set environment variable to force specific version usage
          export GOLANGCI_LINT_VERSION="v${{ matrix.golangci-version }}"
          
          # Run validation script
          if ./scripts/validate-golangci-config.sh; then
            echo "validation_status=success" >> $GITHUB_OUTPUT
            echo "✅ All configurations valid with golangci-lint v${{ matrix.golangci-version }}"
          else
            echo "validation_status=failed" >> $GITHUB_OUTPUT
            echo "❌ Configuration validation failed with golangci-lint v${{ matrix.golangci-version }}"
            exit 1
          fi
          
          echo "::endgroup::"

      - name: Report validation results
        if: always()
        run: |
          if [[ "${{ steps.validate.outputs.validation_status }}" == "success" ]]; then
            echo "::notice title=Validation Success::All golangci-lint configurations are valid with v${{ matrix.golangci-version }}"
          else
            echo "::error title=Validation Failed::golangci-lint configuration validation failed with v${{ matrix.golangci-version }}"
          fi

  validate-config-syntax:
    name: Validate Configuration Syntax
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.config-changed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate YAML syntax
        run: |
          echo "::group::Validating YAML syntax"
          
          # Find all YAML config files
          yaml_files=$(find . -name "*.yml" -o -name "*.yaml" | grep -E "(golangci|\.golangci)" | head -20)
          
          if [[ -z "$yaml_files" ]]; then
            echo "No YAML configuration files found"
            echo "::endgroup::"
            exit 0
          fi
          
          # Install yq for YAML validation
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
          validation_failed=false
          
          for file in $yaml_files; do
            echo "Validating YAML syntax: $file"
            if ! yq eval '.' "$file" > /dev/null 2>&1; then
              echo "❌ Invalid YAML syntax in: $file"
              validation_failed=true
            else
              echo "✅ Valid YAML syntax: $file"
            fi
          done
          
          if [[ "$validation_failed" == "true" ]]; then
            echo "::error title=YAML Validation Failed::One or more YAML files have invalid syntax"
            exit 1
          fi
          
          echo "::endgroup::"

      - name: Validate TOML syntax
        run: |
          echo "::group::Validating TOML syntax"
          
          # Find all TOML config files
          toml_files=$(find . -name "*.toml" | grep -E "(golangci|\.golangci)" | head -20)
          
          if [[ -z "$toml_files" ]]; then
            echo "No TOML configuration files found"
            echo "::endgroup::"
            exit 0
          fi
          
          # Install toml-cli for TOML validation
          go install github.com/pelletier/go-toml/v2/cmd/tomljson@latest
          
          validation_failed=false
          
          for file in $toml_files; do
            echo "Validating TOML syntax: $file"
            if ! tomljson "$file" > /dev/null 2>&1; then
              echo "❌ Invalid TOML syntax in: $file"
              validation_failed=true
            else
              echo "✅ Valid TOML syntax: $file"
            fi
          done
          
          if [[ "$validation_failed" == "true" ]]; then
            echo "::error title=TOML Validation Failed::One or more TOML files have invalid syntax"
            exit 1
          fi
          
          echo "::endgroup::"

      - name: Validate JSON syntax
        run: |
          echo "::group::Validating JSON syntax"
          
          # Find all JSON config files
          json_files=$(find . -name "*.json" | grep -E "(golangci|\.golangci)" | head -20)
          
          if [[ -z "$json_files" ]]; then
            echo "No JSON configuration files found"
            echo "::endgroup::"
            exit 0
          fi
          
          validation_failed=false
          
          for file in $json_files; do
            echo "Validating JSON syntax: $file"
            if ! jq empty "$file" 2>/dev/null; then
              echo "❌ Invalid JSON syntax in: $file"
              validation_failed=true
            else
              echo "✅ Valid JSON syntax: $file"
            fi
          done
          
          if [[ "$validation_failed" == "true" ]]; then
            echo "::error title=JSON Validation Failed::One or more JSON files have invalid syntax"
            exit 1
          fi
          
          echo "::endgroup::"

  test-lint-execution:
    name: Test Lint Execution
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-golangci-configs]
    if: needs.detect-changes.outputs.config-changed == 'true' && needs.validate-golangci-configs.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.6'
          cache-dependency-path: |
            go.sum
            api/go.sum
            controllers/go.sum
            pkg/go.sum

      - name: Download dependencies
        run: |
          go mod download
          if [[ -f api/go.mod ]]; then cd api && go mod download && cd ..; fi
          if [[ -f controllers/go.mod ]]; then cd controllers && go mod download && cd ..; fi
          if [[ -f pkg/go.mod ]]; then cd pkg && go mod download && cd ..; fi

      - name: Test golangci-lint dry run
        run: |
          echo "::group::Testing lint execution"
          
          # Install golangci-lint
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.63.4
          
          # Test lint execution with dry run to validate configuration works
          echo "Testing main module..."
          if golangci-lint run --dry-run --timeout=5m ./... 2>&1; then
            echo "✅ Main module configuration works"
          else
            echo "❌ Main module configuration has issues"
            exit 1
          fi
          
          # Test submodules if they exist
          for module in api controllers pkg; do
            if [[ -f "$module/go.mod" ]]; then
              echo "Testing $module module..."
              cd "$module"
              if golangci-lint run --dry-run --timeout=5m ./... 2>&1; then
                echo "✅ $module module configuration works"
              else
                echo "❌ $module module configuration has issues"
                cd ..
                exit 1
              fi
              cd ..
            fi
          done
          
          echo "::endgroup::"

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-golangci-configs, validate-config-syntax, test-lint-execution]
    if: always() && (needs.detect-changes.outputs.config-changed == 'true' || needs.detect-changes.outputs.validation-changed == 'true')
    
    steps:
      - name: Generate validation summary
        run: |
          echo "# Configuration Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check results
          if [[ "${{ needs.validate-golangci-configs.result }}" == "success" ]]; then
            echo "✅ **golangci-lint Configuration Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **golangci-lint Configuration Validation**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.validate-config-syntax.result }}" == "success" || "${{ needs.validate-config-syntax.result }}" == "skipped" ]]; then
            echo "✅ **Configuration Syntax Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Configuration Syntax Validation**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.test-lint-execution.result }}" == "success" || "${{ needs.test-lint-execution.result }}" == "skipped" ]]; then
            echo "✅ **Lint Execution Test**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Lint Execution Test**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Changed Files:**" >> $GITHUB_STEP_SUMMARY
          echo "- Configuration files: ${{ needs.detect-changes.outputs.config-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Validation scripts: ${{ needs.detect-changes.outputs.validation-changed }}" >> $GITHUB_STEP_SUMMARY
          
          # Set exit code based on results
          if [[ "${{ needs.validate-golangci-configs.result }}" == "failure" || "${{ needs.validate-config-syntax.result }}" == "failure" || "${{ needs.test-lint-execution.result }}" == "failure" ]]; then
            echo ""
            echo "❌ **Overall Status**: FAILED - Configuration validation issues detected"
            exit 1
          else
            echo ""
            echo "✅ **Overall Status**: PASSED - All configuration validations successful"
          fi