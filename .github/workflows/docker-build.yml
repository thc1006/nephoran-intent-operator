name: Docker Build and Push

on:
  push:
    branches: [ main, feat/*, integrate/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Weekly security scan and rebuild
    - cron: '0 2 * * 1'

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

concurrency:
  group: docker-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      build-date: ${{ steps.meta.outputs.build-date }}
      vcs-ref: ${{ steps.meta.outputs.vcs-ref }}
      services: ${{ steps.services.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract metadata
        id: meta
        run: |
          VERSION=$(git describe --tags --always --dirty)
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=$(git rev-parse HEAD)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build-date=$BUILD_DATE" >> $GITHUB_OUTPUT
          echo "vcs-ref=$VCS_REF" >> $GITHUB_OUTPUT
          
          echo "Version: $VERSION"
          echo "Build Date: $BUILD_DATE"
          echo "VCS Ref: $VCS_REF"

      - name: Generate service matrix
        id: services
        run: |
          SERVICES='["intent-ingest","llm-processor","nephio-bridge","oran-adaptor","conductor","conductor-loop","porch-publisher","a1-sim","e2-kpm-sim","fcaps-sim","o1-ves-sim"]'
          echo "matrix=$SERVICES" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{fromJson(needs.prepare.outputs.services)}}
    
    permissions:
      contents: read
      packages: write
      id-token: write  # For OIDC authentication
      attestations: write  # For build attestations
      security-events: write  # For vulnerability scanning

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx (2025 Optimized)
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:v0.16.0
            network=host
          config-inline: |
            [worker.oci]
              max-parallelism = 16
              snapshotter = "overlayfs"
            [registry."ghcr.io"]
              mirrors = ["mirror.gcr.io"]
            [cache]
              max-age = "168h"

      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract metadata for ${{ matrix.service }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/nephoran/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.prepare.outputs.version }}
          labels: |
            org.opencontainers.image.title=${{ matrix.service }}
            org.opencontainers.image.description=Nephoran Intent Operator - ${{ matrix.service }} service
            org.opencontainers.image.vendor=Nephoran Project
            org.opencontainers.image.licenses=Apache-2.0

      - name: Build and Push Multi-Arch ${{ matrix.service }} (2025)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./cmd/${{ matrix.service }}/Dockerfile
          target: runtime
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
            BUILD_DATE=${{ needs.prepare.outputs.build-date }}
            VCS_REF=${{ needs.prepare.outputs.vcs-ref }}
            CGO_ENABLED=0
            BUILDKIT_INLINE_CACHE=1
          cache-from: |
            type=gha,scope=buildx-${{ matrix.service }}
            type=registry,ref=${{ env.REGISTRY }}/nephoran/${{ matrix.service }}:buildcache
          cache-to: |
            type=gha,mode=max,scope=buildx-${{ matrix.service }}
            type=registry,ref=${{ env.REGISTRY }}/nephoran/${{ matrix.service }}:buildcache,mode=max,compression=zstd
          provenance: mode=max
          sbom: true
          attestations: |
            type=provenance,mode=max
            type=sbom,generator=docker/buildx-action

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/nephoran/${{ matrix.service }}:${{ needs.prepare.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'container-${{ matrix.service }}'

      - name: Test container startup
        if: github.event_name != 'pull_request'
        run: |
          # Test that the container starts and responds to health checks
          docker run --rm -d --name test-${{ matrix.service }} \
            ${{ env.REGISTRY }}/nephoran/${{ matrix.service }}:${{ needs.prepare.outputs.version }}
          
          # Wait for startup
          sleep 10
          
          # Check if container is still running
          if docker ps | grep -q test-${{ matrix.service }}; then
            echo "✅ Container ${{ matrix.service }} started successfully"
            docker stop test-${{ matrix.service }}
          else
            echo "❌ Container ${{ matrix.service }} failed to start"
            docker logs test-${{ matrix.service }} || true
            exit 1
          fi

  integration-test:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin

      - name: Create test environment file
        run: |
          cat << EOF > .env.test
          VERSION=${{ needs.prepare.outputs.version }}
          REGISTRY=${{ env.REGISTRY }}/nephoran
          LOG_LEVEL=info
          GRAFANA_PASSWORD=test123
          EOF

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Pull all images
        run: |
          services=("intent-ingest" "llm-processor" "nephio-bridge" "oran-adaptor" "conductor" "conductor-loop" "porch-publisher" "a1-sim" "e2-kpm-sim" "fcaps-sim" "o1-ves-sim")
          for service in "${services[@]}"; do
            docker pull ${{ env.REGISTRY }}/nephoran/${service}:${{ needs.prepare.outputs.version }}
          done

      - name: Start infrastructure services
        run: |
          # Start only infrastructure first
          docker compose -f docker-compose.services.yml up -d weaviate redis prometheus
          sleep 30

      - name: Start core services
        run: |
          # Start core services
          docker compose -f docker-compose.services.yml up -d intent-ingest llm-processor nephio-bridge oran-adaptor conductor porch-publisher
          sleep 60

      - name: Health check core services
        run: |
          services=("intent-ingest:8081" "nephio-bridge:8082" "llm-processor:8083" "oran-adaptor:8084" "conductor:8085" "porch-publisher:8086")
          for service_port in "${services[@]}"; do
            service=${service_port%:*}
            port=${service_port#*:}
            echo "Testing $service on port $port..."
            
            # Wait up to 60 seconds for health check
            timeout 60 bash -c "until curl -sf http://localhost:${port}/health >/dev/null 2>&1; do sleep 2; done" || {
              echo "❌ Health check failed for $service"
              docker compose -f docker-compose.services.yml logs $service
              exit 1
            }
            echo "✅ $service health check passed"
          done

      - name: Start simulation services
        run: |
          # Start simulation services
          docker compose -f docker-compose.services.yml up -d a1-sim e2-kpm-sim fcaps-sim o1-ves-sim
          sleep 30

      - name: Integration smoke test
        run: |
          echo "Running basic integration tests..."
          
          # Test intent ingestion endpoint
          curl -X POST http://localhost:8081/api/v1/intents \
            -H "Content-Type: application/json" \
            -d '{"intent": "scale", "service": "test", "replicas": 3}' \
            -f || echo "Intent ingestion test failed (expected in test env)"
          
          # Test A1 simulator
          curl -f http://localhost:9001/health || echo "A1 simulator not ready"
          
          # Test E2 KPM simulator
          curl -f http://localhost:9002/health || echo "E2 KMP simulator not ready"
          
          echo "Basic integration tests completed"

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "Collecting logs for debugging..."
          docker compose -f docker-compose.services.yml logs > integration-test-logs.txt
          docker compose -f docker-compose.services.yml ps > integration-test-status.txt

      - name: Upload logs artifact
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: |
            integration-test-logs.txt
            integration-test-status.txt

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.services.yml down -v
          docker system prune -f

  security-scan:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        service: ["intent-ingest", "llm-processor", "nephio-bridge", "oran-adaptor"]
    
    steps:
      - name: Run comprehensive security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/nephoran/${{ matrix.service }}:${{ needs.prepare.outputs.version }}
          format: 'json'
          output: 'trivy-results-${{ matrix.service }}.json'

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: 'trivy-results-${{ matrix.service }}.json'

  notify:
    needs: [prepare, build, integration-test]
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'pull_request'
    
    steps:
      - name: Notify on success
        if: needs.build.result == 'success' && needs.integration-test.result == 'success'
        run: |
          echo "🎉 Docker build and integration tests completed successfully!"
          echo "Version: ${{ needs.prepare.outputs.version }}"
          echo "All services are available at: ${{ env.REGISTRY }}/nephoran/"

      - name: Notify on failure
        if: needs.build.result == 'failure' || needs.integration-test.result == 'failure'
        run: |
          echo "❌ Docker build or integration tests failed!"
          echo "Check the logs for details."
          exit 1