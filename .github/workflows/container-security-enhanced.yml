name: Container Security Enhanced

on:
  push:
    branches: [main, integrate/mvp]
  pull_request:
    branches: [main, integrate/mvp]
  schedule:
    # Weekly security scan
    - cron: '0 6 * * 1'

permissions:
  contents: read
  packages: read
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io

concurrency:
  group: container-security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # Security scanning for existing containers
  # =============================================================================
  scan-existing:
    name: Scan Existing Images
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        service: [conductor-loop, intent-ingest, porch-publisher, llm-processor]
        
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ env.REGISTRY }}/nephoran/${{ matrix.service }}:latest'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Don't fail on vulnerabilities, just report
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'container-${{ matrix.service }}'

      - name: Generate security report
        if: always()
        run: |
          echo "## Security Scan Results - ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run Trivy in table format for summary
          if docker pull "${{ env.REGISTRY }}/nephoran/${{ matrix.service }}:latest" 2>/dev/null; then
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            
            # Count vulnerabilities by severity
            trivy image --format json "${{ env.REGISTRY }}/nephoran/${{ matrix.service }}:latest" 2>/dev/null | \
            jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity) | .Severity' | \
            sort | uniq -c | \
            while read count severity; do
              echo "| $severity | $count |" >> $GITHUB_STEP_SUMMARY
            done || echo "| - | No vulnerabilities found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Could not pull image for scanning" >> $GITHUB_STEP_SUMMARY
          fi

  # =============================================================================
  # Build-time security checks
  # =============================================================================
  build-security:
    name: Build Security Check
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    timeout-minutes: 15
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Build test image for security scanning
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: false
          load: true
          tags: nephoran-test:security-scan
          build-args: |
            SERVICE=conductor-loop
          cache-from: |
            type=gha,scope=security-build
          cache-to: |
            type=gha,mode=max,scope=security-build

      - name: Run Trivy vulnerability scanner on test image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'nephoran-test:security-scan'
          format: 'sarif'
          output: 'trivy-build-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload build scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-build-results.sarif'
          category: 'container-build'

      - name: Security summary
        run: |
          echo "## Build Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show critical and high vulnerabilities
          trivy image --format table --severity CRITICAL,HIGH nephoran-test:security-scan 2>/dev/null || {
            echo "✅ No critical or high severity vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          }

  # =============================================================================
  # Dockerfile best practices check
  # =============================================================================
  dockerfile-security:
    name: Dockerfile Security
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    timeout-minutes: 5
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          failure-threshold: error
          
      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif
          category: 'dockerfile'

      - name: Run Checkov for infrastructure security
        run: |
          pip install checkov
          checkov --framework dockerfile --file Dockerfile --output sarif --output-file checkov-results.sarif || true
          
      - name: Upload Checkov results  
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: 'infrastructure'

      - name: Dockerfile security summary
        run: |
          echo "## Dockerfile Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Hadolint analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Checkov analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the Security tab for detailed results." >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # Security policy compliance check
  # =============================================================================
  security-compliance:
    name: Security Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check security policies exist
        run: |
          echo "## Security Policy Compliance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for security policy files
          if [[ -f "SECURITY.md" ]]; then
            echo "✅ SECURITY.md found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ SECURITY.md not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -f ".github/dependabot.yml" ]]; then
            echo "✅ Dependabot configuration found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Dependabot configuration not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for security workflows
          if ls .github/workflows/*security* 1> /dev/null 2>&1; then
            echo "✅ Security workflows found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No security workflows found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Compliance Status:** All required security policies are in place" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # Success gate
  # =============================================================================
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [scan-existing, build-security, dockerfile-security, security-compliance]
    if: always()
    timeout-minutes: 2
    
    steps:
      - name: Evaluate security results
        run: |
          echo "Security scan results:"
          echo "Scan Existing: ${{ needs.scan-existing.result }}"
          echo "Build Security: ${{ needs.build-security.result }}"
          echo "Dockerfile Security: ${{ needs.dockerfile-security.result }}"
          echo "Security Compliance: ${{ needs.security-compliance.result }}"
          
          # Only fail if critical security checks fail
          if [[ "${{ needs.build-security.result }}" == "failure" ]]; then
            echo "❌ Build security check failed"
            exit 1
          fi
          
          if [[ "${{ needs.dockerfile-security.result }}" == "failure" ]]; then
            echo "❌ Dockerfile security check failed"
            exit 1
          fi
          
          echo "✅ Security checks completed successfully"