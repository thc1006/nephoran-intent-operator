name: Go Module Cache Management

on:
  workflow_call:
  workflow_dispatch:

jobs:
  cache-modules:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go 1.24.6
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.7'
          cache: false  # Disable default caching mechanism
      
      - name: Configure Go Module Cache
        env:
          # Ensure predictable and secure module cache location
          GOMODCACHE: /home/runner/.cache/go-mod
          GOCACHE: /home/runner/.cache/go-build
        run: |
          # Ensure module cache directory exists with correct permissions
          mkdir -p $GOMODCACHE
          mkdir -p $GOCACHE
          
          # Set restrictive but accessible permissions
          chmod 755 $GOMODCACHE
          chmod 755 $GOCACHE
          
          # Configure Go to use these specific paths
          go env -w GOMODCACHE=$GOMODCACHE
          go env -w GOCACHE=$GOCACHE
      
      - name: Pre-cache cleanup (prevent tar extraction errors)
        run: |
          echo "🧹 Cleaning existing cache directories to prevent tar extraction conflicts..."
          
          # Remove existing directories completely to prevent "File exists" errors
          sudo rm -rf ~/.cache/go-mod ~/.cache/go-build || true
          
          # Recreate clean directories with proper ownership
          mkdir -p ~/.cache/go-mod ~/.cache/go-build
          sudo chown -R $(whoami):$(whoami) ~/.cache/go-mod ~/.cache/go-build
          chmod -R 755 ~/.cache/go-mod ~/.cache/go-build
          
          echo "✅ Cache directories prepared for clean extraction"
          
      - name: Restore Go Modules Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
          # Enable safer extraction mode
          enableCrossOsArchive: false
          fail-on-cache-miss: false
      
      - name: Verify Module Cache Permissions
        run: |
          # Verify module cache directory permissions and ownership
          ls -ld $GOMODCACHE
          ls -ld $GOCACHE
          
          # Check for any problematic files
          find $GOMODCACHE -type f -perm /go+w | xargs -r chmod go-w
          find $GOCACHE -type f -perm /go+w | xargs -r chmod go-w
      
      - name: Download and Verify Go Modules
        run: |
          # Clean existing module cache to prevent conflicts
          go clean -modcache
          
          # Explicitly download modules with verbose output
          go mod download -x
          
          # Verify module integrity
          go mod verify
      
      - name: Enhanced Tar Extraction Safeguards
        run: |
          echo "🛡️ Setting up enhanced tar extraction safeguards for Go cache..."
          
          # Create enhanced safe extraction script
          cat > /tmp/safe-go-cache-extract.sh <<'EOF'
          #!/bin/bash
          set -euo pipefail
          
          # Enhanced safe tar extraction specifically for Go caches
          safe_go_cache_extract() {
            local tarfile="$1"
            local target="$2"
            
            echo "Preparing to extract $tarfile to $target"
            
            # Remove existing files and directories to prevent conflicts
            if [ -d "$target" ]; then
              echo "Removing existing cache directory: $target"
              rm -rf "$target" || true
            fi
            
            # Create clean target directory
            mkdir -p "$target"
            
            # Extract with overwrite protection and verbose logging
            echo "Extracting cache archive..."
            tar -xf "$tarfile" -C "$target" --overwrite --no-same-owner || {
              echo "Standard extraction failed, trying alternative method..."
              # Alternative: Extract to temporary location and move
              temp_dir=$(mktemp -d)
              tar -xf "$tarfile" -C "$temp_dir" --no-same-owner
              rsync -av "$temp_dir/" "$target/"
              rm -rf "$temp_dir"
            }
            
            echo "Cache extraction completed successfully"
          }
          
          # Make script executable
          safe_go_cache_extract "$@"
          EOF
          
          chmod +x /tmp/safe-go-cache-extract.sh
          echo "✅ Enhanced tar extraction script created"
      
      - name: Final Verification
        run: |
          # Comprehensive module cache verification
          go version
          go env | grep -E "GOMODCACHE|GOCACHE"
          go mod graph