# =============================================================================
# CI Pipeline for Nephoran Intent Operator
# =============================================================================
# This workflow provides comprehensive CI/CD for a Kubernetes operator that
# orchestrates O-RAN network functions using Nephio R5 and O-RAN L Release.
# UBUNTU ONLY - No cross-platform support needed for Kubernetes operator
# =============================================================================

name: CI

on:
  workflow_dispatch: {}  # Manual trigger always available
  push:
    branches: [ main, integrate/mvp ]  # Only on important branches
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - 'examples/**'
  pull_request:
    branches: [ main, integrate/mvp ]  # Only for PRs to main branches

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nephoran-intent-operator
  GO_VERSION: "1.24.6"
  CONTROLLER_GEN_VERSION: "v0.19.0"
  GOLANGCI_LINT_VERSION: "v1.64.3"
  GOVULNCHECK_VERSION: "v1.1.4"
  GOPROXY: "https://proxy.golang.org,direct"
  GOSUMDB: "sum.golang.org"
  GO111MODULE: "on"
  CGO_ENABLED: "0"

jobs:
  # =============================================================================
  # Changes Detection - Skip unnecessary jobs
  # =============================================================================
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      go-code: ${{ steps.changes.outputs.go-code }}
      docker-files: ${{ steps.changes.outputs.docker-files }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        id: changes
        run: |
          # Check for Go code changes
          if git diff --name-only HEAD~1 | grep -E '\.(go|mod|sum)$|^(api/|cmd/|controllers/|pkg/|internal/)'; then
            echo "go-code=true" >> $GITHUB_OUTPUT
          else
            echo "go-code=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for Docker file changes
          if git diff --name-only HEAD~1 | grep -E '^(Dockerfile|\.dockerignore)'; then
            echo "docker-files=true" >> $GITHUB_OUTPUT
          else
            echo "docker-files=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for workflow changes
          if git diff --name-only HEAD~1 | grep -E '^\.github/workflows/'; then
            echo "workflows=true" >> $GITHUB_OUTPUT
          else
            echo "workflows=false" >> $GITHUB_OUTPUT
          fi

  # =============================================================================
  # Generate CRDs and Setup
  # =============================================================================
  generate:
    name: Generate CRDs
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go-code == 'true'
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Cache Go tools
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-${{ env.CONTROLLER_GEN_VERSION }}-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-

      - name: Download dependencies
        run: |
          echo "Downloading Go modules..."
          go mod download
          go mod verify

      - name: Install controller-gen
        run: |
          echo "Installing controller-gen ${{ env.CONTROLLER_GEN_VERSION }}..."
          if ! command -v controller-gen &> /dev/null; then
            echo "Installing controller-gen..."
            GOBIN=$(go env GOPATH)/bin go install sigs.k8s.io/controller-tools/cmd/controller-gen@${{ env.CONTROLLER_GEN_VERSION }}
          else
            echo "controller-gen already installed: $(controller-gen --version)"
          fi
          
          # Add GOPATH/bin to PATH for this step and subsequent steps
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Verify tools installation
        run: |
          echo "=== Tool Verification ==="
          echo "Go version: $(go version)"
          echo "GOPATH: $(go env GOPATH)"
          echo "GOBIN: $(go env GOPATH)/bin"
          echo "PATH: $PATH"
          
          if command -v controller-gen &> /dev/null; then
            echo "✅ controller-gen: $(controller-gen --version)"
          else
            echo "❌ controller-gen not found"
            exit 1
          fi

      - name: Generate CRDs and code
        run: |
          echo "Generating CRDs and deepcopy code..."
          set -euo pipefail
          
          echo "Running: make generate"
          if ! make generate; then
            echo "❌ make generate failed"
            echo "=== Debugging Information ==="
            echo "Current directory: $(pwd)"
            echo "Available tools:"
            command -v controller-gen &> /dev/null && echo "  controller-gen: $(controller-gen --version)" || echo "  controller-gen: NOT FOUND"
            echo "Go version: $(go version)"
            echo "GOPATH: $(go env GOPATH)"
            echo "Files in bin/:"
            ls -la bin/ 2>/dev/null || echo "  bin/ directory not found"
            echo "Files in api/:"
            find api/ -name "*.go" | head -5 || echo "  api/ directory not found"
            exit 1
          fi
          echo "✅ make generate completed successfully"
          
          echo "Running: make manifests"
          if ! make manifests; then
            echo "❌ make manifests failed"
            echo "=== Generated files after make generate ==="
            git status --porcelain || echo "No git status available"
            exit 1
          fi
          echo "✅ make manifests completed successfully"

      - name: Show generated changes (debug)
        run: |
          echo "=== Generated files status ==="
          git status --porcelain || echo "No changes detected"
          if [ -n "$(git status --porcelain)" ]; then
            echo "=== Changes detected ==="
            git diff --name-only
            echo "=== First few lines of each changed file ==="
            git diff --name-only | while read -r file; do
              echo "File: $file"
              git diff "$file" | head -10
              echo "---"
            done
          fi

      - name: Verify no changes
        run: |
          echo "Verifying generated files are up to date..."
          if ! git diff --exit-code; then
            echo "❌ Generated files are out of date. Please run 'make generate manifests' locally."
            echo ""
            echo "Files that need to be updated:"
            git diff --name-only
            echo ""
            echo "To fix this issue locally, run:"
            echo "  make generate manifests"
            echo "  git add -A"
            echo "  git commit -m 'update generated files'"
            exit 1
          fi
          echo "✅ Generated files are up to date"

  # =============================================================================
  # Quality Checks - Fast linting
  # =============================================================================
  quality:
    name: Quality
    runs-on: ubuntu-latest
    needs: [changes, generate]
    if: needs.changes.outputs.go-code == 'true'
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Cache golangci-lint
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/golangci-lint
            ~/go/bin/golangci-lint
          key: ${{ runner.os }}-golangci-lint-v${{ env.GOLANGCI_LINT_VERSION }}

      - name: Download dependencies
        run: |
          echo "Downloading Go modules for linting..."
          go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout=10m --config=.golangci-fast.yml

  # =============================================================================
  # Test Suite - Ubuntu only
  # =============================================================================
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [changes, generate]
    if: needs.changes.outputs.go-code == 'true'
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Download dependencies
        run: |
          echo "Downloading dependencies for tests..."
          go mod download
          go mod tidy

      - name: Run tests
        run: |
          echo "Running Go tests with speed optimizations..."
          set -euo pipefail
          
          echo "=== Test Environment (Optimized) ==="
          echo "Go version: $(go version)"
          echo "Working directory: $(pwd)"
          echo "Available packages:"
          go list ./... | head -10
          echo ""
          
          echo "Running: go test -short -v -coverprofile=coverage.out -timeout=10m ./..."
          if ! go test -short -v -coverprofile=coverage.out -timeout=10m ./...; then
            echo ""
            echo "❌ Tests failed"
            echo "=== Debugging Information ==="
            echo "Exit code: $?"
            
            # Show coverage file if it exists
            if [ -f coverage.out ]; then
              echo "Coverage file size: $(wc -l < coverage.out) lines"
            else
              echo "No coverage file generated"
            fi
            
            # Show any test artifacts
            echo "Test artifacts:"
            find . -name "*.test" -o -name "*test*.out" -o -name "*test*.log" 2>/dev/null | head -5
            
            exit 1
          fi
          echo "✅ Tests completed successfully"
          
          # Show coverage summary if available
          if [ -f coverage.out ]; then
            echo ""
            echo "=== Coverage Summary ==="
            go tool cover -func=coverage.out | tail -5
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage.out
          if-no-files-found: ignore
          retention-days: 7

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.go-code == 'true'
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Cache govulncheck
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-security-db/
            ~/go/bin/govulncheck
          key: ${{ runner.os }}-govulncheck-v${{ env.GOVULNCHECK_VERSION }}

      - name: Download dependencies
        run: |
          echo "Downloading dependencies for security scanning..."
          go mod download

      - name: Install govulncheck
        run: |
          echo "Installing govulncheck ${{ env.GOVULNCHECK_VERSION }}..."
          if ! command -v govulncheck &> /dev/null; then
            echo "Installing govulncheck..."
            GOBIN=$(go env GOPATH)/bin go install golang.org/x/vuln/cmd/govulncheck@${{ env.GOVULNCHECK_VERSION }}
            echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          else
            echo "govulncheck already installed: $(govulncheck -version)"
          fi

      - name: Run govulncheck
        run: |
          echo "Running govulncheck..."
          govulncheck ./...

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            ~/.cache/go-security-db/
          if-no-files-found: ignore
          retention-days: 7

  # =============================================================================
  # Docker Build - Multi-architecture for Ubuntu-based containers
  # =============================================================================
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [changes, quality, test]
    if: needs.changes.outputs.go-code == 'true' || needs.changes.outputs.docker-files == 'true'
    timeout-minutes: 30
    strategy:
      matrix:
        service:
          - conductor-loop
          - llm-processor
          - nephio-bridge
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ hashFiles('Dockerfile', 'go.sum') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          target: ${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.run_timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # =============================================================================
  # Final CI Status Check
  # =============================================================================
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [changes, generate, quality, test, security, docker-build]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Check status
        run: |
          echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check individual job results
          generate_result="${{ needs.generate.result }}"
          quality_result="${{ needs.quality.result }}"
          test_result="${{ needs.test.result }}"
          security_result="${{ needs.security.result }}"
          docker_result="${{ needs.docker-build.result }}"
          
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Generate | $generate_result |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality | $quality_result |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | $test_result |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | $security_result |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | $docker_result |" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [[ "$generate_result" == "failure" || "$quality_result" == "failure" || "$test_result" == "failure" || "$security_result" == "failure" || "$docker_result" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **CI Pipeline Failed** - One or more jobs failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [[ "$generate_result" == "cancelled" || "$quality_result" == "cancelled" || "$test_result" == "cancelled" || "$security_result" == "cancelled" || "$docker_result" == "cancelled" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⏸️ **CI Pipeline Cancelled** - One or more jobs were cancelled" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **CI Pipeline Passed** - All jobs completed successfully" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Summary
        if: always()
        run: |
          echo "CI pipeline completed for Nephoran Intent Operator"
          echo "Platform: Ubuntu-only Kubernetes operator"
          echo "Architecture: linux/amd64, linux/arm64"