name: CI

on:
  workflow_dispatch: {}
  push:
    branches: [ main, integrate/mvp, "feat/**", "chore/**" ]
  pull_request:
    branches: [ main, integrate/mvp ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nephoran-intent-operator

jobs:
  # =============================================================================
  # 0) Generate (保留，你之前已經可過)
  # =============================================================================
  generate:
    name: Generate CRDs
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Go (1.24.x + built-in cache)
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          check-latest: true
          cache: true     # 交給 setup-go 管理快取（避免你之前 tar 衝突）
      - name: Go env
        run: go env

      - name: Dependencies
        run: |
          go mod download
          go mod verify

      - name: Install controller-gen
        run: go install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.18.0

      - name: Generate CRDs and code
        run: make gen || true   # 允許未掛鉤時跳過

      - name: Verify no uncommitted changes
        run: |
          git diff --exit-code || (echo "❌ Generated files are not up to date. Run 'make gen' locally." && exit 1)

      - name: Upload CRD artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-crds
          path: deployments/crds/
          if-no-files-found: ignore
          retention-days: 1

  # =============================================================================
  # 1) Build：僅建置 MVP 兩顆 CLI（intent-ingest, porch-publisher）
  # =============================================================================
  build:
    name: Build (MVP scope)
    runs-on: ubuntu-latest
    needs: generate
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Go (1.24.x + cache)
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          check-latest: true
          cache: true

      - name: Download CRDs (optional)
        uses: actions/download-artifact@v4
        with:
          name: generated-crds
          path: deployments/crds/
        continue-on-error: true

      - name: Build targeted binaries
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p bin .excellence-reports

          if [ -d ./cmd/intent-ingest ]; then
            echo "→ Building cmd/intent-ingest"
            ( go build -v -o bin/intent-ingest ./cmd/intent-ingest ) 2>&1 | tee -a .excellence-reports/build.log
          fi
          if [ -d ./cmd/porch-publisher ]; then
            echo "→ Building cmd/porch-publisher"
            ( go build -v -o bin/porch-publisher ./cmd/porch-publisher ) 2>&1 | tee -a .excellence-reports/build.log
          fi

          # 至少要有一顆產物，否則視為失敗
          if [ ! -f bin/intent-ingest ] && [ ! -f bin/porch-publisher ]; then
            echo "No buildable cmd/* targets (looked for cmd/intent-ingest and cmd/porch-publisher)"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            bin/
            .excellence-reports/build.log
          if-no-files-found: error
          retention-days: 7

  # =============================================================================
  # 2) Test：只測 MVP 相關 internal 套件，避免掃到半成品
  # =============================================================================
  test:
    name: Test (MVP scope)
    runs-on: ubuntu-latest
    needs: generate
    timeout-minutes: 20

    services:
      redis:
        image: redis:7-alpine
        ports: [ '6379:6379' ]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Go (1.24.x + cache)
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          check-latest: true
          cache: true

      - name: Download CRDs (optional)
        uses: actions/download-artifact@v4
        with:
          name: generated-crds
          path: deployments/crds/
        continue-on-error: true

      - name: Run unit tests (scoped)
        shell: bash
        env:
          REDIS_URL: redis://localhost:6379
        run: |
          set -euo pipefail
          mkdir -p .excellence-reports
          PKGS=""
          [ -d ./internal/ingest ] && PKGS="$PKGS ./internal/ingest/..."
          [ -d ./internal/porch ]  && PKGS="$PKGS ./internal/porch/..."
          if [ -z "$PKGS" ]; then
            echo "No testable packages under internal/ingest or internal/porch — skipping."
            exit 0
          fi
          ( go test -v $PKGS -count=1 -coverprofile=.excellence-reports/coverage.out ) 2>&1 | tee .excellence-reports/test.log
          go tool cover -html=.excellence-reports/coverage.out -o .excellence-reports/coverage.html || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            .excellence-reports/test.log
            .excellence-reports/coverage.out
            .excellence-reports/coverage.html
          if-no-files-found: ignore
          retention-days: 7

  # =============================================================================
  # 3) Lint：使用 Go 1.24 相容版，僅掃 MVP 範圍且不擋 PR
  # =============================================================================
  lint:
    name: Lint (scoped, non-blocking)
    runs-on: ubuntu-latest
    needs: generate
    timeout-minutes: 10
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Go (1.24.x + cache)
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          check-latest: true
          cache: true

      - name: Install golangci-lint (Go 1.24 compatible)
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.64.7

      - name: Run golangci-lint (only MVP dirs)
        shell: bash
        run: |
          mkdir -p .excellence-reports
          PATH="$(go env GOPATH)/bin:$PATH"
          TARGETS="./cmd/... ./internal/ingest/... ./internal/porch/..."
          # MVP 期間不讓 lint 擋 CI；等程式碼更穩再把 --issues-exit-code=0 拿掉
          golangci-lint run --timeout=5m --issues-exit-code=0 --out-format=github-actions $TARGETS 2>&1 | tee .excellence-reports/lint.log

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: .excellence-reports/lint.log
          if-no-files-found: ignore
          retention-days: 7

  # =============================================================================
  # 4) Gate：單一 Required Check（只看 generate/build/test）
  # =============================================================================
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [generate, build, test]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Gate on results
        shell: bash
        run: |
          echo "Generate: ${{ needs.generate.result }}"
          echo "Build:    ${{ needs.build.result }}"
          echo "Test:     ${{ needs.test.result }}"
          if [[ "${{ needs.generate.result }}" != "success" || \
                "${{ needs.build.result }}"    != "success" || \
                "${{ needs.test.result }}"     != "success" ]]; then
            echo "❌ CI Pipeline Failed"; exit 1; fi
          echo "✅ CI Pipeline Succeeded"

      - name: Summary
        if: always()
        shell: bash
        run: |
          echo "## 🔄 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Generate | ${{ needs.generate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build    | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test     | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
