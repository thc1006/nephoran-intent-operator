name: CI

on:
  workflow_dispatch: {}
  push:
    branches: [ main, integrate/mvp, "feat/**", "chore/**" ]
  pull_request:
    branches: [ main, integrate/mvp ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nephoran-intent-operator

jobs:
  # ---------------------------------------------------------------------------
  # 1) Generate (CRDs / codegen) - non-flaky,保留但不作為單一失敗點
  # ---------------------------------------------------------------------------
  generate:
    name: Generate CRDs
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go from go.mod
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: false

      - name: Cache Go build/mod
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download deps
        run: |
          go mod download
          go mod verify

      - name: Install controller-gen (pinned)
        run: go install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.18.0

      - name: Generate
        run: |
          set -e
          make gen || true
          # 若沒有 CRDs，也不要直接 fail；MVP 階段以穩定為主
          mkdir -p deployments/crds
          ls -lah deployments/crds || true

      - name: Upload generated CRDs
        uses: actions/upload-artifact@v4
        with:
          name: generated-crds
          path: deployments/crds/
          if-no-files-found: ignore
          retention-days: 1

  # ---------------------------------------------------------------------------
  # 2) Build - 明確編兩個 command；沒有就跳過但成功
  # ---------------------------------------------------------------------------
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: generate
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: false

      - name: Cache Go build/mod
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download deps
        run: |
          go mod download
          go mod verify

      - name: Download CRDs (optional)
        uses: actions/download-artifact@v4
        with:
          name: generated-crds
          path: deployments/crds/
        continue-on-error: true

      - name: Build binaries (cmd/*)
        id: build
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p bin .excellence-reports
          built=0

          if [[ -f cmd/intent-ingest/main.go ]]; then
            echo ">> building cmd/intent-ingest"
            ( go build -v -o bin/intent-ingest ./cmd/intent-ingest ) 2>&1 | tee .excellence-reports/build_intent-ingest.log
            built=1
          fi

          if [[ -f cmd/porch-publisher/main.go ]]; then
            echo ">> building cmd/porch-publisher"
            ( go build -v -o bin/porch-publisher ./cmd/porch-publisher ) 2>&1 | tee .excellence-reports/build_porch-publisher.log
            built=1
          fi

          if [[ "${built}" -eq 0 ]]; then
            echo "No command directories found under cmd/, skipping build."
          fi
          ls -lah bin || true

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            bin/
            .excellence-reports/build_*.log
          if-no-files-found: warn
          retention-days: 7

  # ---------------------------------------------------------------------------
  # 3) Test - 偵測有無 *_test.go；沒有就跳過但成功
  # ---------------------------------------------------------------------------
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: generate
    timeout-minutes: 30
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: false

      - name: Cache Go build/mod
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download deps
        run: |
          go mod download
          go mod verify

      - name: Download CRDs (optional)
        uses: actions/download-artifact@v4
        with:
          name: generated-crds
          path: deployments/crds/
        continue-on-error: true

      - name: Run tests (skip if no *_test.go)
        shell: bash
        env:
          USE_EXISTING_CLUSTER: false
          REDIS_URL: redis://localhost:6379
        run: |
          set -euo pipefail
          mkdir -p .excellence-reports
          if find . -type f -name "*_test.go" -not -path "./vendor/*" | head -n1 | grep -q .; then
            ( go test -v ./... -count=1 -coverprofile=.excellence-reports/coverage.out ) 2>&1 | tee .excellence-reports/test.log
            go tool cover -html=.excellence-reports/coverage.out -o .excellence-reports/coverage.html || true
          else
            echo "No *_test.go found. Skipping tests."
            touch .excellence-reports/test.log
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            .excellence-reports/test.log
            .excellence-reports/coverage.out
            .excellence-reports/coverage.html
          if-no-files-found: ignore
          retention-days: 7

  # ---------------------------------------------------------------------------
  # 4) Lint - 先非阻斷；用 CLI 自行控制 exit code，避開舊 config schema 爆掉
  # ---------------------------------------------------------------------------
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: generate
    timeout-minutes: 10
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Install golangci-lint (pinned)
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.61.0

      - name: Run golangci-lint (non-blocking)
        shell: bash
        run: |
          mkdir -p .excellence-reports
          golangci-lint version || true
          # 舊版鍵值若觸發 config 錯誤，不讓 job fail
          golangci-lint run --timeout=5m --out-format=github-actions || true

      - name: Upload lint report (best-effort)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: .excellence-reports/
          if-no-files-found: ignore
          retention-days: 7

  # ---------------------------------------------------------------------------
  # 5) Security - govulncheck JSON 輸出，非阻斷
  # ---------------------------------------------------------------------------
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: generate
    timeout-minutes: 10
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@v1.1.4

      - name: Run govulncheck (non-blocking)
        shell: bash
        run: |
          mkdir -p .excellence-reports
          govulncheck -json ./... > .excellence-reports/govulncheck.json || true
          echo "Report at .excellence-reports/govulncheck.json"

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: .excellence-reports/govulncheck.json
          if-no-files-found: ignore
          retention-days: 7

  # ---------------------------------------------------------------------------
  # 6) 單一門檻 - 只 gate generate/build/test 三個
  # ---------------------------------------------------------------------------
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [generate, build, test]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Gate
        shell: bash
        run: |
          echo "Generate: ${{ needs.generate.result }}"
          echo "Build:    ${{ needs.build.result }}"
          echo "Test:     ${{ needs.test.result }}"
          if [[ "${{ needs.generate.result }}" != "success" || \
                "${{ needs.build.result }}"    != "success" || \
                "${{ needs.test.result }}"     != "success" ]]; then
            echo "❌ CI Pipeline Failed"; exit 1; fi
          echo "✅ CI Pipeline Succeeded"

      - name: Summary
        if: always()
        shell: bash
        run: |
          echo "## 🔄 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Generate | ${{ needs.generate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build    | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test     | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY

  # ---------------------------------------------------------------------------
  # 7) Container Build（只在 main push 且前面綠燈時）
  # ---------------------------------------------------------------------------
  container:
    name: Container Build
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: ghcr login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: bin/

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.run_timestamp }}
            VCS_REF=${{ github.sha }}
