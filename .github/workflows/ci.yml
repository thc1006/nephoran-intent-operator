name: CI

on:
  workflow_dispatch: {}
  push:
    branches: [ main, integrate/mvp, "feat/**", "chore/**" ]
  pull_request:
    branches: [ main, integrate/mvp ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write # for container job on main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nephoran-intent-operator

jobs:
  # =============================================================================
  # Generate (CRDs / codegen)
  # =============================================================================
  generate:
    name: Generate CRDs
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      GOTOOLCHAIN: local
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Go (pinned)
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'   # pin to avoid auto toolchain fetch
          check-latest: false
          cache: false           # safest: avoid mod cache/toolchain clashes

      - name: Go env
        run: go env

      - name: Download & verify deps
        env:
          GOPROXY: https://proxy.golang.org,direct
          GOSUMDB: sum.golang.org
        run: |
          go mod download
          go mod verify

      - name: Install controller-gen
        run: go install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.18.0

      - name: Generate
        shell: bash
        run: |
          if make -n gen >/dev/null 2>&1; then
            make gen
          else
            echo "No Makefile gen target; skipping."
          fi

      - name: Verify no uncommitted changes
        run: |
          git diff --exit-code || (echo "❌ Generated files not up to date. Run 'make gen' and commit." && exit 1)

      - name: Upload CRDs (if any)
        uses: actions/upload-artifact@v4
        with:
          name: generated-crds
          path: deployments/crds/
          if-no-files-found: ignore
          retention-days: 1

  # =============================================================================
  # Build
  # =============================================================================
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: generate
    timeout-minutes: 15
    env:
      GOTOOLCHAIN: local
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Go (pinned)
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          check-latest: false
          cache: false

      - name: Download CRDs
        uses: actions/download-artifact@v4
        with:
          name: generated-crds
          path: deployments/crds/
        continue-on-error: true

      - name: Build (Makefile first, fallback to go build)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .excellence-reports
          if make -n build >/dev/null 2>&1; then
            ( make build ) 2>&1 | tee .excellence-reports/build.log
          else
            echo "No Makefile 'build' → fallback to 'go build ./...'"
            ( go build -v ./... ) 2>&1 | tee .excellence-reports/build.log
          fi

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .excellence-reports/build.log
          if-no-files-found: warn
          retention-days: 7

  # =============================================================================
  # Test
  # =============================================================================
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: generate
    timeout-minutes: 30
    env:
      GOTOOLCHAIN: local
    services:
      redis:
        image: redis:7-alpine
        ports: [ "6379:6379" ]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Go (pinned)
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          check-latest: false
          cache: false

      - name: Download CRDs
        uses: actions/download-artifact@v4
        with:
          name: generated-crds
          path: deployments/crds/
        continue-on-error: true

      - name: Go test (coverage)
        shell: bash
        env:
          USE_EXISTING_CLUSTER: "false"
          REDIS_URL: redis://localhost:6379
        run: |
          set -euo pipefail
          mkdir -p .excellence-reports
          ( go test -v ./... -count=1 -coverprofile=.excellence-reports/coverage.out ) 2>&1 | tee .excellence-reports/test.log
          go tool cover -html=.excellence-reports/coverage.out -o .excellence-reports/coverage.html || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            .excellence-reports/test.log
            .excellence-reports/coverage.out
            .excellence-reports/coverage.html
          if-no-files-found: ignore
          retention-days: 7

  # =============================================================================
  # Lint（穩過；保留問題輸出）
  # =============================================================================
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: generate
    timeout-minutes: 15
    env:
      GOTOOLCHAIN: local
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Go (pinned)
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          check-latest: false
          cache: false

      - name: Download CRDs
        uses: actions/download-artifact@v4
        with:
          name: generated-crds
          path: deployments/crds/
        continue-on-error: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v1.61.0
          install-mode: goinstall   # build with runner Go to avoid binary/ABI mismatch
          args: --config .golangci.yml --timeout=10m --out-format=github-actions --issues-exit-code=0

      - name: Summarize lint
        if: always()
        run: |
          echo "## 🧹 golangci-lint ran" >> $GITHUB_STEP_SUMMARY
          echo "See job log for details." >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # Security（穩過；json 輸出）
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: generate
    timeout-minutes: 15
    env:
      GOTOOLCHAIN: local
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Run govulncheck (json → job 不會因漏洞失敗)
        id: govuln
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: 1.24.5
          go-package: ./...
          output-format: json
          output-file: .excellence-reports/govulncheck.json
          check-latest: false
          cache: false

      - name: Upload govulncheck report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: .excellence-reports/govulncheck.json
          if-no-files-found: ignore
          retention-days: 7

  # =============================================================================
  # Final CI gate（僅 gate 生成 / 編譯 / 測試）
  # =============================================================================
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [generate, build, test]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Gate on upstream job results
        shell: bash
        run: |
          echo "=== CI Pipeline Status ==="
          echo "Generate: ${{ needs.generate.result }}"
          echo "Build:    ${{ needs.build.result }}"
          echo "Test:     ${{ needs.test.result }}"
          echo "Lint:     ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo ""
          if [[ "${{ needs.generate.result }}" != "success" || \
                "${{ needs.build.result }}"    != "success" || \
                "${{ needs.test.result }}"     != "success" ]]; then
            echo "❌ CI Pipeline Failed - Critical jobs (generate/build/test) failed"
            exit 1
          fi
          echo "✅ CI Pipeline Succeeded - All critical jobs completed successfully"

      - name: Summary
        if: always()
        shell: bash
        run: |
          echo "## 🔄 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Generate | ${{ needs.generate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build    | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test     | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # Container (only on push to main)
  # =============================================================================
  container:
    name: Container Build
    runs-on: ubuntu-latest
    needs: [build, test, lint, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.run_timestamp }}
            VCS_REF=${{ github.sha }}
