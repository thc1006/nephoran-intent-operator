name: Cross-Platform Tests

on:
  workflow_dispatch: {}
  push:
    branches: [ main, integrate/mvp, "feat/**" ]
  pull_request:
    branches: [ main, integrate/mvp ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  cross-platform-test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          # Ubuntu - main development platform
          - os: ubuntu-latest
            shell: bash
            cache-path: |
              ~/.cache/go-build
              ~/go/pkg/mod
          # Windows - specific focus for this PR
          - os: windows-latest
            shell: pwsh
            cache-path: |
              ~\AppData\Local\go-build
              ~\go\pkg\mod
          # macOS - additional coverage
          - os: macos-latest
            shell: bash
            cache-path: |
              ~/Library/Caches/go-build
              ~/go/pkg/mod

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: false

      - name: Cache Go modules and build cache
        uses: actions/cache@v4
        with:
          path: ${{ matrix.cache-path }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download and verify dependencies
        shell: ${{ matrix.shell }}
        run: |
          go mod download
          go mod verify

      # Generate deepcopy files if missing (especially for Windows)
      - name: Install controller-gen
        shell: ${{ matrix.shell }}
        run: go install sigs.k8s.io/controller-tools/cmd/controller-gen@latest

      - name: Generate deepcopy methods
        shell: ${{ matrix.shell }}
        run: |
          if [ ! -f "api/v1/zz_generated.deepcopy.go" ] || [ "api/v1/zz_generated.deepcopy.go" -ot "api/v1/doc.go" ]; then
            echo "Generating deepcopy methods for api/v1..."
            controller-gen object:headerFile="hack/boilerplate.go.txt" paths="./api/v1"
          fi
        if: matrix.os != 'windows-latest'

      - name: Generate deepcopy methods (Windows)
        shell: pwsh
        run: |
          $deepcopyFile = "api\v1\zz_generated.deepcopy.go"
          $docFile = "api\v1\doc.go"
          if (-not (Test-Path $deepcopyFile) -or ((Get-Item $deepcopyFile).LastWriteTime -lt (Get-Item $docFile).LastWriteTime)) {
            Write-Output "Generating deepcopy methods for api/v1..."
            controller-gen object:headerFile="hack/boilerplate.go.txt" paths="./api/v1"
          }
        if: matrix.os == 'windows-latest'

      # Build tests - these should work across platforms
      - name: Build main packages
        shell: ${{ matrix.shell }}
        run: |
          echo "Building conductor-loop..."
          go build -v ./cmd/conductor-loop
          echo "Building conductor-watch..."
          go build -v ./cmd/conductor-watch
          echo "Building intent-ingest..."
          go build -v ./cmd/intent-ingest

      # Run cross-platform friendly tests
      - name: Test core packages
        shell: ${{ matrix.shell }}
        run: |
          echo "Testing API packages..."
          go test -v ./api/intent/v1alpha1 -timeout=5m
          go test -v ./api/v1 -timeout=5m -short
          
          echo "Testing internal packages..."
          go test -v ./internal/watch -timeout=5m
          go test -v ./internal/ingest -timeout=5m
          go test -v ./pkg/config -timeout=5m

      # Run platform-specific tests
      - name: Test conductor packages (with platform awareness)
        shell: ${{ matrix.shell }}
        run: |
          echo "Testing conductor-watch..."
          go test -v ./cmd/conductor-watch -timeout=5m
          
          echo "Testing conductor-loop (cross-platform compatible tests)..."
          go test -v ./cmd/conductor-loop -run "TestCrossPlatformFixesValidation" -timeout=5m
        continue-on-error: ${{ matrix.os != 'ubuntu-latest' }}

      # Validate Windows-specific functionality
      - name: Windows-specific validation
        shell: pwsh
        run: |
          echo "Validating Windows batch scripts..."
          if (Test-Path "mock-porch.bat") {
            echo "mock-porch.bat exists"
            Get-Content "mock-porch.bat" | Select-Object -First 5
          }
          
          if (Test-Path "testdata\mock-executables\mock-porch-success.bat") {
            echo "Mock executables exist"
            & ".\testdata\mock-executables\mock-porch-success.bat" --help
          }
          
          echo "Testing filepath operations..."
          $testPath = Join-Path $pwd "test-path"
          echo "Test path: $testPath"
        if: matrix.os == 'windows-latest'

      # Summary report
      - name: Cross-platform test summary
        shell: ${{ matrix.shell }}
        run: |
          echo "=== Cross-platform test completed on ${{ matrix.os }} ==="
          echo "Go version: $(go version)"
          echo "OS: ${{ runner.os }}"
        if: always()

  # Aggregate results
  cross-platform-result:
    name: Cross-Platform Test Results
    runs-on: ubuntu-latest
    needs: cross-platform-test
    if: always()
    
    steps:
      - name: Check cross-platform test results
        run: |
          echo "Cross-platform test results:"
          echo "Ubuntu: ${{ needs.cross-platform-test.outputs.ubuntu-latest || 'N/A' }}"
          echo "Windows: ${{ needs.cross-platform-test.outputs.windows-latest || 'N/A' }}"
          echo "macOS: ${{ needs.cross-platform-test.outputs.macos-latest || 'N/A' }}"
          
          # Check if Windows tests passed
          if [[ "${{ needs.cross-platform-test.result }}" == "success" ]]; then
            echo "✅ All cross-platform tests passed!"
          else
            echo "❌ Some cross-platform tests failed, but this is expected during development"
            echo "Check individual job results for details"
          fi