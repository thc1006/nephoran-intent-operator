# =============================================================================
# OPTIMIZED CI Pipeline for Nephoran Intent Operator - Matrix Build Strategy
# =============================================================================
# This workflow provides comprehensive CI/CD with matrix build strategy for 
# all services, with optimal caching and Ubuntu-only runners.
# =============================================================================

name: CI (Optimized Matrix)

on:
  workflow_dispatch: {}
  push:
    branches: [ main, integrate/mvp, "feat/**", "chore/**" ]
  pull_request:
    branches: [ main, integrate/mvp ]

concurrency:
  group: ci-optimized-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

env:
  GO_VERSION: '1.24'
  GOPROXY: 'https://proxy.golang.org,direct'
  GOSUMDB: 'sum.golang.org'
  REGISTRY: ghcr.io
  IMAGE_NAME: nephoran-intent-operator

jobs:
  # Fast change detection
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      go-code: ${{ steps.filter.outputs.go-code }}
      docker: ${{ steps.filter.outputs.docker }}
      charts: ${{ steps.filter.outputs.charts }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            go-code:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - 'api/**'
              - 'cmd/**'
              - 'controllers/**'
              - 'pkg/**'
              - 'internal/**'
            docker:
              - 'Dockerfile'
              - '.dockerignore'
            charts:
              - 'charts/**'
            docs:
              - '**/*.md'
              - 'docs/**'

  # Lightning-fast linting
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go-code == 'true'
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Lint with fast config
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.3
          args: --config=.golangci-fast.yml --timeout=5m

  # Optimized test execution
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go-code == 'true'
    timeout-minutes: 12
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -timeout=10m ./...
      
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  # Matrix build for all services
  build-matrix:
    name: Build
    runs-on: ubuntu-latest
    needs: [changes, lint, test]
    if: needs.changes.outputs.go-code == 'true' || needs.changes.outputs.docker == 'true'
    timeout-minutes: 25
    strategy:
      matrix:
        service:
          - conductor-loop
          - llm-processor
          - nephio-bridge
          - intent-ingest
          - a1-sim
          - fcaps-sim
          - e2-kpm-sim
          - o1-ves-sim
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          target: ${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          build-args: |
            SERVICE=${{ matrix.service }}
            VERSION=${{ github.sha }}

  # Security scan
  security:
    name: Security
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go-code == 'true'
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # Final status check
  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, test, build-matrix, security]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build-matrix.result }}"
          echo "Security: ${{ needs.security.result }}"
          
          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.build-matrix.result }}" == "failure" || "${{ needs.security.result }}" == "failure" ]]; then
            echo "❌ CI Pipeline Failed"
            exit 1
          fi
          
          echo "✅ CI Pipeline Passed"