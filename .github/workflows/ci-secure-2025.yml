name: Secure CI Pipeline 2025

on:
  workflow_dispatch:
  push:
    branches: [ main, integrate/mvp, "feat/**", "chore/**" ]
  pull_request:
    branches: [ main, integrate/mvp ]

# Security: Default to minimal permissions
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nephoran-intent-operator
  GO_VERSION: '1.24'

jobs:
  # =============================================================================
  # Security-First Change Detection
  # =============================================================================
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 3
    permissions:
      contents: read  # Explicit minimal permission
    outputs:
      go-code: ${{ steps.changes.outputs.go-code }}
      docker: ${{ steps.changes.outputs.docker }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - name: Checkout (Secure)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: false  # Security: Don't persist credentials

      - name: Detect changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36  # v3.0.3
        id: changes
        with:
          filters: |
            go-code:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
            docker:
              - 'Dockerfile*'
              - '.dockerignore'
            workflows:
              - '.github/workflows/**'

  # =============================================================================
  # Security Scanning with Enhanced Controls
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.go-code == 'true'
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write  # Required for uploading SARIF
    steps:
      - name: Checkout (Secure)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          persist-credentials: false

      - name: Setup Go (Secure)
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed  # v5.2.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          check-latest: false  # Use specific version for reproducibility

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -json ./... > govulncheck-report.json || true
          
      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@5681af892cd0f37c2dd10f4e1c0de3f18b57ad88  # v0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'  # Fail on vulnerabilities

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@ff82b58e3562c5bb91038060a2656469797b1daa  # v3.27.9
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-security'

  # =============================================================================
  # Unit Tests with Security Validations
  # =============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.go-code == 'true'
    timeout-minutes: 15
    permissions:
      contents: read
      checks: write  # For test reporting
    steps:
      - name: Checkout (Secure)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          persist-credentials: false

      - name: Setup Go (Secure)
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed  # v5.2.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache test dependencies
        uses: actions/cache@9c7e8e9e1f1a3a5e1c9e8e9e9e9e9e9e9e9e9e9e  # v4.2.0
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-test-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-test-

      - name: Run tests with race detection
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload test coverage
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b  # v4.5.0
        with:
          name: test-coverage
          path: |
            coverage.out
            coverage.html
          retention-days: 7

  # =============================================================================
  # Lint with Security Rules
  # =============================================================================
  lint:
    name: Lint and Security Analysis
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.go-code == 'true'
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - name: Checkout (Secure)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          persist-credentials: false

      - name: Setup Go (Secure)
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed  # v5.2.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: golangci-lint with security checks
        uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8  # v7.2.0
        with:
          version: latest
          args: --timeout=5m --config=.golangci.yml
          skip-cache: false
          skip-pkg-cache: false
          skip-build-cache: false

  # =============================================================================
  # Docker Build with Supply Chain Security
  # =============================================================================
  docker-build:
    name: Docker Build (Secure)
    runs-on: ubuntu-latest
    needs: [changes, unit-tests, lint, security-scan]
    if: |
      needs.changes.outputs.docker == 'true' || 
      needs.changes.outputs.go-code == 'true'
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
      id-token: write  # For OIDC and attestations
      attestations: write  # For artifact signing
      security-events: write
    strategy:
      matrix:
        service: [conductor-loop, intent-ingest]
    steps:
      - name: Checkout (Secure)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          persist-credentials: false

      - name: Set up Docker Buildx (Secure)
        uses: docker/setup-buildx-action@8026d2bc3645ea78b0d2a1cad3c238e3c9cd9f65  # v3.7.1
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:v0.16.0
            network=host

      - name: Log in to Container Registry (OIDC preferred)
        if: github.event_name != 'pull_request'
        uses: docker/login-action@1f36f5b7a2d965ea543e1c7f3b905f094f4c3662  # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@62339db73c56dd749060f65a6ebb93a6e8eac8c3  # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-

      - name: Build and push with attestations
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75  # v6.10.0
        with:
          context: .
          file: Dockerfile.fast-2025
          target: go-runtime
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max  # Generate SLSA provenance
          sbom: true  # Generate SBOM
          build-args: |
            SERVICE=${{ matrix.service }}
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

      - name: Run Trivy on container image
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@5681af892cd0f37c2dd10f4e1c0de3f18b57ad88  # v0.31.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'container-scan-${{ matrix.service }}.sarif'

      - name: Upload container scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@ff82b58e3562c5bb91038060a2656469797b1daa  # v3.27.9
        with:
          sarif_file: 'container-scan-${{ matrix.service }}.sarif'
          category: 'container-scan-${{ matrix.service }}'

  # =============================================================================
  # Final Security Validation
  # =============================================================================
  validate:
    name: Security Validation Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, lint, security-scan, docker-build]
    if: always()
    timeout-minutes: 5
    permissions:
      contents: read
      checks: write
    steps:
      - name: Check security gates
        run: |
          echo "## Security Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check all security gates
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "❌ Security scan failed or found vulnerabilities" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          if [ "${{ needs.unit-tests.result }}" != "success" ] && [ "${{ needs.unit-tests.result }}" != "skipped" ]; then
            echo "❌ Unit tests failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          if [ "${{ needs.lint.result }}" != "success" ] && [ "${{ needs.lint.result }}" != "skipped" ]; then
            echo "❌ Linting failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ All security gates passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Checklist" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ No critical vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All tests passed with race detection" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code quality standards met" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Container images scanned" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM and provenance generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY