# =============================================================================
# Comprehensive Security Scan - 2025 Edition
# =============================================================================
# Comprehensive security scanning with proper SARIF handling and validation
# Fixed for CodeQL Action v3 requirements with unique categories
# =============================================================================

name: Security Scan Comprehensive

on:
  push:
    branches: [ main, feat/*, integrate/* ]
  pull_request:
    branches: [ main, integrate/mvp ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly Monday 2 AM
  workflow_dispatch:

# Security-focused concurrency
concurrency:
  group: security-scan-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GO_VERSION: "1.24.6"
  TRIVY_VERSION: "0.58.1"
  GOVULNCHECK_VERSION: "latest"

jobs:
  # =============================================================================
  # SARIF Validation and Security Scanning
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
          
      - name: Install security tools
        run: |
          # Install Trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v${{ env.TRIVY_VERSION }}
          
          # Install govulncheck
          go install golang.org/x/vuln/cmd/govulncheck@${{ env.GOVULNCHECK_VERSION }}
          
          echo "✅ Security tools installed"
          
      - name: Filesystem security scan
        run: |
          echo "🔍 Running filesystem security scan..."
          trivy fs \
            --format sarif \
            --output trivy-fs-results.sarif \
            --severity CRITICAL,HIGH \
            --ignore-unfixed \
            --timeout 15m \
            .
            
          # Validate SARIF file
          if [[ -f trivy-fs-results.sarif ]]; then
            if jq empty trivy-fs-results.sarif 2>/dev/null; then
              echo "✅ Filesystem SARIF file is valid"
            else
              echo "❌ Invalid SARIF file, creating fallback"
              cat > trivy-fs-results.sarif << 'EOF'
{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "trivy",
          "informationUri": "https://github.com/aquasecurity/trivy"
        }
      },
      "results": []
    }
  ]
}
EOF
            fi
          fi
          
      - name: Go vulnerability check
        run: |
          echo "🔍 Running Go vulnerability check..."
          set +e  # Don't fail on vulnerabilities
          
          govulncheck \
            -format sarif \
            -json \
            ./... > govulncheck-results.sarif 2>&1
          
          GOVULN_EXIT=$?
          
          # Validate and fix SARIF if needed
          if [[ -f govulncheck-results.sarif ]]; then
            if ! jq empty govulncheck-results.sarif 2>/dev/null; then
              echo "❌ govulncheck produced invalid JSON, creating fallback SARIF"
              cat > govulncheck-results.sarif << 'EOF'
{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "govulncheck",
          "informationUri": "https://golang.org/x/vuln"
        }
      },
      "results": []
    }
  ]
}
EOF
            fi
          else
            echo "⚠️ govulncheck did not produce output file, creating empty SARIF"
            cat > govulncheck-results.sarif << 'EOF'
{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "govulncheck",
          "informationUri": "https://golang.org/x/vuln"
        }
      },
      "results": []
    }
  ]
}
EOF
          fi
          
          if [[ $GOVULN_EXIT -eq 0 ]]; then
            echo "✅ No Go vulnerabilities found"
          else
            echo "⚠️ Go vulnerabilities found (exit code: $GOVULN_EXIT)"
          fi
          
      # Upload SARIF files with unique categories
      - name: Upload filesystem security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-fs-results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'
          wait-for-processing: true
          
      - name: Upload Go vulnerability scan results  
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('govulncheck-results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: 'govulncheck-results.sarif'
          category: 'govulncheck-go'
          wait-for-processing: true
          
      - name: Security scan summary
        if: always()
        run: |
          echo "## 🔐 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f trivy-fs-results.sarif ]]; then
            echo "✅ Filesystem scan completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Filesystem scan failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -f govulncheck-results.sarif ]]; then
            echo "✅ Go vulnerability check completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Go vulnerability check failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** All security findings are uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY