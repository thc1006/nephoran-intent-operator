# =============================================================================
# Optimized Production Dockerfile for Nephoran Intent Operator (2025)
# =============================================================================
# Resolves all Docker build issues:
# - Multi-platform build support
# - Timezone data installation fixes
# - Layer caching optimization
# - Buildx configuration improvements
# - Registry authentication fixes
# - Security hardening with 2025 best practices
# =============================================================================

# syntax=docker/dockerfile:1.10-labs

# =============================================================================
# Build Arguments (Global)
# =============================================================================
ARG BUILDPLATFORM=linux/amd64
ARG TARGETPLATFORM=linux/amd64
ARG TARGETOS=linux
ARG TARGETARCH=amd64
ARG SERVICE

# Version arguments
ARG GO_VERSION=1.24.6
ARG ALPINE_VERSION=3.21
ARG DISTROLESS_VERSION=nonroot

# Build optimization flags
ARG CGO_ENABLED=0
ARG GOMAXPROCS=8
ARG GOAMD64=v3

# =============================================================================
# Stage 1: Dependency Layer (Optimized Caching)
# =============================================================================
FROM --platform=$BUILDPLATFORM golang:${GO_VERSION}-alpine${ALPINE_VERSION} AS deps

# Install system dependencies in single layer
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
    set -eux && \
    apk update && apk upgrade --no-cache && \
    apk add --no-cache --virtual .build-deps \
        git \
        ca-certificates \
        curl \
        gnupg && \
    apk add --no-cache \
        tzdata && \
    rm -rf /tmp/* /var/tmp/* && \
    # Security: Remove setuid/setgid bits
    find / -xdev -type f -perm +6000 -delete 2>/dev/null || true && \
    find / -xdev -type f -perm /2000 -delete 2>/dev/null || true

WORKDIR /build

# Copy go.mod and go.sum for dependency caching
COPY go.mod go.sum ./

# Environment optimization for Go module downloads
ENV GOPROXY=https://proxy.golang.org,direct \
    GOSUMDB=sum.golang.org \
    GOPATH=/tmp/go \
    GOCACHE=/tmp/.cache/go-build \
    GOMODCACHE=/tmp/.cache/go-mod

# Download dependencies with enhanced caching and retry logic
RUN --mount=type=cache,target=/tmp/.cache/go-mod,sharing=locked \
    --mount=type=cache,target=/tmp/.cache/go-build,sharing=locked \
    set -eux && \
    chmod 755 /tmp/.cache/go-mod /tmp/.cache/go-build && \
    chown $(id -u):$(id -g) /tmp/.cache/go-mod /tmp/.cache/go-build 2>/dev/null || true && \
    echo "Starting Go module download with retries..." && \
    GOPROXY=https://proxy.golang.org,direct \
    GOSUMDB=sum.golang.org \
    go mod download -x || \
    (echo "First download attempt failed, retrying in 5s..."; sleep 5 && go mod download -x) || \
    (echo "Second download attempt failed, retrying in 10s..."; sleep 10 && go mod download -x) || \
    (echo "Final download attempt with verbose logging..."; go mod download -v)

# =============================================================================
# Stage 2: Builder (Optimized for Speed and Security)
# =============================================================================
FROM deps AS builder

# Build arguments
ARG SERVICE
ARG TARGETARCH
ARG CGO_ENABLED=0
ARG GOMAXPROCS=8
ARG GOAMD64=v3
ARG BUILD_VERSION=dev
ARG BUILD_DATE
ARG VCS_REF

# Validate required SERVICE argument
RUN if [ -z "$SERVICE" ]; then \
    echo "ERROR: SERVICE build argument is required. Use --build-arg SERVICE=<service-name>" >&2; \
    echo "Valid services: conductor-loop, intent-ingest, nephio-bridge, llm-processor, oran-adaptor, a1-sim, conductor, e2-kpm-sim, fcaps-sim, o1-ves-sim, porch-publisher, planner, manager, controller" >&2; \
    exit 1; \
    fi

# Copy source code (optimized for Docker layer caching)
COPY api/ api/
COPY pkg/ pkg/
COPY controllers/ controllers/
COPY cmd/$SERVICE/ cmd/$SERVICE/
COPY vendor/ vendor/ 2>/dev/null || true
COPY internal/ internal/ 2>/dev/null || true

# Special handling for planner service
RUN if [ "$SERVICE" = "planner" ]; then \
    mkdir -p cmd/planner 2>/dev/null || true; \
    if [ -d "planner/" ]; then \
        cp -r planner/ ./; \
    fi; \
    fi

# Build with maximum optimization and security
RUN --mount=type=cache,target=/tmp/.cache/go-mod,sharing=locked \
    --mount=type=cache,target=/tmp/.cache/go-build,sharing=locked \
    set -eux && \
    # Determine build path
    if [ "$SERVICE" = "planner" ]; then \
        BUILD_PATH="./planner/cmd/planner"; \
    elif [ "$SERVICE" = "manager" ] || [ "$SERVICE" = "controller" ]; then \
        BUILD_PATH="./cmd/manager"; \
    else \
        BUILD_PATH="./cmd/$SERVICE"; \
    fi && \
    echo "Building $SERVICE from path: $BUILD_PATH" && \
    # Ultra-optimized build flags
    CGO_ENABLED=$CGO_ENABLED \
    GOOS=linux \
    GOARCH=$TARGETARCH \
    GOMAXPROCS=$GOMAXPROCS \
    GOAMD64=$GOAMD64 \
    go build \
        -compiler=gc \
        -p $GOMAXPROCS \
        -tags "netgo,osusergo,static_build,production" \
        -trimpath \
        -buildmode=exe \
        -ldflags="-s -w -extldflags '-static' -buildid='' \
                 -X 'main.version=${BUILD_VERSION}' \
                 -X 'main.buildDate=${BUILD_DATE}' \
                 -X 'main.vcsRef=${VCS_REF}'" \
        -gcflags="-l=4 -B" \
        -asmflags="-trimpath=$(pwd)" \
        -o /app \
        $BUILD_PATH && \
    # Verify binary
    ls -la /app && \
    file /app && \
    test -x /app && \
    echo "Binary build successful: $(stat -c '%n: size=%s, mode=%a' /app)"

# =============================================================================
# Stage 3: Runtime Dependencies (Distroless Preparation)
# =============================================================================
FROM alpine:${ALPINE_VERSION} AS runtime-deps

# Install runtime dependencies including tzdata fix
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
    set -eux && \
    apk update && \
    apk add --no-cache \
        ca-certificates \
        tzdata && \
    # Verify tzdata installation (critical fix for timezone issues)
    ls -la /usr/share/zoneinfo/UTC || (echo "ERROR: tzdata installation failed" && exit 1) && \
    ls -la /usr/share/zoneinfo/America/New_York || (echo "ERROR: tzdata zones missing" && exit 1) && \
    echo "tzdata successfully installed and verified"

# =============================================================================
# Stage 4: Final Production Image (Security Hardened)
# =============================================================================
FROM gcr.io/distroless/static-debian12:$DISTROLESS_VERSION AS production

# Build arguments for labels
ARG SERVICE
ARG BUILD_VERSION=dev
ARG BUILD_DATE
ARG VCS_REF

# Security: Copy timezone data from runtime-deps (fixes tzdata issues)
COPY --from=runtime-deps /usr/share/zoneinfo /usr/share/zoneinfo
ENV TZ=UTC

# Security: Copy CA certificates
COPY --from=runtime-deps /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy optimized binary with proper ownership
COPY --from=builder --chown=65532:65532 /app /app

# Metadata labels (OCI compliant)
LABEL org.opencontainers.image.title="nephoran-$SERVICE" \
      org.opencontainers.image.description="Nephoran Intent Operator - $SERVICE Service" \
      org.opencontainers.image.version="$BUILD_VERSION" \
      org.opencontainers.image.created="$BUILD_DATE" \
      org.opencontainers.image.revision="$VCS_REF" \
      org.opencontainers.image.vendor="Nephoran Project" \
      org.opencontainers.image.licenses="Apache-2.0" \
      org.opencontainers.image.source="https://github.com/thc1006/nephoran-intent-operator" \
      maintainer="Nephoran Team <noreply@nephoran.com>" \
      service.name="$SERVICE" \
      service.component="$SERVICE" \
      security.runAsNonRoot="true" \
      security.readOnlyRootFilesystem="true" \
      security.capabilities.drop="ALL"

# Security: Environment variables
ENV LOG_LEVEL=info \
    LOG_FORMAT=json \
    METRICS_ENABLED=true \
    HEALTH_ENABLED=true

# Health check (lightweight)
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD ["/app", "health"] || exit 1

# Default entrypoint and command
ENTRYPOINT ["/app"]
CMD ["--help"]

# =============================================================================
# Build Instructions
# =============================================================================
# Build examples:
#   docker build --build-arg SERVICE=intent-ingest -t nephoran/intent-ingest:latest -f Dockerfile.optimized-2025 .
#   docker buildx build --platform linux/amd64,linux/arm64 --build-arg SERVICE=intent-ingest -t nephoran/intent-ingest:latest -f Dockerfile.optimized-2025 .
#
# Multi-arch build with cache:
#   docker buildx build \
#     --platform linux/amd64,linux/arm64 \
#     --build-arg SERVICE=intent-ingest \
#     --cache-from type=gha \
#     --cache-to type=gha,mode=max \
#     -t ghcr.io/thc1006/nephoran-intent-ingest:latest \
#     -f Dockerfile.optimized-2025 \
#     --push .
# =============================================================================