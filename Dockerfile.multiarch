# =============================================================================
# Multi-Architecture Dockerfile for Nephoran Intent Operator
# =============================================================================
# Optimized for cross-platform builds: linux/amd64, linux/arm64, linux/arm/v7
# Uses Docker Buildx for efficient multi-platform image creation
#
# Build for multiple architectures:
#   docker buildx create --use --name multiarch-builder
#   docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 \
#     --build-arg SERVICE=llm-processor \
#     -t nephoran/llm-processor:latest \
#     --push .
#
# Build for specific architecture:
#   docker buildx build --platform linux/arm64 \
#     --build-arg SERVICE=nephio-bridge \
#     -t nephoran/nephio-bridge:arm64 \
#     --load .
# =============================================================================

ARG GO_VERSION=1.24.1
ARG PYTHON_VERSION=3.12.10
ARG ALPINE_VERSION=3.21
ARG DISTROLESS_VERSION=nonroot-amd64

# Global build arguments for cross-compilation
ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH
ARG TARGETVARIANT
ARG SERVICE_TYPE=go

# =============================================================================
# STAGE: Build Information
# =============================================================================
FROM --platform=$BUILDPLATFORM alpine:${ALPINE_VERSION} AS build-info
ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH
ARG TARGETVARIANT

RUN printf "Build Information:\n" > /build-info.txt && \
    printf "  Build Platform: %s\n" "$BUILDPLATFORM" >> /build-info.txt && \
    printf "  Target Platform: %s\n" "$TARGETPLATFORM" >> /build-info.txt && \
    printf "  Target OS: %s\n" "$TARGETOS" >> /build-info.txt && \
    printf "  Target Arch: %s\n" "$TARGETARCH" >> /build-info.txt && \
    printf "  Target Variant: %s\n" "$TARGETVARIANT" >> /build-info.txt && \
    cat /build-info.txt

# =============================================================================
# STAGE: Cross-Compilation Dependencies for Go
# =============================================================================
FROM --platform=$BUILDPLATFORM golang:${GO_VERSION}-alpine AS go-cross-deps

ARG TARGETARCH
ARG TARGETVARIANT

# Install cross-compilation tools with version pinning
RUN apk update && apk upgrade --no-cache && \
    apk add --no-cache \
    git=~2.45 \
    ca-certificates=~20241010 \
    tzdata=~2024 \
    gcc=~13.2 \
    musl-dev=~1.2 \
    binutils=~2.42 \
    && rm -rf /var/cache/apk/* /var/lib/apk/lists/* /tmp/* /var/tmp/* \
    && find / -xdev -type f -perm +6000 -delete 2>/dev/null || true

# Install architecture-specific cross-compilers
RUN case "$TARGETARCH" in \
    "amd64") \
        echo "Native amd64 compilation" \
        ;; \
    "arm64") \
        apk add --no-cache gcc-aarch64 \
        ;; \
    "arm") \
        case "$TARGETVARIANT" in \
            "v7") apk add --no-cache gcc-arm-none-eabi ;; \
            "v6") apk add --no-cache gcc-arm-none-eabi ;; \
        esac \
        ;; \
    esac

# Create non-root build user
RUN addgroup -g 65532 -S nonroot && \
    adduser -u 65532 -S nonroot -G nonroot

WORKDIR /workspace
COPY --chown=nonroot:nonroot go.mod go.sum ./

USER nonroot
RUN go mod download && go mod verify

# =============================================================================
# STAGE: Cross-Platform Go Builder
# =============================================================================
FROM --platform=$BUILDPLATFORM golang:${GO_VERSION}-alpine AS go-cross-builder

ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH
ARG TARGETVARIANT
ARG SERVICE
ARG VERSION=v2.0.0
ARG BUILD_DATE
ARG VCS_REF

# Copy build info
COPY --from=build-info /build-info.txt /build-info.txt
RUN cat /build-info.txt

# Install build tools with version pinning
RUN apk update && apk upgrade --no-cache && \
    apk add --no-cache \
    git=~2.45 \
    ca-certificates=~20241010 \
    tzdata=~2024 \
    binutils=~2.42 \
    && rm -rf /var/cache/apk/* /var/lib/apk/lists/* /tmp/* /var/tmp/* \
    && find / -xdev -type f -perm +6000 -delete 2>/dev/null || true

# Create non-root build user
RUN addgroup -g 65532 -S nonroot && \
    adduser -u 65532 -S nonroot -G nonroot

WORKDIR /build

# Copy dependencies
COPY --from=go-cross-deps /go/pkg /go/pkg
COPY --from=go-cross-deps /workspace/go.mod /workspace/go.sum ./

# Copy source code
COPY --chown=nonroot:nonroot . .

USER nonroot

# Configure Go build environment for target architecture
ENV CGO_ENABLED=0
ENV GOOS=${TARGETOS}
ENV GOARCH=${TARGETARCH}

# Set GOARM for ARM variants
RUN case "$TARGETARCH" in \
    "arm") \
        case "$TARGETVARIANT" in \
            "v7") export GOARM=7 ;; \
            "v6") export GOARM=6 ;; \
            "v5") export GOARM=5 ;; \
        esac \
        ;; \
    esac

# Build service with architecture-specific optimizations
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    set -ex; \
    case "$SERVICE" in \
        "llm-processor") CMD_PATH="./cmd/llm-processor/main.go" ;; \
        "nephio-bridge") CMD_PATH="./cmd/nephio-bridge/main.go" ;; \
        "oran-adaptor") CMD_PATH="./cmd/oran-adaptor/main.go" ;; \
        "manager"|"controller") CMD_PATH="./main.go" ;; \
        *) echo "Unknown service: $SERVICE" && exit 1 ;; \
    esac; \
    echo "Building $SERVICE for $TARGETOS/$TARGETARCH${TARGETVARIANT:+/$TARGETVARIANT}"; \
    go build \
        -trimpath \
        -mod=readonly \
        -ldflags="-w -s -extldflags '-static' \
                 -X main.version=${VERSION} \
                 -X main.buildDate=${BUILD_DATE} \
                 -X main.gitCommit=${VCS_REF} \
                 -X main.platform=${TARGETPLATFORM} \
                 -buildid=''" \
        -tags="netgo osusergo static_build" \
        -o /build/service \
        $CMD_PATH && \
    echo "Build complete: $(ls -la /build/service)" && test -x /build/service && echo "Binary verification: $(stat -c '%n: size=%s, mode=%a' /build/service)" && \
    echo "Binary size: $(du -h /build/service | cut -f1)"

# Verify binary is statically linked
RUN ls -la /build/service && \
    test -x /build/service && \
    echo "Binary verification: $(stat -c '%n: size=%s, mode=%a' /build/service)" | grep -E "(statically linked|static)" || \
    (echo "Warning: Binary may not be fully static" && exit 0)

# =============================================================================
# STAGE: Binary Optimizer (Platform-Specific)
# =============================================================================
FROM --platform=$TARGETPLATFORM alpine:${ALPINE_VERSION} AS optimizer

ARG TARGETARCH
ARG TARGETVARIANT

# Install optimization tools
RUN apk add --no-cache binutils && \
    case "$TARGETARCH" in \
        "amd64") \
            apk add --no-cache upx && echo "UPX available for amd64" \
            ;; \
        "arm64") \
            echo "UPX not recommended for arm64" \
            ;; \
        "arm") \
            echo "UPX not recommended for arm" \
            ;; \
    esac

COPY --from=go-cross-builder /build/service /tmp/service

# Optimize binary based on architecture (skip strip for static Go binaries)
RUN case "$TARGETARCH" in \
        "amd64") \
            if command -v upx >/dev/null 2>&1; then \
                upx --best --lzma /tmp/service 2>/dev/null || echo "UPX compression failed or unavailable, continuing..."; \
            fi \
            ;; \
        *) \
            echo "Skipping UPX compression for $TARGETARCH - not recommended" \
            ;; \
    esac && \
    echo "Final binary size: $(du -h /tmp/service | cut -f1)"

# =============================================================================
# STAGE: Python Cross-Platform Builder
# =============================================================================
FROM --platform=$BUILDPLATFORM python:${PYTHON_VERSION}-slim AS python-cross-builder

ARG TARGETPLATFORM
ARG TARGETARCH

# Install build dependencies with security hardening
RUN set -eux; \
    export DEBIAN_FRONTEND=noninteractive; \
    apt-get update; \
    apt-get upgrade -y; \
    apt-get install -y --no-install-recommends \
        gcc=4:12.2.0-3ubuntu1 \
        python3-dev=3.12.3-0ubuntu2 \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/* /usr/share/man/* \
    && find / -xdev -type f -perm +6000 -delete 2>/dev/null || true

# Create non-root user
RUN groupadd -g 65532 nonroot && \
    useradd -u 65532 -g nonroot -s /bin/false -m nonroot

WORKDIR /app

# Copy and install requirements
COPY requirements-rag.txt ./
RUN pip install --user --no-cache-dir --no-compile \
    --platform ${TARGETPLATFORM} \
    -r requirements-rag.txt 2>/dev/null || \
    pip install --user --no-cache-dir --no-compile -r requirements-rag.txt

# Copy application
COPY --chown=nonroot:nonroot rag-python/ ./

USER nonroot

# Pre-compile Python bytecode
RUN python -m compileall -b . && \
    find . -name "*.py" -delete && \
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# =============================================================================
# STAGE: Go Runtime (Multi-Arch Distroless)
# =============================================================================
FROM --platform=$TARGETPLATFORM gcr.io/distroless/static:${DISTROLESS_VERSION} AS go-runtime

ARG TARGETPLATFORM
ARG TARGETARCH
ARG TARGETVARIANT
ARG SERVICE
ARG VERSION=v2.0.0
ARG BUILD_DATE
ARG VCS_REF

# Copy certificates and timezone data from stage with tzdata preserved
# Use go-cross-deps stage where tzdata wasn't removed
COPY --from=go-cross-deps /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=go-cross-builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy optimized binary
COPY --from=optimizer --chmod=555 /tmp/service /service

# Multi-architecture labels
LABEL org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.title="Nephoran ${SERVICE}" \
      org.opencontainers.image.description="Multi-arch ${SERVICE} service" \
      org.opencontainers.image.vendor="Nephoran" \
      org.opencontainers.image.source="https://github.com/thc1006/nephoran-intent-operator" \
      service.name="${SERVICE}" \
      build.platform="${TARGETPLATFORM}" \
      build.architecture="${TARGETARCH}" \
      build.variant="${TARGETVARIANT}" \
      multi-arch="true"

# Non-root user
USER 65532:65532

# Environment with architecture-specific tuning
ENV GOGC=100 \
    TZ=UTC \
    GOMEMLIMIT=512MiB

# Enhanced security-focused health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=15s --retries=3 \
    CMD ["/service", "--health-check", "--secure"]

# Additional multi-arch security hardening
RUN set -eux; \
    # Remove setuid/setgid binaries \
    find /usr -type f \( -perm -4000 -o -perm -2000 \) -delete 2>/dev/null || true; \
    # Remove world-writable files \
    find /usr -type f -perm -002 -delete 2>/dev/null || true; \
    # Secure runtime directories \
    mkdir -p /tmp /var/run; \
    chmod 755 /tmp /var/run; \
    # Verify service binary \
    [ -f /service ] && chmod 555 /service

# Service ports
EXPOSE 8080 8081 8082

ENTRYPOINT ["/service"]

# =============================================================================
# STAGE: Python Runtime (Multi-Arch Distroless)
# =============================================================================
FROM --platform=$TARGETPLATFORM gcr.io/distroless/python3-debian12:${DISTROLESS_VERSION} AS python-runtime

ARG TARGETPLATFORM
ARG TARGETARCH
ARG VERSION=v2.0.0
ARG BUILD_DATE
ARG VCS_REF

# Copy Python packages and application
COPY --from=python-cross-builder --chown=nonroot:nonroot /home/nonroot/.local /home/nonroot/.local
COPY --from=python-cross-builder --chown=nonroot:nonroot /app /app

# Multi-architecture labels
LABEL org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.title="Nephoran RAG API" \
      org.opencontainers.image.description="Multi-arch RAG service" \
      service.name="rag-api" \
      build.platform="${TARGETPLATFORM}" \
      build.architecture="${TARGETARCH}" \
      multi-arch="true"

# Environment
ENV PYTHONPATH=/home/nonroot/.local/lib/python3.11/site-packages:/app \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PORT=5001

USER nonroot
WORKDIR /app

EXPOSE 5001

ENTRYPOINT ["python", "-O"]
CMD ["api.pyc"]

# =============================================================================
# STAGE: Final Runtime Selection
# =============================================================================
FROM go-runtime AS final-go
FROM python-runtime AS final-python

FROM final-${SERVICE_TYPE} AS final
