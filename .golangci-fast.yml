# Comprehensive golangci-lint configuration for 2025
# Optimized for Kubernetes operators with Go 1.24+ and O-RAN telecom domain
# Compatible with golangci-lint v2.0+ (migration from v1 format completed)
# Balances development speed with comprehensive code quality

run:
  timeout: 10m
  issues-exit-code: 1
  tests: true  # Include test files for comprehensive analysis
  go: "1.24"
  
  # Optimized concurrency for CI/CD environments
  concurrency: 6  # Balanced for modern CI systems
  
  # Skip directories that don't contain source code
  skip-dirs:
    - vendor
    - testdata
    - third_party
    - .git
    - bin
    - out
    - tmp
    - temp
    - .cache
    - test-results
    - coverage
    - artifacts
    - node_modules
    - deployments/base  # Skip Kustomize base files
    - config/samples    # Skip sample YAML files
    
  # Skip generated and external files
  skip-files:
    - '.*\.pb\.go$'                    # Protocol buffer generated files
    - '.*_generated\.go$'              # Generated files
    - '.*_gen\.go$'                    # Generated files
    - 'zz_generated\..*\.go$'          # Kubebuilder generated files
    - '.*deepcopy.*\.go$'              # Kubernetes deepcopy files
    - 'mock_.*\.go$'                   # Mock files
    - '.*_mock\.go$'                   # Mock files
    - '.*\.mock\.go$'                  # Mock files
    - '.*fake.*\.go$'                  # Fake client files
    - 'vendor/.*'                      # Vendored dependencies
    - 'hack/testtools/envtest_.*\.go$' # Test environment setup
    
  modules-download-mode: readonly
  allow-parallel-runners: true

# Professional output format
output:
  formats:
    colored-line-number: stdout
    sarif: golangci-lint-report.sarif  # For security scanning
  print-issued-lines: true
  print-linter-name: true
  sort-results: true
  uniq-by-line: true
  show-stats: true

# Optimized caching
cache:
  enabled: true
  build-cache: true

# Comprehensive linter configuration
linters:
  default: standard  # v2 format: use standard linters as base
  enable:
    # Code quality
    - revive           # Fast replacement for golint
    - stylecheck       # Style checks
    - unconvert        # Unnecessary type conversions  
    - unparam          # Unused function parameters
    - unused           # Unused code detection
    - whitespace       # Whitespace errors
    - wsl              # Whitespace linter
    - cyclop           # Cyclomatic complexity
    - funlen           # Function length
    - nestif           # Deeply nested if statements
    - gocognit         # Cognitive complexity
    - maintidx         # Maintainability index
    
    # Security (critical for Kubernetes operators)
    - gosec            # Security vulnerabilities
    - bidichk          # Dangerous unicode characters
    - bodyclose        # HTTP response body closing
    - rowserrcheck     # SQL rows.Err() checking
    - sqlclosecheck    # SQL Close() method checking
    
    # Performance
    - prealloc         # Slice preallocation
    - gocritic         # Various checks including performance
    - makezero         # Slice initialization
    - sloglint         # Structured logging best practices
    
    # Kubernetes & Context specific
    - contextcheck     # Non-inherited context usage
    - containedctx     # Context in struct fields (anti-pattern)
    - nolintlint       # Nolint directive usage
    - exportloopref    # Loop variable capture issues
    - copyloopvar      # Loop variable copying (Go 1.22+)
    
    # Error handling (crucial for operators)
    - errchkjson       # JSON error handling
    - wrapcheck        # Error wrapping
    - errorlint        # Error handling patterns
    
    # Code organization
    - depguard         # Package import restrictions
    - grouper          # Grouping of declarations
    - importas         # Import naming consistency
    - decorder         # Declaration ordering
    
    # Documentation
    - godot            # Comments end with period
    - misspell         # Spelling errors
    
    # Go 1.24+ specific
    - intrange         # Integer range loops
    - testifylint      # Testify best practices
    - tenv             # Testing environment variables
    - testpackage      # Separate _test packages
    
  disable:
    - gci              # Use gofumpt for import organization
    - gofmt            # Use gofumpt instead
    - goimports        # Use gofumpt instead
    - forbidigo        # Too restrictive for operators
    - exhaustruct      # Too verbose for Kubernetes types
    - varnamelen       # Too restrictive for short variable names
    - ireturn          # Conflicts with Kubernetes client patterns
    - tagliatelle      # JSON tags handled by Kubernetes conventions

# Detailed linter settings
linters-settings:
  # Core Go tools
  govet:
    enable-all: true
    disable:
      - fieldalignment  # Too noisy for Kubernetes types
      - shadow         # Can be overly strict
    settings:
      shadow:
        strict: false
        
  staticcheck:
    checks: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021"]
    
  # Security configuration
  gosec:
    severity: medium
    confidence: medium
    excludes:
      - G104  # Unhandled errors (errcheck handles this)
      - G204  # Subprocess launching (needed for kubectl/porch operations)
      - G304  # File path provided as taint input (needed for config files)
    includes:
      - G101  # Look for hardcoded credentials
      - G102  # Bind to all interfaces
      - G103  # Audit the use of unsafe block
      - G201  # SQL query construction using format string
      - G202  # SQL query construction using string concatenation
      - G301  # Poor file permissions used when creating a directory
      - G302  # Poor file permissions used with chmod
      - G401  # Detect the usage of DES, RC4, MD5 or SHA1
      - G501  # Import blocklist: crypto/md5
      - G502  # Import blocklist: crypto/des
      - G503  # Import blocklist: crypto/rc4
      - G504  # Import blocklist: net/http/cgi
      - G505  # Import blocklist: crypto/sha1
      
  # Error handling
  errcheck:
    check-type-assertions: true
    check-blank: true
    exclude-functions:
      - '(*database/sql.Rows).Close'
      - '(*database/sql.DB).Close'
      - 'fmt.Print*'
      - 'fmt.Fprint*'
      - (*os.File).Close
      
  wrapcheck:
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(
    ignorePackageGlobs:
      - encoding/*
      - github.com/pkg/errors
      
  # Performance and code quality
  cyclop:
    max-complexity: 15
    skip-tests: true
    
  funlen:
    lines: 80
    statements: 40
    ignore-comments: true
    
  gocognit:
    min-complexity: 20
    
  nestif:
    min-complexity: 5
    
  # Kubernetes and context specific
  contextcheck:
    check-shadowing: true
    
  containedctx:
    check-pointers: true
    
  depguard:
    rules:
      main:
        deny:
          - pkg: "github.com/pkg/errors"
            desc: "Use standard library errors package with fmt.Errorf for Go 1.13+ error wrapping"
          - pkg: "github.com/sirupsen/logrus"
            desc: "Use slog from standard library or controller-runtime logging"
        allow:
          - $gostd
          - k8s.io
          - sigs.k8s.io
          - github.com/nephio-project
          - github.com/google
          - cloud.google.com
          - github.com/aws
          - github.com/Azure
          - github.com/stretchr/testify
          - github.com/onsi/ginkgo
          - github.com/onsi/gomega
          
  # Code style
  revive:
    severity: warning
    confidence: 0.8
    rules:
      - name: blank-imports
      - name: context-as-argument
      - name: context-keys-type
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      - name: exported
      - name: if-return
      - name: increment-decrement
      - name: var-naming
      - name: var-declaration
      - name: package-comments
      - name: range
      - name: receiver-naming
      - name: time-naming
      - name: unexported-return
      - name: indent-error-flow
      - name: errorf
      - name: empty-block
      - name: superfluous-else
      - name: unused-parameter
      - name: unreachable-code
      - name: redefines-builtin-id
        
  stylecheck:
    checks: ["all", "-ST1000", "-ST1003"]
    
  # Import organization
  gofumpt:
    extra-rules: true
    lang-version: "1.24"
    module-path: github.com/nephio-project/nephoran-intent-operator
    
  # Documentation
  godot:
    scope: declarations
    exclude:
      - "^fixme:"
      - "^todo:"
    capital: false
    
  misspell:
    locale: US
    ignore-words:
      - cancelled  # British spelling but common in tech
      - marshalling
      - signalling
      - telecom
      - telco
      - oran
      - nephio
      - kubernetes
      - k8s
      
  # Testing
  testifylint:
    enable-all: true
    disable:
      - go-require  # Allow testify/require in test files
      
  tenv:
    all: true

# Issue handling and exclusions
issues:
  max-issues-per-linter: 100
  max-same-issues: 10
  
  # Enable auto-fixing for supported linters
  fix: true
  
  # Include new issues only for PR checks
  new: false
  new-from-rev: ""
  
  # Performance optimization
  exclude-case-sensitive: false
  exclude-use-default: true
  
  # File-specific exclusions
  exclude-files:
    - 'cmd/.*test.*\.go$'  # Exclude test binaries
    
  exclude-rules:
    # Test files exclusions
    - path: '_test\.go'
      linters:
        - gosec
        - funlen
        - maintidx
        - cyclop
        - wrapcheck
        - containedctx
        - dupl
        
    # Main files exclusions
    - path: 'cmd/.*/main\.go'
      linters:
        - wrapcheck  # Main files often have unwrapped errors for CLI output
        - forbidigo  # Main files may need fmt.Print for CLI output
        
    # Generated files (belt and suspenders approach)
    - path: '(.*\.pb\.go|.*_generated\.go|.*_gen\.go|zz_generated.*\.go)'
      linters:
        - all
        
    # Webhook files (allow complex validation logic)
    - path: '.*webhook.*\.go'
      linters:
        - cyclop
        - funlen
        - gocognit
        
    # Controller files (allow complex reconciliation logic)
    - path: '.*controller.*\.go'
      linters:
        - cyclop
        - funlen
        - gocognit
        
    # API types (Kubernetes conventions)
    - path: 'api/.*/.*_types\.go'
      linters:
        - revive
        - stylecheck
        - godot  # API documentation has different conventions
        
    # Example and demo files
    - path: '(examples|demo)/.*\.go'
      linters:
        - gosec
        - errcheck
        - wrapcheck
        
    # Legacy or external integration code
    - path: 'internal/.*/(a1sim|e2sim|fcaps|o1|ves)/.*\.go'
      linters:
        - stylecheck
        - revive
        - godot
        
    # Build constraint files
    - path: 'build_constraints\.go'
      linters:
        - all
        
    # Allow longer lines in specific cases
    - linters:
        - lll
      source: "^//\\s*(\\+kubebuilder:|\\+k8s:|go:generate)"
      
  # Exclude specific error patterns
  exclude:
    # Kubernetes client-go patterns
    - "should not use dot imports"
    - "should have comment or be unexported"
    - "comment on exported .* should be of the form"
    - "exported .* should have comment or be unexported"
    
    # O-RAN specific terminology
    - "misspell: `oran` is a misspelling of `orange`"
    - "misspell: `telco` is a misspelling"
    - "misspell: `nephio` is a misspelling"

# Severity configuration  
severity:
  default-severity: error
  case-sensitive: true
  rules:
    - linters:
        - godot
        - misspell
        - revive
      severity: warning
    - linters:
        - gosec
        - errcheck
        - staticcheck
        - govet
      severity: error
