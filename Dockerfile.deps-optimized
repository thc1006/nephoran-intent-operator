# =============================================================================
# OPTIMIZED DEPENDENCY RESOLUTION SECTION FOR NEPHORAN DOCKERFILE
# =============================================================================
# This section replaces the original go-deps stage (lines 59-116) with
# enhanced reliability and fallback mechanisms for CI/CD environments.
# 
# Key improvements:
# - Multiple proxy fallbacks with health checks
# - Exponential backoff retry logic
# - Better cache invalidation handling
# - Network resilience patterns
# - Detailed error diagnostics
# =============================================================================

FROM --platform=$BUILDPLATFORM golang:${GO_VERSION}-alpine AS go-deps

# Install minimal build dependencies with security updates (2025 hardened)
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
    set -eux; \
    apk update && apk upgrade --no-cache; \
    apk add --no-cache --virtual .build-deps \
        git \
        ca-certificates \
        curl \
        gnupg \
        bash \
        coreutils \
        findutils \
    && apk add --no-cache \
        tzdata \
    && rm -rf /tmp/* /var/tmp/* \
    && find / -xdev -type f -perm +6000 -delete 2>/dev/null || true \
    && find / -xdev -type f -perm /2000 -delete 2>/dev/null || true

# Create non-root build user with security hardening
RUN addgroup -g 65532 -S nonroot && \
    adduser -u 65532 -S nonroot -G nonroot -s /sbin/nologin && \
    mkdir -p /home/nonroot && \
    chown -R nonroot:nonroot /home/nonroot

WORKDIR /workspace
COPY go.mod go.sum ./
COPY .goproxy-config ./

# Enhanced Go environment configuration with multiple proxy fallbacks
ENV GOCACHE=/tmp/.cache/go-build \
    GOMODCACHE=/tmp/.cache/go-mod \
    GOPROXY=https://proxy.golang.org,https://goproxy.cn,https://goproxy.io,direct \
    GOSUMDB=sum.golang.org \
    GOPRIVATE=github.com/thc1006/*,github.com/nephoran/* \
    GONOPROXY="" \
    GONOSUMDB="" \
    GO111MODULE=on \
    CGO_ENABLED=0 \
    GOMAXPROCS=4 \
    GOGC=100

# Create cache directories with proper permissions and ownership
RUN mkdir -p /tmp/.cache/go-build /tmp/.cache/go-mod && \
    chmod 755 /tmp/.cache/go-build /tmp/.cache/go-mod && \
    chown -R nonroot:nonroot /tmp/.cache

# Copy our resilient dependency download script
COPY scripts/go-deps-resilient.sh /usr/local/bin/go-deps-resilient.sh
RUN chmod +x /usr/local/bin/go-deps-resilient.sh

# Download dependencies with enhanced reliability and BuildKit cache mounts
RUN --mount=type=cache,target=/tmp/.cache/go-mod,sharing=locked \
    --mount=type=cache,target=/tmp/.cache/go-build,sharing=locked \
    set -eux; \
    # Ensure cache directories are writable
    chmod 755 /tmp/.cache/go-mod /tmp/.cache/go-build; \
    chown $(id -u):$(id -g) /tmp/.cache/go-mod /tmp/.cache/go-build 2>/dev/null || true; \
    \
    # Test network connectivity before starting downloads
    echo "Testing network connectivity..."; \
    timeout 10 ping -c 1 8.8.8.8 || echo "Warning: Network connectivity test failed"; \
    timeout 10 curl -sSf https://proxy.golang.org >/dev/null || echo "Warning: Primary proxy not accessible"; \
    \
    # Load proxy configuration
    if [ -f .goproxy-config ]; then \
        echo "Loading Go proxy configuration..."; \
        set -a; source .goproxy-config; set +a; \
    fi; \
    \
    # Execute resilient download with our enhanced script
    echo "Starting resilient Go module download..."; \
    export CI=true; \
    export WARM_CACHE=true; \
    /usr/local/bin/go-deps-resilient.sh || { \
        echo "Resilient download script failed, falling back to basic retry logic"; \
        \
        # Fallback: Basic retry with multiple strategies
        for attempt in 1 2 3 4 5; do \
            echo "Fallback attempt $attempt/5"; \
            \
            # Strategy selection based on attempt
            case $attempt in \
                1) GOPROXY=https://proxy.golang.org,direct go mod download -x && break ;; \
                2) GOPROXY=https://goproxy.cn,direct go mod download -x && break ;; \
                3) GOPROXY=https://goproxy.io,direct go mod download -x && break ;; \
                4) go clean -modcache && GOPROXY=https://proxy.golang.org,direct go mod download -x && break ;; \
                5) GOPROXY=direct go mod download -v && break ;; \
            esac; \
            \
            if [ $attempt -lt 5 ]; then \
                delay=$((attempt * 10)); \
                echo "Waiting ${delay}s before retry..."; \
                sleep $delay; \
            fi; \
        done; \
    }; \
    \
    # Verify download success
    echo "Verifying downloaded modules..."; \
    go mod verify || { \
        echo "Module verification failed, attempting repair..."; \
        go clean -modcache; \
        GOPROXY=direct go mod download; \
        go mod verify; \
    }; \
    \
    # Generate dependency report for debugging
    echo "=== Dependency Download Summary ==="; \
    echo "Go version: $(go version)"; \
    echo "Module cache: ${GOMODCACHE}"; \
    echo "Build cache: ${GOCACHE}"; \
    echo "Total modules: $(go list -m all | wc -l)"; \
    \
    # Display cache sizes for monitoring
    if command -v du >/dev/null 2>&1; then \
        echo "Module cache size: $(du -sh /tmp/.cache/go-mod 2>/dev/null | cut -f1 || echo 'unknown')"; \
        echo "Build cache size: $(du -sh /tmp/.cache/go-build 2>/dev/null | cut -f1 || echo 'unknown')"; \
    fi; \
    \
    # Final verification
    echo "Dependencies downloaded successfully!"