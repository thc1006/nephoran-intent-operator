# =============================================================================
# Consolidated Development Dockerfile for Nephoran Intent Operator
# =============================================================================
# Includes debugging tools, hot-reload, and development utilities
# NOT for production use - contains development and debugging tools
#
# Build examples:
#   docker build -f Dockerfile.dev --build-arg SERVICE=llm-processor -t nephoran/llm-processor:dev .
#   docker build -f Dockerfile.dev --build-arg SERVICE=rag-api -t nephoran/rag-api:dev .
#
# Run with hot-reload:
#   docker run -v $(pwd):/workspace -p 8080:8080 nephoran/llm-processor:dev
# =============================================================================

ARG GO_VERSION=1.24
ARG PYTHON_VERSION=3.11
ARG ALPINE_VERSION=3.22
ARG SERVICE_TYPE=go

# =============================================================================
# STAGE: GO Development Environment
# =============================================================================
FROM golang:${GO_VERSION}-alpine AS go-dev

# Install development and debugging tools
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    curl \
    wget \
    bash \
    make \
    gcc \
    musl-dev \
    delve \
    jq \
    vim \
    && rm -rf /var/cache/apk/*

# Install Go development tools
RUN go install github.com/air-verse/air@latest && \
    go install github.com/go-delve/delve/cmd/dlv@latest && \
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest && \
    go install github.com/onsi/ginkgo/v2/ginkgo@latest && \
    go install golang.org/x/tools/gopls@latest && \
    go install github.com/ramya-rao-a/go-outline@latest && \
    go install github.com/uudashr/gopkgs/v2/cmd/gopkgs@latest

WORKDIR /workspace

# Copy dependency files
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Create air configuration for hot reload
RUN cat > .air.toml << 'EOF'
root = "."
tmp_dir = "tmp"

[build]
  cmd = "go build -gcflags='all=-N -l' -o ./tmp/main {{.BuildArgs}}"
  bin = "tmp/main"
  full_bin = "dlv exec ./tmp/main --listen=:40000 --headless=true --api-version=2 --accept-multiclient"
  delay = 1000
  exclude_dir = ["tmp", "vendor", ".git", "scripts", "deployments"]
  exclude_regex = ["_test.go"]
  exclude_unchanged = false
  follow_symlink = false
  include_ext = ["go", "yaml", "yml", "toml"]
  kill_delay = "0s"
  log = "build-errors.log"
  send_interrupt = false
  stop_on_error = true

[color]
  app = ""
  build = "yellow"
  main = "magenta"
  runner = "green"
  watcher = "cyan"

[log]
  time = true

[misc]
  clean_on_exit = true
EOF

# Development environment variables
ENV GO_ENV=development \
    CGO_ENABLED=1 \
    GOOS=linux \
    LOG_LEVEL=debug \
    METRICS_ENABLED=true \
    DEBUG_ENABLED=true \
    HOT_RELOAD=true \
    DELVE_PORT=40000

# Create development script
RUN cat > /usr/local/bin/dev-entrypoint.sh << 'EOF'
#!/bin/bash
set -e

SERVICE=${SERVICE:-"llm-processor"}
echo "Starting development environment for: $SERVICE"

# Set build args based on service
case "$SERVICE" in
    "llm-processor")
        export BUILD_ARGS="./cmd/llm-processor/main.go"
        export PORT=8080
        ;;
    "nephio-bridge")
        export BUILD_ARGS="./cmd/nephio-bridge/main.go"
        export PORT=8081
        ;;
    "oran-adaptor")
        export BUILD_ARGS="./cmd/oran-adaptor/main.go"
        export PORT=8082
        ;;
    "manager"|"controller")
        export BUILD_ARGS="./main.go"
        export PORT=8080
        ;;
    *)
        echo "Unknown service: $SERVICE"
        exit 1
        ;;
esac

# Update air config with correct build args
sed -i "s|{{.BuildArgs}}|$BUILD_ARGS|g" .air.toml

echo "Port: $PORT"
echo "Debug port: $DELVE_PORT"
echo "Hot reload: enabled"
echo ""

# Start with air for hot reload or dlv for debugging
if [ "$DEBUG_MODE" = "true" ]; then
    echo "Starting in debug mode..."
    dlv debug $BUILD_ARGS --listen=:$DELVE_PORT --headless=true --api-version=2 --accept-multiclient
else
    echo "Starting with hot reload..."
    air -c .air.toml
fi
EOF

RUN chmod +x /usr/local/bin/dev-entrypoint.sh

# Expose service and debug ports
EXPOSE 8080 8081 8082 40000 5678

ENTRYPOINT ["/usr/local/bin/dev-entrypoint.sh"]

# =============================================================================
# STAGE: Python Development Environment
# =============================================================================
FROM python:${PYTHON_VERSION}-slim AS python-dev

# Install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    wget \
    git \
    gcc \
    python3-dev \
    build-essential \
    vim \
    jq \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Python development tools
RUN pip install --no-cache-dir \
    debugpy \
    pytest \
    pytest-cov \
    pytest-asyncio \
    black \
    flake8 \
    mypy \
    watchdog \
    flask-cors \
    ipython \
    ipdb

WORKDIR /app

# Copy requirements and install
COPY requirements-rag.txt ./
RUN pip install --no-cache-dir -r requirements-rag.txt

# Copy application
COPY rag-python/ ./

# Development environment
ENV FLASK_ENV=development \
    FLASK_DEBUG=1 \
    PYTHONPATH=/app \
    LOG_LEVEL=debug \
    DEBUG_ENABLED=true \
    HOT_RELOAD=true \
    PORT=5001 \
    DEBUGPY_PORT=5678

# Create development startup script
RUN cat > /usr/local/bin/dev-entrypoint.sh << 'EOF'
#!/bin/bash
set -e

echo "Starting Python development environment"
echo "Port: $PORT"
echo "Debug port: $DEBUGPY_PORT"
echo "Flask environment: $FLASK_ENV"
echo ""

# Install any new requirements
if [ -f "/app/requirements-rag.txt" ]; then
    pip install -q -r /app/requirements-rag.txt
fi

# Start with debugpy or watchdog based on mode
if [ "$DEBUG_MODE" = "true" ]; then
    echo "Starting with debugpy..."
    python -m debugpy --listen 0.0.0.0:$DEBUGPY_PORT --wait-for-client api.py
else
    echo "Starting with hot reload..."
    watchmedo auto-restart --recursive --patterns="*.py" --ignore-patterns="*test*.py" python api.py
fi
EOF

RUN chmod +x /usr/local/bin/dev-entrypoint.sh

# Expose application and debug ports
EXPOSE 5001 5678

ENTRYPOINT ["/usr/local/bin/dev-entrypoint.sh"]

# =============================================================================
# STAGE: Development Tools Container
# =============================================================================
FROM alpine:${ALPINE_VERSION} AS dev-tools

# Install comprehensive development utilities
RUN apk add --no-cache \
    bash \
    curl \
    wget \
    git \
    jq \
    yq \
    docker-cli \
    kubectl \
    helm \
    make \
    vim \
    tmux \
    htop \
    tcpdump \
    netcat-openbsd \
    && rm -rf /var/cache/apk/*

# Install k9s for Kubernetes management
RUN wget -q https://github.com/derailed/k9s/releases/latest/download/k9s_Linux_amd64.tar.gz && \
    tar -xzf k9s_Linux_amd64.tar.gz && \
    mv k9s /usr/local/bin/ && \
    rm k9s_Linux_amd64.tar.gz

# Create utility script
RUN cat > /usr/local/bin/dev-utils << 'EOF'
#!/bin/bash
echo "Nephoran Development Tools Container"
echo "====================================="
echo "Available tools:"
echo "  kubectl, helm, docker   - Container orchestration"
echo "  k9s                     - Kubernetes TUI"
echo "  curl, wget, jq, yq      - Data manipulation"
echo "  vim, tmux               - Editors and terminal"
echo "  htop, tcpdump, netcat   - System monitoring"
echo ""
echo "Run 'bash' to start interactive shell"
EOF

RUN chmod +x /usr/local/bin/dev-utils

WORKDIR /workspace

ENTRYPOINT ["/usr/local/bin/dev-utils"]
CMD ["bash"]

# =============================================================================
# STAGE: Final Stage Selection
# =============================================================================
FROM ${SERVICE_TYPE}-dev AS final

# Common development labels
LABEL environment="development" \
      debug.enabled="true" \
      hot-reload="supported" \
      org.opencontainers.image.title="Nephoran Development Container" \
      org.opencontainers.image.description="Development build with debugging tools"