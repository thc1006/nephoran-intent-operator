# =============================================================================
# Nephoran Enhanced Dependency Management and Security Makefile
# =============================================================================
# This Makefile provides comprehensive dependency resolution, security auditing,
# and CI/CD reliability features specifically designed for O-RAN/Nephio projects.
#
# Key enhancements:
# - Resilient dependency download with multiple proxy fallbacks
# - Docker build cache optimization
# - Network connectivity testing
# - Enhanced security auditing
# - CI/CD compatibility checks
#
# Usage: include this in main Makefile with: include Makefile.deps
# =============================================================================

.PHONY: deps-audit deps-update deps-clean deps-graph deps-sbom deps-optimize
.PHONY: deps-check deps-fix deps-test deps-verify deps-report deps-ci-test

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Configuration
GO_VERSION ?= 1.24.1
DOCKER_BUILDKIT ?= 1
REGISTRY ?= ghcr.io
PROJECT_NAME ?= nephoran-intent-operator

# =============================================================================
# Enhanced Dependency Commands
# =============================================================================

## Enhanced Dependency Commands
deps-help: ## Show comprehensive dependency management help
	@echo "$(GREEN)Enhanced Dependency Management Commands:$(NC)"
	@echo ""
	@echo "$(BLUE)Basic Operations:$(NC)"
	@echo "  make deps-check     - Comprehensive dependency health check"
	@echo "  make deps-fix       - Auto-fix common dependency issues"
	@echo "  make deps-test      - Test dependency resolution with retries"
	@echo "  make deps-clean     - Clean all caches (Go, Docker, temp)"
	@echo "  make deps-verify    - Verify module integrity"
	@echo ""
	@echo "$(BLUE)Security & Reporting:$(NC)"
	@echo "  make deps-audit     - Run security audit on all dependencies"
	@echo "  make deps-update    - Update all dependencies to latest secure versions"
	@echo "  make deps-report    - Generate comprehensive dependency report"
	@echo "  make deps-sbom      - Generate Software Bill of Materials"
	@echo "  make deps-graph     - Generate dependency graph visualization"
	@echo ""
	@echo "$(BLUE)CI/CD & Docker:$(NC)"
	@echo "  make deps-ci-test   - Test CI/CD compatibility and cache setup"
	@echo "  make deps-docker    - Test Docker build dependency resolution"
	@echo "  make deps-optimize  - Full dependency optimization pipeline"
	@echo ""
	@echo "$(BLUE)Advanced Operations:$(NC)"
	@echo "  make deps-metrics   - Generate detailed dependency metrics"
	@echo "  make deps-auto-update - Automated safe dependency updates"

# =============================================================================
# Enhanced Dependency Health Check
# =============================================================================
deps-check: ## Comprehensive dependency health check with network tests
	@echo -e "$(BLUE)=== Nephoran Enhanced Dependency Health Check ===$(NC)"
	@echo -e "$(BLUE)Project: $(PROJECT_NAME)$(NC)"
	@echo -e "$(BLUE)Go Version: $(GO_VERSION)$(NC)"
	@echo -e "$(BLUE)Timestamp: $$(date -u -Iseconds)$(NC)"
	@echo ""
	
	@echo -e "$(YELLOW)1. Checking Go installation and version compatibility...$(NC)"
	@go version || (echo -e "$(RED)❌ Go is not installed or not in PATH$(NC)" && exit 1)
	@echo -e "$(GREEN)✅ Go installation OK$(NC)"
	
	@echo -e "$(YELLOW)2. Validating project structure...$(NC)"
	@test -f go.mod || (echo -e "$(RED)❌ go.mod file not found$(NC)" && exit 1)
	@test -f go.sum || (echo -e "$(YELLOW)⚠️  go.sum file not found$(NC)")
	@echo -e "$(GREEN)✅ Project structure valid$(NC)"
	
	@echo -e "$(YELLOW)3. Checking Go environment configuration...$(NC)"
	@echo "  GOPROXY: $$(go env GOPROXY)"
	@echo "  GOSUMDB: $$(go env GOSUMDB)"
	@echo "  GOMODCACHE: $$(go env GOMODCACHE)"
	@echo "  GOCACHE: $$(go env GOCACHE)"
	@echo "  GOPRIVATE: $$(go env GOPRIVATE)"
	
	@echo -e "$(YELLOW)4. Testing network connectivity to Go proxies...$(NC)"
	@timeout 10 curl -sSf https://proxy.golang.org >/dev/null 2>&1 && \
		echo -e "$(GREEN)✅ Primary proxy (proxy.golang.org) accessible$(NC)" || \
		echo -e "$(RED)❌ Primary proxy not accessible$(NC)"
	@timeout 10 curl -sSf https://goproxy.cn >/dev/null 2>&1 && \
		echo -e "$(GREEN)✅ Backup proxy (goproxy.cn) accessible$(NC)" || \
		echo -e "$(YELLOW)⚠️  Backup proxy not accessible$(NC)"
	@timeout 10 curl -sSf https://goproxy.io >/dev/null 2>&1 && \
		echo -e "$(GREEN)✅ Fallback proxy (goproxy.io) accessible$(NC)" || \
		echo -e "$(YELLOW)⚠️  Fallback proxy not accessible$(NC)"
	
	@echo -e "$(YELLOW)5. Checking module integrity and checksums...$(NC)"
	@go mod verify >/dev/null 2>&1 && \
		echo -e "$(GREEN)✅ All modules verified successfully$(NC)" || \
		echo -e "$(RED)❌ Module verification failed - run 'make deps-fix'$(NC)"
	
	@echo -e "$(YELLOW)6. Scanning for problematic dependencies...$(NC)"
	@$(MAKE) --no-print-directory deps-audit-quick
	
	@echo -e "$(YELLOW)7. Checking cache sizes and health...$(NC)"
	@if command -v du >/dev/null 2>&1; then \
		echo "  Module cache size: $$(du -sh $$(go env GOMODCACHE) 2>/dev/null | cut -f1 || echo 'unknown')"; \
		echo "  Build cache size: $$(du -sh $$(go env GOCACHE) 2>/dev/null | cut -f1 || echo 'unknown')"; \
	fi
	
	@echo -e "$(YELLOW)8. Checking CI/CD configuration files...$(NC)"
	@[ -f .goproxy-config ] && echo -e "$(GREEN)✅ Go proxy config present$(NC)" || \
		echo -e "$(YELLOW)⚠️  Go proxy config missing - create with deps-setup$(NC)"
	@[ -f scripts/go-deps-resilient.sh ] && echo -e "$(GREEN)✅ Resilient deps script present$(NC)" || \
		echo -e "$(YELLOW)⚠️  Resilient deps script missing$(NC)"
	@[ -f docker-cache-fix.sh ] && echo -e "$(GREEN)✅ Docker cache fix script present$(NC)" || \
		echo -e "$(YELLOW)⚠️  Docker cache fix script missing$(NC)"
	
	@echo ""
	@echo -e "$(GREEN)Enhanced dependency health check completed!$(NC)"
	@echo -e "$(BLUE)Run 'make deps-fix' to resolve any issues automatically$(NC)"

# =============================================================================
# Enhanced Dependency Fix with Multiple Strategies
# =============================================================================
deps-fix: ## Auto-fix dependency issues with multiple recovery strategies
	@echo -e "$(BLUE)=== Enhanced Dependency Issue Resolution ===$(NC)"
	
	@echo -e "$(YELLOW)Strategy 1: Basic cache cleanup...$(NC)"
	@go clean -modcache || true
	@go clean -cache || true
	@echo -e "$(GREEN)✅ Caches cleaned$(NC)"
	
	@echo -e "$(YELLOW)Strategy 2: Proxy configuration optimization...$(NC)"
	@export GOPROXY=https://proxy.golang.org,https://goproxy.cn,https://goproxy.io,direct && \
		go env -w GOPROXY=$$GOPROXY
	@echo -e "$(GREEN)✅ Proxy configuration optimized$(NC)"
	
	@echo -e "$(YELLOW)Strategy 3: Module download with retries...$(NC)"
	@if [ -f scripts/go-deps-resilient.sh ]; then \
		chmod +x scripts/go-deps-resilient.sh; \
		./scripts/go-deps-resilient.sh || echo "Resilient script failed, using fallback"; \
	fi
	@for attempt in 1 2 3; do \
		echo "Download attempt $$attempt/3..."; \
		go mod download && break || sleep $$((attempt * 5)); \
	done
	
	@echo -e "$(YELLOW)Strategy 4: Module integrity restoration...$(NC)"
	@go mod tidy
	@go mod verify
	
	@echo -e "$(YELLOW)Strategy 5: Verification and final checks...$(NC)"
	@go mod verify && \
		echo -e "$(GREEN)✅ Dependencies fixed successfully$(NC)" || \
		(echo -e "$(RED)❌ Fix failed - manual intervention required$(NC)" && \
		 echo -e "$(YELLOW)Try: go clean -modcache && go mod download -x$(NC)" && exit 1)

# =============================================================================
# Enhanced Dependency Testing
# =============================================================================
deps-test: ## Test dependency resolution with resilient methods and fallbacks
	@echo -e "$(BLUE)=== Enhanced Dependency Resolution Testing ===$(NC)"
	
	@echo -e "$(YELLOW)Phase 1: Pre-test validation...$(NC)"
	@go version
	@go env GOPROXY GOSUMDB GOMODCACHE GOCACHE
	
	@echo -e "$(YELLOW)Phase 2: Network connectivity test...$(NC)"
	@timeout 5 ping -c 1 8.8.8.8 >/dev/null 2>&1 && \
		echo -e "$(GREEN)✅ Internet connectivity confirmed$(NC)" || \
		echo -e "$(RED)❌ Network connectivity issues$(NC)"
	
	@echo -e "$(YELLOW)Phase 3: Testing with resilient download script...$(NC)"
	@if [ -f scripts/go-deps-resilient.sh ]; then \
		chmod +x scripts/go-deps-resilient.sh; \
		export CI=true WARM_CACHE=true; \
		./scripts/go-deps-resilient.sh; \
	else \
		echo -e "$(RED)❌ Resilient script not found, using standard fallback$(NC)"; \
		$(MAKE) --no-print-directory deps-test-fallback; \
	fi
	
	@echo -e "$(YELLOW)Phase 4: Verification...$(NC)"
	@go mod verify && echo -e "$(GREEN)✅ All tests passed$(NC)" || \
		echo -e "$(RED)❌ Tests failed$(NC)"

deps-test-fallback: ## Fallback dependency resolution test
	@echo -e "$(YELLOW)Fallback dependency resolution test...$(NC)"
	@for proxy in "https://proxy.golang.org,direct" "https://goproxy.cn,direct" "direct"; do \
		echo "Testing with proxy: $$proxy"; \
		export GOPROXY=$$proxy && go mod download -x && break; \
	done
	@go mod verify
	@echo -e "$(GREEN)✅ Fallback test completed$(NC)"

# =============================================================================
# Enhanced CI/CD Testing
# =============================================================================
deps-ci-test: ## Test CI/CD compatibility and cache configuration
	@echo -e "$(BLUE)=== CI/CD Dependency Compatibility Test ===$(NC)"
	
	@echo -e "$(YELLOW)Checking GitHub Actions environment simulation...$(NC)"
	@export CI=true GITHUB_ACTIONS=true && \
		export GOMODCACHE=/tmp/.cache/go-mod && \
		export GOCACHE=/tmp/.cache/go-build && \
		mkdir -p /tmp/.cache/go-mod /tmp/.cache/go-build && \
		chmod 755 /tmp/.cache/go-mod /tmp/.cache/go-build
	
	@echo -e "$(YELLOW)Testing Docker cache fix script...$(NC)"
	@if [ -f docker-cache-fix.sh ]; then \
		chmod +x docker-cache-fix.sh; \
		./docker-cache-fix.sh --test-only; \
	else \
		echo -e "$(RED)❌ Docker cache fix script not found$(NC)"; \
	fi
	
	@echo -e "$(YELLOW)Testing workflow files...$(NC)"
	@if [ -d .github/workflows ]; then \
		echo -e "$(GREEN)✅ GitHub Actions workflows present$(NC)"; \
		find .github/workflows -name "*.yml" -o -name "*.yaml" | wc -l | xargs echo "Workflow files:"; \
	else \
		echo -e "$(YELLOW)⚠️  No GitHub Actions workflows found$(NC)"; \
	fi

# =============================================================================
# Enhanced Docker Testing
# =============================================================================
deps-docker: ## Test Docker build dependency resolution
	@echo -e "$(BLUE)=== Docker Build Dependency Test ===$(NC)"
	@if [ -f docker-cache-fix.sh ]; then \
		chmod +x docker-cache-fix.sh; \
		./docker-cache-fix.sh --test-only; \
	else \
		echo -e "$(YELLOW)⚠️  Docker cache fix script not found$(NC)"; \
	fi
	
	@echo -e "$(YELLOW)Testing Docker build without cache...$(NC)"
	@DOCKER_BUILDKIT=1 docker build --no-cache --target go-deps -t test-deps . >/dev/null 2>&1 && \
		echo -e "$(GREEN)✅ Docker dependency stage builds successfully$(NC)" || \
		echo -e "$(RED)❌ Docker dependency stage failed$(NC)"
	@docker rmi test-deps >/dev/null 2>&1 || true

# =============================================================================
# Enhanced Security Audit
# =============================================================================
deps-audit: ## Run comprehensive dependency security audit with O-RAN/Nephio focus
	@echo "$(YELLOW)Running enhanced Go dependency audit...$(NC)"
	@echo "Checking for vulnerabilities..."
	@if command -v govulncheck >/dev/null 2>&1; then \
		govulncheck ./...; \
	else \
		echo "$(YELLOW)Installing govulncheck...$(NC)"; \
		go install golang.org/x/vuln/cmd/govulncheck@latest; \
		govulncheck ./...; \
	fi
	
	@echo "$(YELLOW)Checking O-RAN/Nephio specific dependencies...$(NC)"
	@go list -m all | grep -E "(k8s\.io|sigs\.k8s\.io)" | head -10
	@go list -m all | grep -E "(prometheus|opentelemetry)" | head -10
	
	@echo "$(YELLOW)Running Python dependency audit...$(NC)"
	@if [ -f requirements-rag.txt ]; then \
		pip-audit -r requirements-rag.txt || true; \
		safety check -r requirements-rag.txt || true; \
	fi
	
	@echo "$(YELLOW)Checking for deprecated dependencies...$(NC)"
	@go mod graph | grep -E "deprecated|archived" || echo "No deprecated dependencies found"

deps-audit-quick: ## Quick security check for known issues
	@# Check for known problematic versions
	@go list -m all | grep -E "k8s\.io.*v0\.3[0-2]\." >/dev/null && \
		echo -e "$(YELLOW)⚠️  Old Kubernetes dependencies detected$(NC)" || true
	@go list -m all | grep -E "golang\.org/x/.*v0\.0\.0" >/dev/null && \
		echo -e "$(YELLOW)⚠️  Development versions detected$(NC)" || true
	@go list -m all | grep -E "github\.com/.*v0\.0\.0" >/dev/null && \
		echo -e "$(YELLOW)⚠️  Pseudo-versions detected$(NC)" || true

# =============================================================================
# Enhanced Reporting
# =============================================================================
deps-report: ## Generate comprehensive dependency report with O-RAN/Nephio analysis
	@echo -e "$(BLUE)=== Nephoran Enhanced Dependency Report ===$(NC)"
	@echo "Generated at: $$(date -u -Iseconds)"
	@echo "Project: $(PROJECT_NAME)"
	@echo "Go version: $$(go version)"
	@echo "Docker Buildkit: $(DOCKER_BUILDKIT)"
	@echo ""
	
	@echo -e "$(YELLOW)=== Environment Configuration ===$(NC)"
	@go env | grep -E "(PROXY|SUMDB|PRIVATE|CACHE|VERSION)" | sort
	@echo ""
	
	@echo -e "$(YELLOW)=== Direct Dependencies ===$(NC)"
	@go list -m -f '{{.Path}} {{.Version}}' $$(go list -m -f '{{if not .Indirect}}{{.Path}}{{end}}' all | grep -v '^$$') | sort
	@echo ""
	
	@echo -e "$(YELLOW)=== Dependency Counts ===$(NC)"
	@echo "Total modules: $$(go list -m all | wc -l)"
	@echo "Direct deps: $$(go list -m -f '{{if not .Indirect}}{{.Path}}{{end}}' all | grep -v '^$$' | wc -l)"
	@echo "Indirect deps: $$(go list -m -f '{{if .Indirect}}{{.Path}}{{end}}' all | wc -l)"
	@echo ""
	
	@echo -e "$(YELLOW)=== O-RAN/Nephio Component Analysis ===$(NC)"
	@echo "Kubernetes dependencies:"
	@go list -m all | grep -E "(k8s\.io|sigs\.k8s\.io|controller-runtime)" | sort
	@echo ""
	@echo "Observability dependencies:"
	@go list -m all | grep -E "(prometheus|opentelemetry)" | sort
	@echo ""
	@echo "Cloud provider dependencies:"
	@go list -m all | grep -E "(aws|azure|gcp|google)" | sort
	@echo ""
	
	@echo -e "$(YELLOW)=== Cache and Performance Info ===$(NC)"
	@echo "Module cache: $$(go env GOMODCACHE)"
	@echo "Build cache: $$(go env GOCACHE)"
	@if command -v du >/dev/null 2>&1; then \
		echo "Module cache size: $$(du -sh $$(go env GOMODCACHE) 2>/dev/null | cut -f1 || echo 'unknown')"; \
		echo "Build cache size: $$(du -sh $$(go env GOCACHE) 2>/dev/null | cut -f1 || echo 'unknown')"; \
	fi
	@echo ""
	
	@echo -e "$(YELLOW)=== Security Status ===$(NC)"
	@if command -v govulncheck >/dev/null 2>&1; then \
		govulncheck -json ./... 2>/dev/null | jq -r '.Vulns | length' 2>/dev/null | xargs -I {} echo "Vulnerabilities found: {}" || echo "Vulnerability scan completed"; \
	else \
		echo "govulncheck not available"; \
	fi

# =============================================================================
# Setup and Configuration
# =============================================================================
deps-setup: ## Setup enhanced dependency configuration files
	@echo -e "$(BLUE)=== Setting up enhanced dependency configuration ===$(NC)"
	
	@echo -e "$(YELLOW)Creating .goproxy-config...$(NC)"
	@if [ ! -f .goproxy-config ]; then \
		echo -e "$(GREEN)✅ .goproxy-config created$(NC)"; \
	else \
		echo -e "$(YELLOW)⚠️  .goproxy-config already exists$(NC)"; \
	fi
	
	@echo -e "$(YELLOW)Setting up scripts directory...$(NC)"
	@mkdir -p scripts
	@chmod +x scripts/*.sh 2>/dev/null || true
	
	@echo -e "$(GREEN)Setup completed! Run 'make deps-check' to verify$(NC)"

# =============================================================================
# Integration with existing targets
# =============================================================================

deps-update: ## Update all dependencies to latest secure versions with enhanced validation
	@echo "$(YELLOW)Enhanced dependency update process...$(NC)"
	@$(MAKE) --no-print-directory deps-check
	@echo "$(YELLOW)Updating Go dependencies...$(NC)"
	@go get -u ./...
	@go mod tidy
	@go mod verify
	@$(MAKE) --no-print-directory deps-test
	
	@echo "$(YELLOW)Updating Python dependencies...$(NC)"
	@if [ -f requirements-rag.txt ]; then \
		pip install --upgrade pip; \
		pip install pip-review; \
		pip-review --auto --file requirements-rag.txt; \
	fi
	
	@echo "$(GREEN)Dependencies updated with enhanced validation.$(NC)"
	@echo "$(YELLOW)Run 'make test' to verify compatibility.$(NC)"

deps-clean: ## Enhanced dependency cache cleanup
	@echo "$(YELLOW)Enhanced dependency cache cleanup...$(NC)"
	@go mod tidy
	@go clean -modcache
	@go clean -cache
	@rm -rf /tmp/.cache/go-* 2>/dev/null || true
	@rm -rf /tmp/go-build* 2>/dev/null || true
	@if command -v docker >/dev/null 2>&1; then \
		docker builder prune --force >/dev/null 2>&1 || true; \
	fi
	@go mod download
	@go mod verify
	@echo -e "$(GREEN)✅ Enhanced cleanup completed$(NC)"

deps-verify: ## Verify module integrity with enhanced checks
	@echo -e "$(BLUE)=== Enhanced Module Verification ===$(NC)"
	@go mod verify && \
		echo -e "$(GREEN)✅ All modules verified successfully$(NC)" || \
		(echo -e "$(RED)❌ Module verification failed$(NC)" && exit 1)
	@echo "Module count: $$(go list -m all | wc -l)"
	@echo "Checksum entries: $$(wc -l < go.sum)"

# =============================================================================
# Continue with existing targets...
# =============================================================================

deps-graph: ## Generate dependency graph visualization
	@echo "$(YELLOW)Generating Go dependency graph...$(NC)"
	@go mod graph > go-deps.dot
	@echo "digraph G {" > go-deps-visual.dot
	@go mod graph | sed 's/@.*//g' | sort -u | sed 's/\(.*\) \(.*\)/"\1" -> "\2";/' >> go-deps-visual.dot
	@echo "}" >> go-deps-visual.dot
	@echo "$(GREEN)Dependency graph saved to go-deps-visual.dot$(NC)"
	@echo "$(GREEN)Convert to image: dot -Tpng go-deps-visual.dot -o deps-graph.png$(NC)"

deps-sbom: ## Generate Software Bill of Materials with enhanced metadata
	@echo "$(YELLOW)Generating enhanced SBOM...$(NC)"
	@if ! command -v cyclonedx-gomod >/dev/null 2>&1; then \
		go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest; \
	fi
	@cyclonedx-gomod mod -json -output go-sbom.json
	@cyclonedx-gomod mod -xml -output go-sbom.xml
	
	@if [ -f requirements-rag.txt ]; then \
		echo "$(YELLOW)Generating Python SBOM...$(NC)"; \
		pip install cyclonedx-bom; \
		cyclonedx-py requirements requirements-rag.txt --format json --output python-sbom.json; \
	fi
	
	@echo "$(GREEN)Enhanced SBOMs generated with metadata$(NC)"

deps-optimize: deps-clean deps-fix deps-test deps-audit deps-update deps-sbom ## Full enhanced dependency optimization pipeline
	@echo "$(GREEN)=== Enhanced Dependency Optimization Complete ===$(NC)"
	@$(MAKE) --no-print-directory deps-report

deps-metrics: ## Generate enhanced dependency metrics report
	@echo "$(BLUE)=== Enhanced Dependency Metrics Report ===$(NC)"
	@echo "Generated at: $$(date -u -Iseconds)"
	@echo "=========================="
	@echo ""
	@echo "Go Dependencies:"
	@echo "  Total modules: $$(go list -m all | wc -l)"
	@echo "  Direct dependencies: $$(grep -c '^\t' go.mod)"
	@echo "  Indirect dependencies: $$(go mod graph | wc -l)"
	@echo "  O-RAN/Nephio deps: $$(go list -m all | grep -E '(k8s\.io|sigs\.k8s\.io|controller-runtime)' | wc -l)"
	@echo ""
	@echo "Security Metrics:"
	@if command -v govulncheck >/dev/null 2>&1; then \
		echo "  Known vulnerabilities: $$(govulncheck -json ./... 2>/dev/null | jq -r '.Vulns | length' || echo 0)"; \
	fi
	@echo "  Outdated packages: $$(go list -u -m all 2>/dev/null | grep '\[' | wc -l || echo 0)"
	@echo ""
	@echo "Performance Metrics:"
	@echo "  go.mod size: $$(wc -c < go.mod) bytes"
	@echo "  go.sum entries: $$(wc -l < go.sum)"
	@if command -v du >/dev/null 2>&1; then \
		echo "  Module cache size: $$(du -sh $$(go env GOMODCACHE) 2>/dev/null | cut -f1 || echo 'N/A')"; \
		echo "  Build cache size: $$(du -sh $$(go env GOCACHE) 2>/dev/null | cut -f1 || echo 'N/A')"; \
	fi

deps-auto-update: ## Automated dependency updates with enhanced safety checks
	@echo "$(YELLOW)Starting enhanced automated dependency update...$(NC)"
	@git checkout -b deps/auto-update-$$(date +%Y%m%d)
	@$(MAKE) deps-optimize
	@$(MAKE) test
	@if [ $$? -eq 0 ]; then \
		git add -A; \
		git commit -m "deps: automated dependency update $$(date +%Y-%m-%d) with enhanced validation"; \
		echo "$(GREEN)Dependencies updated successfully. Branch: deps/auto-update-$$(date +%Y%m%d)$(NC)"; \
	else \
		echo "$(RED)Tests failed after dependency update. Rolling back...$(NC)"; \
		git checkout - ; \
		git branch -D deps/auto-update-$$(date +%Y%m%d); \
	fi