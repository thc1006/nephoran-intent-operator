# =============================================================================
# Docker Build Makefile - Optimized for Nephoran Intent Operator (2025)
# =============================================================================
# Provides optimized Docker build targets that fix all build issues
# =============================================================================

# Registry configuration (CRITICAL FIX)
REGISTRY ?= ghcr.io
REGISTRY_USERNAME ?= thc1006
IMAGE_PREFIX = $(REGISTRY)/$(REGISTRY_USERNAME)

# Docker configuration
DOCKERFILE ?= Dockerfile.optimized-2025
PLATFORM ?= linux/amd64
DOCKER_BUILDKIT = 1
BUILDX_NO_DEFAULT_ATTESTATIONS = 1

# Build metadata
BUILD_VERSION ?= $(shell git rev-parse --short HEAD)
BUILD_DATE ?= $(shell date -Iseconds)
VCS_REF ?= $(shell git rev-parse HEAD)
BRANCH ?= $(shell git rev-parse --abbrev-ref HEAD)

# Go and Alpine versions
GO_VERSION ?= 1.24.6
ALPINE_VERSION ?= 3.21

# Services list
SERVICES = intent-ingest conductor-loop llm-processor nephio-bridge oran-adaptor porch-publisher planner

# =============================================================================
# Docker Build Targets
# =============================================================================

.PHONY: docker-help
docker-help: ## Show Docker build help
	@echo "=== Docker Build Targets (2025 Optimized) ==="
	@echo ""
	@echo "Registry: $(REGISTRY)"
	@echo "Username: $(REGISTRY_USERNAME)"  
	@echo "Image Prefix: $(IMAGE_PREFIX)"
	@echo "Dockerfile: $(DOCKERFILE)"
	@echo "Platform: $(PLATFORM)"
	@echo ""
	@echo "Services: $(SERVICES)"
	@echo ""
	@echo "Targets:"
	@echo "  docker-build-all          Build all services locally"
	@echo "  docker-push-all           Build and push all services"
	@echo "  docker-build-SERVICE      Build specific service locally"
	@echo "  docker-push-SERVICE       Build and push specific service"
	@echo "  docker-test-SERVICE       Test specific service container"
	@echo "  docker-setup-buildx       Setup optimized Docker buildx"
	@echo "  docker-login              Login to registry"
	@echo "  docker-clean              Clean up Docker artifacts"
	@echo ""
	@echo "Examples:"
	@echo "  make docker-build-intent-ingest"
	@echo "  make docker-push-intent-ingest"
	@echo "  make docker-build-all"
	@echo "  make REGISTRY=ghcr.io REGISTRY_USERNAME=myuser docker-push-all"

.PHONY: docker-setup-buildx
docker-setup-buildx: ## Setup optimized Docker buildx
	@echo "Setting up Docker buildx..."
	@if ! docker buildx ls | grep -q nephoran-builder; then \
		echo "Creating nephoran-builder..."; \
		docker buildx create \
			--name nephoran-builder \
			--driver docker-container \
			--driver-opt image=moby/buildkit:v0.16.0 \
			--driver-opt network=host \
			--buildkitd-flags '--allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host' \
			--use; \
		echo '[worker.oci]' > /tmp/buildkit.toml; \
		echo '  max-parallelism = 8' >> /tmp/buildkit.toml; \
		echo '  gc-keep-storage = "4GB"' >> /tmp/buildkit.toml; \
		echo '[worker.containerd]' >> /tmp/buildkit.toml; \
		echo '  max-parallelism = 8' >> /tmp/buildkit.toml; \
		echo '[registry."ghcr.io"]' >> /tmp/buildkit.toml; \
		echo '  insecure = false' >> /tmp/buildkit.toml; \
		docker buildx create --name nephoran-builder --config /tmp/buildkit.toml || true; \
		rm -f /tmp/buildkit.toml; \
	else \
		echo "Using existing nephoran-builder"; \
	fi
	@docker buildx use nephoran-builder
	@docker buildx inspect --bootstrap
	@echo "Buildx setup completed"

.PHONY: docker-login
docker-login: ## Login to GitHub Container Registry
	@echo "Logging in to $(REGISTRY)..."
	@docker login $(REGISTRY) -u $(REGISTRY_USERNAME)
	@echo "Login successful"

.PHONY: docker-build-all
docker-build-all: docker-setup-buildx ## Build all services locally
	@echo "Building all services..."
	@for service in $(SERVICES); do \
		echo "Building $$service..."; \
		$(MAKE) docker-build-$$service || exit 1; \
	done
	@echo "All services built successfully"

.PHONY: docker-push-all
docker-push-all: docker-setup-buildx ## Build and push all services
	@echo "Building and pushing all services..."
	@for service in $(SERVICES); do \
		echo "Building and pushing $$service..."; \
		$(MAKE) docker-push-$$service || exit 1; \
	done
	@echo "All services built and pushed successfully"

# =============================================================================
# Individual Service Targets (Generated)
# =============================================================================

# Generate build targets for each service
define DOCKER_SERVICE_TEMPLATE
.PHONY: docker-build-$(1)
docker-build-$(1): docker-setup-buildx ## Build $(1) service locally
	@echo "Building $(1)..."
	@if [ "$(1)" = "planner" ] && [ ! -d "planner/cmd/planner" ]; then \
		echo "ERROR: Planner service directory not found: planner/cmd/planner"; \
		exit 1; \
	elif [ "$(1)" != "planner" ] && [ ! -d "cmd/$(1)" ]; then \
		echo "ERROR: Service directory not found: cmd/$(1)"; \
		exit 1; \
	fi
	@docker buildx build \
		--file $(DOCKERFILE) \
		--platform $(PLATFORM) \
		--load \
		--progress plain \
		--provenance false \
		--sbom false \
		--build-arg SERVICE=$(1) \
		--build-arg BUILD_VERSION=$(BUILD_VERSION) \
		--build-arg BUILD_DATE=$(BUILD_DATE) \
		--build-arg VCS_REF=$(VCS_REF) \
		--build-arg GO_VERSION=$(GO_VERSION) \
		--build-arg ALPINE_VERSION=$(ALPINE_VERSION) \
		--build-arg CGO_ENABLED=0 \
		--build-arg BUILDPLATFORM=$(PLATFORM) \
		--build-arg TARGETPLATFORM=$(PLATFORM) \
		--build-arg TARGETOS=linux \
		--build-arg TARGETARCH=amd64 \
		--cache-from type=gha,scope=build-$(1)-$(BRANCH) \
		--cache-from type=gha,scope=build-$(1)-main \
		--cache-from type=gha,scope=build-$(1) \
		--cache-to type=gha,mode=max,scope=build-$(1)-$(BRANCH) \
		--tag $(IMAGE_PREFIX)/$(1):$(BUILD_VERSION) \
		--tag $(IMAGE_PREFIX)/$(1):latest \
		--tag $(IMAGE_PREFIX)/$(1):$(BRANCH) \
		--label org.opencontainers.image.service=$(1) \
		--label org.opencontainers.image.component=$(1) \
		--label service.name=$(1) \
		--label org.opencontainers.image.title=nephoran-$(1) \
		--label org.opencontainers.image.description="Nephoran Intent Operator - $(1) Service" \
		--label org.opencontainers.image.version=$(BUILD_VERSION) \
		--label org.opencontainers.image.created=$(BUILD_DATE) \
		--label org.opencontainers.image.revision=$(VCS_REF) \
		--label org.opencontainers.image.vendor="Nephoran Project" \
		--label org.opencontainers.image.licenses="Apache-2.0" \
		--label org.opencontainers.image.source="https://github.com/thc1006/nephoran-intent-operator" \
		.
	@echo "Successfully built $(1)"

.PHONY: docker-push-$(1)
docker-push-$(1): docker-setup-buildx ## Build and push $(1) service
	@echo "Building and pushing $(1)..."
	@if [ "$(1)" = "planner" ] && [ ! -d "planner/cmd/planner" ]; then \
		echo "ERROR: Planner service directory not found: planner/cmd/planner"; \
		exit 1; \
	elif [ "$(1)" != "planner" ] && [ ! -d "cmd/$(1)" ]; then \
		echo "ERROR: Service directory not found: cmd/$(1)"; \
		exit 1; \
	fi
	@docker buildx build \
		--file $(DOCKERFILE) \
		--platform $(PLATFORM) \
		--push \
		--progress plain \
		--provenance false \
		--sbom false \
		--build-arg SERVICE=$(1) \
		--build-arg BUILD_VERSION=$(BUILD_VERSION) \
		--build-arg BUILD_DATE=$(BUILD_DATE) \
		--build-arg VCS_REF=$(VCS_REF) \
		--build-arg GO_VERSION=$(GO_VERSION) \
		--build-arg ALPINE_VERSION=$(ALPINE_VERSION) \
		--build-arg CGO_ENABLED=0 \
		--build-arg BUILDPLATFORM=$(PLATFORM) \
		--build-arg TARGETPLATFORM=$(PLATFORM) \
		--build-arg TARGETOS=linux \
		--build-arg TARGETARCH=amd64 \
		--cache-from type=gha,scope=build-$(1)-$(BRANCH) \
		--cache-from type=gha,scope=build-$(1)-main \
		--cache-from type=gha,scope=build-$(1) \
		--cache-to type=gha,mode=max,scope=build-$(1)-$(BRANCH) \
		--tag $(IMAGE_PREFIX)/$(1):$(BUILD_VERSION) \
		--tag $(IMAGE_PREFIX)/$(1):latest \
		--tag $(IMAGE_PREFIX)/$(1):$(BRANCH) \
		--label org.opencontainers.image.service=$(1) \
		--label org.opencontainers.image.component=$(1) \
		--label service.name=$(1) \
		--label org.opencontainers.image.title=nephoran-$(1) \
		--label org.opencontainers.image.description="Nephoran Intent Operator - $(1) Service" \
		--label org.opencontainers.image.version=$(BUILD_VERSION) \
		--label org.opencontainers.image.created=$(BUILD_DATE) \
		--label org.opencontainers.image.revision=$(VCS_REF) \
		--label org.opencontainers.image.vendor="Nephoran Project" \
		--label org.opencontainers.image.licenses="Apache-2.0" \
		--label org.opencontainers.image.source="https://github.com/thc1006/nephoran-intent-operator" \
		.
	@echo "Successfully built and pushed $(1)"

.PHONY: docker-test-$(1)
docker-test-$(1): ## Test $(1) service container
	@echo "Testing $(1) container..."
	@docker image inspect $(IMAGE_PREFIX)/$(1):$(BUILD_VERSION) --format='Size: {{.Size}} bytes' || echo "Image not found locally"
	@timeout 30s docker run --rm $(IMAGE_PREFIX)/$(1):$(BUILD_VERSION) --help 2>&1 | head -10 || echo "Container test failed or timed out"
	@echo "Container test completed for $(1)"

endef

# Generate targets for all services
$(foreach service,$(SERVICES),$(eval $(call DOCKER_SERVICE_TEMPLATE,$(service))))

# =============================================================================
# Utility Targets
# =============================================================================

.PHONY: docker-clean
docker-clean: ## Clean up Docker artifacts
	@echo "Cleaning up Docker artifacts..."
	@docker system prune -f --volumes || true
	@docker builder prune -f || true
	@echo "Docker cleanup completed"

.PHONY: docker-context-size
docker-context-size: ## Check Docker build context size
	@echo "Checking Docker build context size..."
	@echo "Files that will be sent to Docker daemon:"
	@docker build --dry-run . 2>&1 | grep -E "(MB|KB|bytes)" || echo "Unable to determine context size"
	@echo ""
	@echo "Large files in context:"
	@find . -type f -size +1M \
		! -path './.git/*' \
		! -path './vendor/*' \
		! -path './node_modules/*' \
		-exec ls -lh {} \; | head -10 || true

.PHONY: docker-verify-registry
docker-verify-registry: ## Verify registry authentication
	@echo "Verifying registry authentication..."
	@echo "Registry: $(REGISTRY)"
	@echo "Username: $(REGISTRY_USERNAME)"
	@docker info | grep -i registry || echo "No registry info found"
	@docker pull alpine:3.21 >/dev/null 2>&1 && echo "✅ Registry connectivity OK" || echo "❌ Registry connectivity failed"

.PHONY: docker-list-images
docker-list-images: ## List built images
	@echo "Built Nephoran images:"
	@docker images $(IMAGE_PREFIX)/* --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}" 2>/dev/null || echo "No images found"

# =============================================================================
# Help Target
# =============================================================================

.PHONY: help
help: docker-help ## Show help

# Make docker-help the default target
.DEFAULT_GOAL := docker-help