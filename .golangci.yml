# golangci-lint configuration for nephoran-intent-operator
# Compatible with Go 1.24.x and internal/security package fixes
#
# This configuration balances code quality with pragmatic development needs
# while ensuring security best practices for O-RAN/Nephio orchestration.

run:
  # Timeout for analysis, overrides CI args if specified
  timeout: 5m
  
  # Exit code when at least one issue was found
  issues-exit-code: 1
  
  # Include test files in linting
  tests: true
  
  # Allow packages to be skipped for analysis (auto-detection)
  skip-dirs-use-default: true
  
  # Skip vendor directories
  skip-dirs:
    - vendor/
    - .git/
    - bin/
    - build/
    - dist/
  
  # Skip files with these patterns
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*_generated\\.go$"
    - "zz_generated\\..*\\.go$"

# Output configuration
output:
  # Colored output for better readability
  color: true
  
  # Output format: colored-line-number, line-number, json, tab, checkstyle, code-climate
  format: colored-line-number
  
  # Print lines of code with issue
  print-issued-lines: true
  
  # Print linter name in the end of issue text
  print-linter-name: true
  
  # Make issues output unique by line
  uniq-by-line: true
  
  # Sort results by file path, line number, column number
  sort-results: true

# Linters configuration
linters:
  # Disable all linters first, then explicitly enable required ones
  disable-all: true
  
  # Enable essential linters for security and code quality
  enable:
    # Core Go static analysis
    - govet          # Official Go tool for static analysis
    - staticcheck    # Advanced static analysis (SA series)
    - errcheck       # Checks for unchecked errors
    
    # Security linters
    - gosec          # Security-focused linter (G series)
    
    # Code quality and style
    - ineffassign    # Detects ineffectual assignments
    - unused         # Finds unused constants, variables, functions and types
    - typecheck      # Type checking (similar to go build)
    
    # Performance and best practices
    - gocritic       # Meta-linter with various checks
    - gocyclo        # Cyclomatic complexity
    - misspell       # Spelling mistakes
    - gofmt          # Checks if code was gofmt-ed
    - goimports      # Checks if imports are sorted
    
    # Potential bugs
    - bodyclose      # HTTP response body close
    - rowserrcheck   # SQL rows.Err check
    - sqlclosecheck  # SQL database close check
    
    # Code complexity
    - funlen         # Function length
    - gocognit       # Cognitive complexity

# Linters settings
linters-settings:
  # govet configuration
  govet:
    # Enable all govet checks
    check-shadowing: true
    enable-all: true
    
  # staticcheck configuration
  staticcheck:
    # Select the Go version to target
    go: "1.24"
    # Enable all SA checks
    checks: ["all"]
    
  # gosec configuration for security
  gosec:
    # Exclude specific rule IDs (use cautiously)
    excludes: []
    # Include rules for O-RAN security requirements
    includes: ["G101", "G102", "G103", "G104", "G106", "G107", "G108", "G109", "G110", "G201", "G202", "G203", "G204", "G301", "G302", "G303", "G304", "G305", "G401", "G402", "G403", "G404", "G501", "G502", "G503", "G504", "G505", "G601"]
    # Severity configuration
    severity: "medium"
    # Confidence level
    confidence: "medium"
    
  # errcheck configuration
  errcheck:
    # Report about not checking of errors in type assertions
    check-type-assertions: true
    # Report about assignment of errors to blank identifier
    check-blank: true
    # List of functions to exclude from checking
    exclude-functions:
      - (*github.com/sirupsen/logrus.Entry).Debug
      - (*github.com/sirupsen/logrus.Entry).Debugf
      - (*github.com/sirupsen/logrus.Entry).Info
      - (*github.com/sirupsen/logrus.Entry).Infof
      - (*github.com/sirupsen/logrus.Entry).Warn
      - (*github.com/sirupsen/logrus.Entry).Warnf
    
  # gocritic configuration
  gocritic:
    enabled-tags:
      - diagnostic
      - style
      - performance
      - experimental
    disabled-checks:
      - commentedOutCode  # Allow commented code for examples
      - whyNoLint        # Don't require explanation for nolint
      
  # gocyclo configuration
  gocyclo:
    # Minimal cyclomatic complexity to report
    min-complexity: 15
    
  # funlen configuration
  funlen:
    lines: 100
    statements: 50
    
  # gocognit configuration
  gocognit:
    # Minimal cognitive complexity to report
    min-complexity: 20

# Issues configuration
issues:
  # List of regexps of issue texts to exclude
  exclude:
    # Exclude common false positives
    - "Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*printf?|os\\.(Un)?Setenv). is not checked"
    - "exported (type|method|function) (.+) should have comment or be unexported"
    - "ST1000: at least one file in a package should have a package comment"
    
  # Exclude specific linters for certain patterns
  exclude-rules:
    # Exclude gosec G104 (audit errors not checked) for defer statements
    - linters: [gosec]
      text: "G104: Errors unhandled"
      path: "_test\\.go"
    
    # Allow long functions in test files
    - linters: [funlen]
      path: "_test\\.go"
    
    # Allow high complexity in generated files
    - linters: [gocyclo, gocognit]
      path: "zz_generated\\..*\\.go"
    
    # Exclude certain security checks for test files
    - linters: [gosec]
      text: "G101|G102|G103" # Hardcoded credentials in tests
      path: "_test\\.go"
      
    # Allow unused parameters in interface implementations
    - linters: [unused]
      text: "is unused"
      path: ".*\\.go"
      
  # Exclude specific directories from all checks
  exclude-dirs:
    - vendor/
    - testdata/
    - examples/
    
  # Show only new issues created in git patch
  new: false
  
  # Show only new issues created in git patch with revisions
  new-from-rev: ""
  
  # Maximum issues count per one linter
  max-issues-per-linter: 50
  
  # Maximum count of issues with the same text
  max-same-issues: 10
  
  # Fix issues automatically when possible
  fix: false

# Severity configuration
severity:
  # Default severity for issues
  default-severity: "error"
  
  # Custom severity rules
  rules:
    - linters: [misspell]
      severity: warning
    - linters: [gocognit, gocyclo]
      severity: warning
    - linters: [funlen]
      severity: info