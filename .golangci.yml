# golangci-lint configuration for nephoran-intent-operator (v2 schema)
# Compatible with golangci-lint v2.4.0+ and Go 1.24.x
# Ubuntu-only CI targeting O-RAN/Nephio orchestration requirements

run:
  # Timeout for analysis - increased for comprehensive checks
  timeout: 5m
  
  # Exit code when at least one issue was found
  issues-exit-code: 1
  
  # Include test files in linting
  tests: true
  
  # Go version for staticcheck (must be <= golangci-lint build version)
  go: "1.23"
  
  # Build tags for conditional compilation
  build-tags:
    - integration
    - e2e
  
  # Module download mode
  modules-download-mode: readonly

# Output configuration
output:
  formats:
    - format: colored-line-number
  # show-stats: true  # Show stats after run
  print-issued-lines: true
  print-linter-name: true
  sort-results: true

# Linters configuration
linters:
  # Disable all linters first, then enable specific ones
  disable-all: true
  
  # Enable essential linters for security and code quality
  enable:
    - typecheck      # Basic type checking (always enabled in v2)
    - revive         # Golint replacement with more rules
    - staticcheck    # Advanced static analysis
    - govet          # Official Go tool for static analysis
    - ineffassign    # Detects ineffectual assignments
    - errcheck       # Checks for unchecked errors
    - gocritic       # Meta-linter with various checks
    - misspell       # Spelling mistakes
    - unparam        # Unused function parameters
    - unconvert      # Unnecessary type conversions
    - prealloc       # Slice preallocation
    - gosec          # Security-focused linter (G series)
    - gofmt          # Formatting checks
    - goimports      # Import formatting

# Linter settings
linters-settings:
  # govet configuration
  govet:
    enable:
      - shadow
      - printf
      - atomic
      - bools
      - buildtag
      - copylocks
      - httpresponse
      - loopclosure
      - lostcancel
      - nilfunc
      - structtag
      - tests
      - unmarshal
      - unreachable
      - unusedresult
  
  # gosec configuration for O-RAN security requirements
  gosec:
    severity: "medium"
    confidence: "medium"
    excludes:
      - G104  # Unhandled errors - covered by errcheck
    config:
      global:
        audit: true
  
  # errcheck configuration
  errcheck:
    check-type-assertions: true
    check-blank: true
    exclude-functions:
      - (github.com/sirupsen/logrus.Logger).Debug
      - (github.com/sirupsen/logrus.Logger).Debugf
      - (github.com/sirupsen/logrus.Logger).Info
      - (github.com/sirupsen/logrus.Logger).Infof
      - (github.com/sirupsen/logrus.Logger).Warn
      - (github.com/sirupsen/logrus.Logger).Warnf
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)
  
  # gocritic configuration
  gocritic:
    enabled-tags:
      - diagnostic
      - style
      - performance
      - experimental
    disabled-checks:
      - commentedOutCode
      - whyNoLint
      - hugeParam
  
  # revive configuration
  revive:
    severity: warning
    rules:
      - name: blank-imports
      - name: context-as-argument
      - name: context-keys-type
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      - name: exported
      - name: if-return
      - name: increment-decrement
      - name: var-naming
      - name: var-declaration
      - name: package-comments
      - name: range
      - name: receiver-naming
      - name: time-naming
      - name: unexported-return
      - name: indent-error-flow
      - name: errorf
  
  # staticcheck configuration
  staticcheck:
    checks: ["all", "-ST1000", "-ST1003", "-ST1016"]

# Issues configuration
issues:
  # Unlimited issue reporting for thorough analysis
  max-issues-per-linter: 0
  max-same-issues: 0
  
  # Don't auto-fix issues
  fix: false
  
  # Exclude certain files and patterns
  exclude-files:
    - ".*\\.pb\\.go$"
    - ".*_generated\\.go$"
    - ".*_gen\\.go$"
    - "zz_generated\\..*\\.go$"
    - "mock_.*\\.go$"
    - "vendor/.*"
  
  # Exclude certain issue patterns
  exclude-rules:
    # Exclude test files from certain linters
    - path: _test\.go
      linters:
        - gosec
        - unparam
        - errcheck
    
    # Exclude generated files from all linters
    - path: "(.*\\.pb\\.go|.*_generated\\.go|zz_generated\\..*\\.go)"
      linters:
        - revive
        - gocritic
        - gosec
    
    # Allow certain patterns in test files
    - path: _test\.go
      text: "should not use dot imports"
      linters:
        - revive
    
    # Exclude vendor directory (but keep typecheck for dependency validation)
    - path: vendor/
      linters:
        - revive
        - gocritic
  
  # Independently of issue text, exclude the following linters in specific paths
  exclude-dirs:
    - vendor
    - testdata
    - examples
    - third_party
  
  # Show all issues from these linters
  include:
    - EXC0002  # disable excluding issues about comments from golint
    - EXC0003  # disable excluding issues about comments from revive
    - EXC0004  # disable excluding issues about comments from gocritic
    - EXC0005  # disable excluding issues about ineffectual assignments from ineffassign
    - EXC0011  # disable excluding issues about missing comments for exported types/functions
    - EXC0012  # disable excluding issues about missing comments for packages
    - EXC0013  # disable excluding issues about missing comments for constants
    - EXC0014  # disable excluding issues about missing comments for variables
    - EXC0015  # disable excluding issues about missing comments for type aliases

# Severity configuration
severity:
  default-severity: error
  rules:
    - linters:
        - misspell
        - gocritic
        - revive
      severity: warning