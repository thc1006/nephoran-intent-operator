# golangci-lint configuration for nephoran-intent-operator (v2 schema)
# Compatible with golangci-lint v2.4.0+ and Go 1.24.x
# Ubuntu-only CI targeting O-RAN/Nephio orchestration requirements

version: "2"

run:
  # Timeout for analysis
  timeout: 5m
  
  # Exit code when at least one issue was found
  issues-exit-code: 1
  
  # Include test files in linting
  tests: true
  
  # Go version for staticcheck
  go: "1.24"

# Output configuration (v2 schema)
output:
  show-stats: true

# Linters configuration (v2 schema)
linters:
  # Disable default presets, enable only curated set
  presets: []
  
  # Enable essential linters for security and code quality
  enable:
    - revive         # Golint replacement with more rules
    - staticcheck    # Advanced static analysis (includes gosimple, stylecheck)
    - govet          # Official Go tool for static analysis
    - ineffassign    # Detects ineffectual assignments
    - errcheck       # Checks for unchecked errors
    - gocritic       # Meta-linter with various checks
    - misspell       # Spelling mistakes
    - unparam        # Unused function parameters
    - unconvert      # Unnecessary type conversions
    - prealloc       # Slice preallocation
    - gosec          # Security-focused linter (G series)

# Linter-specific settings (v2 schema)
linters-settings:
    # govet configuration (v2 schema)
    govet:
      enable:
        - shadow
      enable-all: true
      
    # gosec configuration for O-RAN security requirements
    gosec:
      excludes: []
      includes: ["G101", "G102", "G103", "G104", "G106", "G107", "G108", "G109", "G110", "G201", "G202", "G203", "G204", "G301", "G302", "G303", "G304", "G305", "G401", "G402", "G403", "G404", "G501", "G502", "G503", "G504", "G505", "G601"]
      severity: "medium"
      confidence: "medium"
      
    # errcheck configuration
    errcheck:
      check-type-assertions: true
      check-blank: true
      exclude-functions:
        - (*github.com/sirupsen/logrus.Entry).Debug
        - (*github.com/sirupsen/logrus.Entry).Debugf
        - (*github.com/sirupsen/logrus.Entry).Info
        - (*github.com/sirupsen/logrus.Entry).Infof
        - (*github.com/sirupsen/logrus.Entry).Warn
        - (*github.com/sirupsen/logrus.Entry).Warnf
        
    # gocritic configuration
    gocritic:
      enabled-tags:
        - diagnostic
        - style
        - performance
      disabled-checks:
        - commentedOutCode
        - whyNoLint

# Issues configuration (v2 schema)
issues:
  # Exclude specific directories and files
  exclude-files:
    - vendor/
    - testdata/
    - examples/
    - ".*\\.pb\\.go$"
    - ".*_generated\\.go$"
    - "zz_generated\\..*\\.go$"
    - .git/
    - bin/
    - build/
    - dist/
  
  # Exclude common false positives
  exclude-rules:
    - text: "Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*printf?|os\\.(Un)?Setenv). is not checked"
    - text: "exported (type|method|function) (.+) should have comment or be unexported"
    - text: "ST1000: at least one file in a package should have a package comment"
    # Allow test files to have relaxed rules
    - linters: [gosec]
      text: "G104: Errors unhandled"
      path: "_test\\.go"
    - linters: [gosec]
      text: "G101|G102|G103" # Hardcoded credentials in tests
      path: "_test\\.go"
  
  # Unlimited issue reporting for thorough analysis
  max-issues-per-linter: 0
  max-same-issues: 0
  
  # Don't auto-fix issues
  fix: false

# Severity configuration (v2 schema)
severity:
  default: "error"
  rules:
    - linters: [misspell]
      severity: warning
    - linters: [gocritic]
      severity: warning